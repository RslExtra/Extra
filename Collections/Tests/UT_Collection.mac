

Class (TestCase) TestHashMap()
   var map;
   var objMap;

   Macro beforeTest()
      map = StringHashMap().setValueType(V_INTEGER);
      objMap = HashMap();
   End;

   Macro afterTest()
      map = null;
   End;

   Macro test_put_get()
      map.put("key1", 1);
      assertEquals(map.size, 1);
      assertTrue(map.containsValue(1));
      assertEquals(map.get("key1"), 1);
      assertNull(map.get("SomeKey"));

      map.put("key2", 2);
      assertEquals(map.size, 2);

      var r = map.put("key1", 111);
      assertEquals(r , 1);
      assertEquals(map.get("key1"),111);
      assertEquals(map.size, 2);

      map.clear();
      assertEquals(map.size, 0);
      assertTrue(map.isEmpty);

      var i;
      for(i, 1, 10000)
         map.put("key" + i, "val" + i);
      end;

      assertEquals(map.size, 10000);
      var finded = 0;
      var v;
      for(i, 1, 10000)
         v = map.get("key" + i);
         if(ValType(v) != V_UNDEF)
            finded = finded + 1;;
         end;
      end;
      assertEquals(finded, 10000);
   End;

   Macro test_toArrays()
      var i;
      var arr;
      for(i, 1, 10000)
         map.put("key" + i, "val" + i);
      end;
      arr = map.keys();
      assertEquals(arr.size, 10000);
      arr = map.values();
      assertEquals(arr.size, 10000);
   End;

   Macro test_remove()
      var i;
      for(i, 1, 10000)
         map.put("key" + i, "val" + i);
      end;

      assertEquals(map.size, 10000);
      var v = map.remove("key5566");
      assertEquals(v, "val5566");

      assertEquals(map.size, 9999);
      assertTrue(map.containsValue("val5566") == false);
      v = map.remove("key5566");
      assertNull(v);
      v = map.remove("key1");
      assertEquals(v, "val1");
      assertEquals(map.size, 9998);
      var removed = 0;

      for(i, 1, 10000)
         v = map.remove("key" + i);
         if(ValType(v) != V_UNDEF)
            removed = removed + 1;
         end;
      end;
      assertEquals(removed, 9998);
      assertEquals(map.size, 0);
   End;
End;

Class (TestHashMap) TestTreeMap()
   Macro beforeTest()
      map = TreeMap();
      map.setKeyType(V_STRING);
      map.setValueType(V_INTEGER);
      objMap = TreeMap();
   End;
End;

Class (TestCase) TestArrayMap()
   var map;
   Macro beforeTest()
      map = ArrayMap();
   End;

   Macro test_put_get()
      map.put("key1", 1);
      assertEquals(map.size, 1);
     // assertTrue(map.containsValue(1));
      assertEquals(map.get("key1"), 1);
      assertNull(map.get("SomeKey"));

      map.put("key2", 2);
      assertEquals(map.size, 2);

      var r = map.put("key1", 111);
      assertEquals(r , 1);
      assertEquals(map.get("key1"),111);
      assertEquals(map.size, 2);

      map.clear();
      assertEquals(0, map.size);
      assertTrue(map.isEmpty);

      var i;
      for(i, 1, 10000)
         map.put("key" + i, "val" + i);
      end;

      assertEquals(map.size, 10000);
      var finded = 0;
      var v;
      for(i, 1, 10000)
         v = map.get("key" + i);
         if(ValType(v) != V_UNDEF)
            finded = finded + 1;;
         end;
      end;
      assertEquals(finded, 10000);
   End;
End;

Class (TestCase) TestLinkedHashMap()
   var map;

   Macro beforeTest()
      map = LinkedHashMap();
      map.setPrimitive();
   End;

   Macro afterTest()
      map = null;
   End;

   Macro test_put_get()
      map.put("key1", 1);
      assertEquals(map.size, 1);
      assertTrue(map.containsValue(1));
      assertEquals(map.get("key1"), 1);
      assertNull(map.get("SomeKey"));

      map.put("key2", 2);
      assertEquals(map.size, 2);

      var r = map.put("key1", 111);
      assertEquals(r , 1);
      assertEquals(map.get("key1"),111);
      assertEquals(map.size, 2);

      map.clear();
      assertEquals(map.size, 0);
      assertTrue(map.isEmpty);

      var eqArrKeys = TArray();
      var eqArrVals = TArray();
      var i;

      for(i, 1, 10000)
         map.put("key" + i, "val" + i);
         eqArrKeys[eqArrKeys.size] = "key" + i;
         eqArrVals[eqArrVals.size] = "val" + i;
      end;

      assertEquals(map.size, 10000);

      assertArrays(map.keys.toArray, eqArrKeys);
      assertArrays(map.values.toArray, eqArrVals);

      var finded = 0;
      var v;
      for(i, 1, 10000)
         v = map.get("key" + i);
         if(ValType(v) != V_UNDEF)
            finded = finded + 1;;
         end;
      end;
      assertEquals(finded, 10000);
   End;
   /*
   Macro test_remove()
      var i;
      for(i, 1, 10000)
         map.put("key" + i, "val" + i);
      end;
      assertEquals(map.size, 10000);
      var v = map.remove("key5566");
      assertEquals(v, "val5566");
      assertEquals(map.size, 9999);
      assertTrue(map.containsValue("val5566") == false);
      v = map.remove("key5566");
      assertNull(v);
      v = map.remove("key1");
      assertEquals(v, "val1");
      assertEquals(map.size, 9998);
      var removed = 0;
      for(i, 1, 10000)
         v = map.remove("key" + i);
         if(ValType(v) == V_UNDEF)
            removed = removed + 1;
         end;
      end;
      assertEquals(removed, 9998);
      assertEquals(map.size, 0);
   End;
   */
End;

Class (TestCase) TestObjectHashMap()


End;
/*
var list = Linkedlist;
list.addItems(1, 2, 3, 4);

var itr = list.newIterator;
while ( itr.hasnext)
   println(itr.next);
end;

var arr = list.toArray();
debugbreak;
list.addAll(arr);

arr = list.toArray;*/
 //TestArrayList;
 //TestLinkedList;

//TestSortedLinkedList;

// TestHashMap;
// TestTreeMap;
// TestArrayMap;

//TestLinkedHashMap;
//TestHashSet;
//TestLinkedHashSet;
