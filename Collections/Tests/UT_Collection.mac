import "..\\mac\\extra\\RUnit\\RUnit.Mac";
import "..\\mac\\extra\\Collections\\Collections.Mac";
RUnitTest.SHOW_SUCCEED_FUN = false;
// Тестовый класс для объектных коллекций
Private Class (Any) Account(_acc : String, _summ : Integer)
   var acc = _acc;
   var summ = _summ;

   Macro compareTo(othAcc : Account)
      if(acc > othAcc.acc)
         return 1;
      elif(acc < othAcc.acc)
         return -1;
      else
         if(summ > othAcc.summ)
            return 1;
         elif (summ > othAcc.summ)
            return -1;
         else
            return 0;
         end;
      end;
   End;
/*
   Macro toString() : String
      return acc + " - " + summ;
   End;
*/
End;

Macro otherCompFun(a1,a2)
   return CF_ComparePrimitive(a1.acc,a2.acc);
end;

Macro otherCompFun2(a1,a2)
   return CF_ComparePrimitive(a1.summ, a2.summ);
end;

Macro otherEqualFun(a1,a2)
   return (otherCompFun(a1,a2) == 0);
End;

Class (TestCase) TestArrayList()
   var list;
   var objList;

   Macro fillList()
      list.add(0);
      list.add(1);
      list.add(2);
      list.add(3);

      objList.add(Account("40817810000000000001", 100));
      objList.add(Account("40817810000000000002", 200));
      objList.add(Account("42301810000000000001", 300));
      objList.add(Account("42305840000000000001", 300));
   End;

   Macro beforeTest()
      list = ArrayList().setPrimitive();
      objList = ArrayList();
      fillList();
   End;

   Macro afterTest()
      list = null;
      objList = null;
   End;

   Macro test_add()
      list.clear();
      list.add(1);
      assertEquals(1, list.size);
      assertTrue(list.contains(1));

      list.add("two");
      assertEquals(2, list.size);
      assertTrue(list.contains("two"));
      assertArrays(Arr_(1,"two"), list.toArray());

      list.addFirst(-5);
      assertArrays(Arr_(-5, 1, "two"), list.toArray);

      list.addLast(12);
      assertArrays(Arr_(-5, 1, "two", 12), list.toArray);

      list.add(null);
      assertArrays(Arr_(-5, 1, "two", 12, null), list.toArray);

      objList.clear();
      objList.add(Account("40817810000000000001", 200));
      assertEquals(1, objList.size);
      assertTrue(objList.contains(Account("40817810000000000001", 200)));
      assertFalse(objList.contains(Account("40817810000000000001", 201)));
      objList.add(null);
      assertEquals(2, objList.size);
      var ind = objList.indexOf(null);
      assertEquals(1, ind);
   End;

   Macro test_get()
      var g;
      assertArrays(Arr_(0, 1, 2, 3), list.toArray);
      g = list.getFirst();
      assertEquals(0, g);

      g = list.getLast();
      assertEquals(3, g);

      g = list.get(2);
      assertEquals(2, g);
   End;


   Macro test_remove()
      var r;
      assertArrays(Arr_(0, 1, 2, 3), list.toArray);

      r = list.removeFirst();
      assertEquals(0, r);
      assertArrays(Arr_(1, 2, 3), list.toArray);

      r = list.removeLast();
      assertEquals(3, r);
      assertArrays(Arr_(1, 2), list.toArray);

      r = list.remove(1);
      assertEquals(2, r);
      assertArrays(Arr_(1), list.toArray);

      r = list.remove(0);
      assertEquals(1, r);
      assertEquals(0, list.size);

      r = list.remove(1);
      assertNull(r);
      assertEquals(0, list.size);
   End;

   Macro test_set()
      var r;
      assertArrays(Arr_(0, 1, 2, 3), list.toArray);

      r = list.set(0, 11);
      assertEquals(0, r);
      assertArrays(Arr_(11, 1, 2, 3), list.toArray);

      r = list.set(-1, 10);
      assertNull(r);
      assertArrays(Arr_(11, 1, 2, 3), list.toArray);

      r = list.set(3, 33);
      assertEquals(3, r);
      assertArrays(Arr_(11, 1, 2, 33), list.toArray);
   End;

   Macro test_indexOf()
      var i;
      list.add(1);
      assertArrays(Arr_(0, 1, 2, 3, 1), list.toArray);

      i = list.indexOf(10);
      assertEquals(-1, i);

      i = list.indexOf(1);
      assertEquals(1, i);

      i = list.indexOf(3);
      assertEquals(3, i);

      i = list.lastIndexOf(1);
      assertEquals(4, i);

      i = objList.indexOf(Account("40817810000000000002", 200));
      assertEquals(1, i);

      i = objList.indexOf(Account("40817810000000000002", 202));
      assertEquals(-1, i);

      // objList.setEqualFunc(@otherEqualFun);
      i = objList.indexOf(Account("40817810000000000002", 202), @otherEqualFun);
      assertEquals(1, i);

   End;

   Macro test_Copy()
      assertArrays(Arr_(0, 1, 2, 3), list.toArray);
      var copyList = list.copy();
      assertEquals(4, copyList.size);
      assertArrays(Arr_(0, 1, 2, 3), copyList.toArray);
   End;

   Macro test_reverse()
      assertArrays(Arr_(0, 1, 2, 3), list.toArray);
      list.reverse();
      assertArrays(Arr_(3, 2, 1, 0), list.toArray);
      assertEquals(4, list.size);
   End;

   Macro test_addAll()
      var addedList = llistOf(10,20,30,40);
      list.addAll(addedList, 2);
      assertArrays(Arr_(0, 1, 10, 20, 30, 40, 2, 3), list.toArray);
      list.addAll(addedList);
      assertArrays(Arr_(0, 1, 10, 20, 30, 40, 2, 3, 10, 20, 30, 40), list.toArray);
      list.clear();
      list.addAll(addedList, 0);
      assertArrays(Arr_(10,20,30,40), list.toArray);
   End;

   Macro test_addArray()
      var addArr = Arr_(10,20,30,40);
      list.addArray(addArr, 2);
      assertArrays(Arr_(0, 1, 10, 20, 30, 40, 2, 3), list.toArray);
      list.addArray(addArr);
      assertArrays(Arr_(0, 1, 10, 20, 30, 40, 2, 3, 10, 20, 30, 40), list.toArray);
      list.clear();
      list.addArray(addArr, 0);
      assertArrays(Arr_(10,20,30,40), list.toArray);
   End;


   Macro test_Sort()
      list.clear();
      var i;
      for(i, 0, 10000, 1)
         list.add(random());
      end;
      list.sort();
      assertEquals(10001, list.size);
      assertTrue(list.isSorted());
      list.add(null);
      list.sort(@CF_CompareNullable);
      assertEquals(10002, list.size);
      assertTrue(list.isSorted(@CF_CompareNullable));

      objList.clear();
      for(i, 0, 1000, 1)
         objList.add(Account(String(Random) + String(Random), Random));
      end;

      objList.sort();
      assertEquals(1001, objList.size);
      assertTrue(objList.isSorted);
   End;

End;

Class (TestArrayList) TestLinkedList()

   Macro beforeTest()
      list = LinkedList().setPrimitive();
      objList = LinkedList();
      fillList();
   End;

   Macro test_getE()
      var nd;
      assertArrays(Arr_(0, 1, 2, 3), list.toArray);
      nd = list.getE(1);
      assertEquals(1, nd.e);
      assertEquals(0, nd.prv.e);
      assertEquals(2, nd.nxt.e);
      nd.e = 11;
      assertArrays(Arr_(0, 11, 2, 3), list.toArray);

      nd = list.getE(10);
      assertNull(nd);
   End;
End;

Class (TestCase) TestSortedLinkedList()
   var list;
   var objList;

   Macro beforeTest()
      list = SortedLinkedlist().setPrimitive();
      objList = SortedLinkedlist();
   End;

   Macro afterTest()
      list = null;
      objList = null;
   End;

   Macro test_add()
      var ind;

      ind = list.add(3);
      assertEquals(0, ind);

      ind = list.add(1);
      assertEquals(0, ind);

      ind = list.add(2);
      assertEquals(1, ind);

      list.add(4);
      list.add(2);
      assertArrays(Arr_(1,2,2,3,4), list.toArray);

      ind = objList.add(Account("40817810000000000002", 100));
      assertEquals(0, ind);

      ind = objList.add(Account("40817810000000000001", 300));
      assertEquals(0, ind);
      ind = objList.add(Account("40817810000000000001", 200));
      assertEquals(1, ind);
      ind = objList.add(Account("42305840000000000001", 300));
      assertEquals(3, ind);

      objList.setComparator(@otherCompFun2); //Пересортируем по сумме
      assertEquals(100, objList.get(0).summ);
      assertEquals(200, objList.get(1).summ);
      assertEquals(300, objList.get(2).summ);
      assertEquals(300, objList.get(3).summ);
   End;
End;


Class (TestCase) TestHashMap()
   var map;
   var objMap;

   Macro beforeTest()
      map = StringHashMap().setValueType(V_INTEGER);
      objMap = HashMap();
   End;

   Macro afterTest()
      map = null;
   End;

   Macro test_put_get()
      map.put("key1", 1);
      assertEquals(map.size, 1);
      assertTrue(map.containsValue(1));
      assertEquals(map.get("key1"), 1);
      assertNull(map.get("SomeKey"));

      map.put("key2", 2);
      assertEquals(map.size, 2);

      var r = map.put("key1", 111);
      assertEquals(r , 1);
      assertEquals(map.get("key1"),111);
      assertEquals(map.size, 2);

      map.clear();
      assertEquals(map.size, 0);
      assertTrue(map.isEmpty);

      var i;
      for(i, 1, 10000)
         map.put("key" + i, "val" + i);
      end;

      assertEquals(map.size, 10000);
      var finded = 0;
      var v;
      for(i, 1, 10000)
         v = map.get("key" + i);
         if(ValType(v) != V_UNDEF)
            finded = finded + 1;;
         end;
      end;
      assertEquals(finded, 10000);
   End;

   Macro test_toArrays()
      var i;
      var arr;
      for(i, 1, 10000)
         map.put("key" + i, "val" + i);
      end;
      arr = map.keys();
      assertEquals(arr.size, 10000);
      arr = map.values();
      assertEquals(arr.size, 10000);
   End;

   Macro test_remove()
      var i;
      for(i, 1, 10000)
         map.put("key" + i, "val" + i);
      end;

      assertEquals(map.size, 10000);
      var v = map.remove("key5566");
      assertEquals(v, "val5566");

      assertEquals(map.size, 9999);
      assertTrue(map.containsValue("val5566") == false);
      v = map.remove("key5566");
      assertNull(v);
      v = map.remove("key1");
      assertEquals(v, "val1");
      assertEquals(map.size, 9998);
      var removed = 0;

      for(i, 1, 10000)
         v = map.remove("key" + i);
         if(ValType(v) != V_UNDEF)
            removed = removed + 1;
         end;
      end;
      assertEquals(removed, 9998);
      assertEquals(map.size, 0);
   End;
End;

Class (TestHashMap) TestTreeMap()
   Macro beforeTest()
      map = TreeMap();
      map.setKeyType(V_STRING);
      map.setValueType(V_INTEGER);
      objMap = TreeMap();
   End;
End;

Class (TestCase) TestArrayMap()
   var map;
   Macro beforeTest()
      map = ArrayMap();
   End;

   Macro test_put_get()
      map.put("key1", 1);
      assertEquals(map.size, 1);
     // assertTrue(map.containsValue(1));
      assertEquals(map.get("key1"), 1);
      assertNull(map.get("SomeKey"));

      map.put("key2", 2);
      assertEquals(map.size, 2);

      var r = map.put("key1", 111);
      assertEquals(r , 1);
      assertEquals(map.get("key1"),111);
      assertEquals(map.size, 2);

      map.clear();
      assertEquals(0, map.size);
      assertTrue(map.isEmpty);

      var i;
      for(i, 1, 10000)
         map.put("key" + i, "val" + i);
      end;

      assertEquals(map.size, 10000);
      var finded = 0;
      var v;
      for(i, 1, 10000)
         v = map.get("key" + i);
         if(ValType(v) != V_UNDEF)
            finded = finded + 1;;
         end;
      end;
      assertEquals(finded, 10000);
   End;
End;

Class (TestCase) TestLinkedHashMap()
   var map;

   Macro beforeTest()
      map = LinkedHashMap();
      map.setPrimitive();
   End;

   Macro afterTest()
      map = null;
   End;

   Macro test_put_get()
      map.put("key1", 1);
      assertEquals(map.size, 1);
      assertTrue(map.containsValue(1));
      assertEquals(map.get("key1"), 1);
      assertNull(map.get("SomeKey"));

      map.put("key2", 2);
      assertEquals(map.size, 2);

      var r = map.put("key1", 111);
      assertEquals(r , 1);
      assertEquals(map.get("key1"),111);
      assertEquals(map.size, 2);

      map.clear();
      assertEquals(map.size, 0);
      assertTrue(map.isEmpty);

      var eqArrKeys = TArray();
      var eqArrVals = TArray();
      var i;

      for(i, 1, 10000)
         map.put("key" + i, "val" + i);
         eqArrKeys[eqArrKeys.size] = "key" + i;
         eqArrVals[eqArrVals.size] = "val" + i;
      end;

      assertEquals(map.size, 10000);

      assertArrays(map.keys.toArray, eqArrKeys);
      assertArrays(map.values.toArray, eqArrVals);

      var finded = 0;
      var v;
      for(i, 1, 10000)
         v = map.get("key" + i);
         if(ValType(v) != V_UNDEF)
            finded = finded + 1;;
         end;
      end;
      assertEquals(finded, 10000);
   End;
   /*
   Macro test_remove()
      var i;
      for(i, 1, 10000)
         map.put("key" + i, "val" + i);
      end;
      assertEquals(map.size, 10000);
      var v = map.remove("key5566");
      assertEquals(v, "val5566");
      assertEquals(map.size, 9999);
      assertTrue(map.containsValue("val5566") == false);
      v = map.remove("key5566");
      assertNull(v);
      v = map.remove("key1");
      assertEquals(v, "val1");
      assertEquals(map.size, 9998);
      var removed = 0;
      for(i, 1, 10000)
         v = map.remove("key" + i);
         if(ValType(v) == V_UNDEF)
            removed = removed + 1;
         end;
      end;
      assertEquals(removed, 9998);
      assertEquals(map.size, 0);
   End;
   */
End;

Class (TestCase) TestObjectHashMap()


End;


// TestArrayList;
// TestLinkedList;

// TestSortedLinkedList;

// TestHashMap;
 TestTreeMap;
// TestArrayMap;

//TestLinkedHashMap;
//TestHashSet;
//TestLinkedHashSet;
