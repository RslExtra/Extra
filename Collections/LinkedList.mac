/**
   @package Collections
   Файл включает в себя реализацию связного списка [LinkedList] и отсортированного связного списка [SortedLinkedList].
*/


/*!
   LinkedList  - структура для хранения объектов произвольного типа в памяти, с быстрым последовательным доступом и вставкой О(1) в произвольное место списка.
               - использовать для последовательного ввода и вывода коллекции через LinkedList.iter();
               - не использовать для вывода объекта по индексу в списке

   Основные Методы.
      - add(Ob : Variant, ind : Integer)  - добавить элемент в список, если ind не указан, добаляет в конец.
      - addFirst(Ob : Variant) - добавляет объект в начало списка
      - addLast(Ob : Variant)  - добавляет объект в конец списка
      - addE(Ob : Variant, ind : Integer) : Node - тоже самое что и add, только возвращает ссылку на свой Node.
      - get(index : Integer) : Variant - получить элемент по индексу. не рекомендуется использовать. Пробегать лучше через итератор.
      - getFirst() : Variant
      - getLast() : Variant
      - set(index : Integer, newVal : Variant) : Variant - устанавливает новое значение элементу списка с index. Возвращает вытесняемое значение.
      - remove(nd : Node) : Variant - удаляет элемент из списка. Возвращает значение.
      - removeFirst() : Variant - удаляет первый элемент из списка.
      - removeLast() : Variant  - удаляет последний элемент из списка.
      - indexOf(findValue : Variant, compRef : MethodReference) : Integer - возвращает позицию первого значения в списке равного findValue
      - lastIndexOf(findValue : Variant, compRef : MethodReference) : Integer - возвращает позицию последнего значения в списке равного findValue
      - contains(findValue : Variant, compRef : MethodReference) : Bool = возвращает true - если есть в списке равный элемент, false - если нет.
      - clear() - очищает список и подготавливает его для сборщика мусора. - Рекомендуется использовать при необходиомтси экономии памяти.
      - copy() : LinkedList - создает копию связного списка.
      - reverse() - "разворачивает" список.
      - printList()- печать списка на синий экран
      - getInstance() : LinkedList - возвращает новый связный список.

      - newIterator() : ListItr - возвращает спозиционированный в начало списка итератор
      - newDescIterator(): DescendingIterator - возвращает обратный итератор спозационированный в конец списка

      - addAll(list : LinkedList ) - добавляет в конец списка все элементы из list.
      - fromList(list : LinkedList) - = addAll()
      - fromArray(arr : TArray)    - добавляет в конец списка все элементы из arr.
      - toArray() : TArray         - возвращает массив заполненный элементами из списка

      - setCompareFun(compareFun) - устанавливает функцию для сравнения элементов списка.
      - sort(compareFun : ) - сортирует список. CompareFun - ссылка на метод компаратор типа Compare(o1,o2) : Integer
                           , который возвращает 0 - если o1==o2, >0 если o1>o2,  <0 если o1 < o2.
                           Можно не указывать при использовании .setCompareFun(compareFun)

      - isSorted() : Bool  - Возвращает true, если список отсортирован


      class ListItr(list : LinkedList, index) - Класс итератора.
                     list  - связный список по которому необходмо пройтись
                     index - индекс стартового элемента
         Методы
         - hasnext() : Bool - возвращает true если есть элемент для выдачи
         - hasprev() : Bool - возвращает true если есть предыдущий элемент
         - next() : Variant - возвращает следующий элемент
         - previous() : Variant - возвращает предыдущий элемент
         - get() - возвращает текущий элемент
         - getNode() : Node - возвращает Node текущего элемента
         - add(el : Variant)- добавляет элемент после текущего
         - addE(el : Variant) : Node - добавляет элемент после текущего и возвращает его Node
         - set(el : Variant) - изменяет значение текущего элемента
         - remove() - удаляет текущий элемент из списка, не позиционируется на следующий.
         - clear()  - реинициализирует итератор.
         - refresh()- актуализирует следующий шаг после ручного удаления, добавления и пр.
         - toPos(index : Integer) - перемещается к элементу с индексом Index
         - moveNext()

   Глобальные процедуры:
   ListOf(..) - возвращает LinkedList заполненный параметрами через запятую
      */

import "..\\Mac\\Extra\\Collections\\Iterable.mac";

/**
   Элемент [LinkedList].
*/
Private Class Node(p: @Node, el: Variant, n : @Node)
   var e = el;
   var prv = p;
   var nxt = n;

   Macro toString() : String
      return String(e);
   end;
End;

//Класс Итератор принимает лист, и начальный индекс откуда начнем бежать
Class (IteratorInterface) ListItr(LList, ind)
   var inst = LList;
   var nextNode               = null;
   var nextIndex  : Integer   = 0;
   var lastIndex  : Integer   = -1;
   var LastReturned           = null;

   if (ValType(ind) == V_UNDEF)
      ind = 0;
   elif (ValType(ind) != V_INTEGER)
      return Throw(IllegalArgumentException());
   elif ((ind < 0) or (ind > inst.size))
      return Throw(IndexOutOfBoundsException());
   end;
   if (ind == inst.size)
      nextNode = null;
   else
      nextNode = inst.nodeByInd(ind);
   end;
   nextIndex = ind;
   //-------------------------------------------


   Macro getLastReturned()
      return LastReturned.e;
   End;

   Macro getNextIndex()
      return nextIndex;
   End;

   Macro clear()
      nextIndex = 0;
      lastIndex = -1;
      LastReturned = null;
      nextNode = inst.nodeByInd(0);
   end;

   Macro toPos(ind : Integer)
      if ((ind < 0) or (ind > inst.size))
         return Throw(IndexOutOfBoundsException());
      end;
      if (ind == inst.size)
         nextNode = null;
      else
         nextNode = inst.nodeByInd(ind);
      end;
      nextIndex = ind;
   End;

   Macro hasNext() : Bool
      return (nextIndex < inst.size);
   End;

   Macro hasPrev() : Bool
      return (nextIndex > 0);
   End;

   Macro next() : Variant
      if (nextIndex > inst.size)
         return Throw(NoSuchElementException());
      end;
      LastReturned = nextNode;
      nextNode = nextNode.nxt;
      lastIndex = nextIndex;
      nextIndex = nextIndex + 1;
      return LastReturned.e;
   End;

   Macro prev() : Variant
      if (nextIndex == 0)
         return Throw(NoSuchElementException());
      end;

      if (Valtype(nextNode) == V_UNDEF)
         nextNode = inst.last;
         LastReturned = nextNode;
      else
         nextNode = nextNode.prv;
         LastReturned = nextNode;
      end;
      nextIndex = nextIndex - 1;
      lastIndex = nextIndex;
      return LastReturned.e;
   End;

   Macro getLastNode() : Node
      return LastReturned;
   End;
/*
   Macro get() : Variant
      if (lastIndex < 0)
         return Throw(NoSuchElementException);
      end;
      return LastReturned.e;
   end;
*/
   Macro addE(el : Variant) : Node
      var newNode;
      if (ValType(nextNode) == V_UNDEF)
         newNode = inst.linkLast(el);
      else
         newNode = inst.linkBefore(el, nextNode);
      end;
      nextIndex = nextIndex + 1;
      lastIndex = -1;
      nextNode = newNode.nxt;
      return newNode;
   End;

   Macro add(el : Variant)
      addE(el);
   End;

   Macro addBefore(el : Variant)
      inst.linkBefore(el, LastReturned);
      nextIndex = nextIndex + 1;
   End;

   Macro set(el : Variant) : Variant
      if (lastIndex < 0)
         return Throw(IllegalStateException);
      end;
      var oldVal = LastReturned.e;
      LastReturned.e = el;
      lastIndex = -1;
      return oldVal;
   End;

   Macro remove() : Variant
      if (lastIndex < 0)
         return Throw(IllegalStateException);
      end;
      var rem = LastReturned.e;
      inst.unlink(LastReturned);
      lastIndex = -1;
      lastReturned = null;
      return rem;
   End;

   Macro Destructor()
      LastReturned = null;
      nextNode = null;
      inst = null;
   End;
End;

//-------------------------------------------------
Private Const SORT_FRAGMENT_SIZE : Integer = 10000;  // Размер фрагмента для сортировки в массиве
/**
   Классическая реализация двусвязного списка. Имеет методы для использования как стэк и очередь.
*/
Class (ListInterface) LinkedList()
   size = 0;
   comparator = @VariantCompare;
   equalsfunc = @VariantEquals;
   var first: Node;
   var last : Node;

   Macro setPrimitive()

   End;

   Macro newInstance()
      return LinkedList()
            .setComparator(comparator)
            .setEqualsFunc(equalsfunc);
   End;


   Private Macro checkPosInd(ind : Integer) : Bool
      if (ValType(ind) == V_UNDEF) return false; end;
      return ((ind>=0) and (ind<size))
   End;

   Macro nodeByInd(ind : Integer) : Node
      var x : Node;
      var val;
      var i;
      if (ind <= (size/2))
         x = first;
         i = 0;
         while (i < ind)
            x = x.nxt;
            i = i + 1;
         end;
      else
         x = last;
         i = size - 1;
         while (i > ind)
            x = x.prv;
            i = i - 1;
         end;
      end;
      return x;
   End;

   Macro linkLast(el : Variant) : Node
      var l : Node= last;
      var newNode = Node(l, el, null);
      last = newNode;
      if (ValType(l) == V_UNDEF)
         first = newNode;
      else
         l.nxt = newNode;
      end;
      size = size + 1;
      return newNode;
   End;

   Macro linkFirst(el : Variant) : Node
      var f : Node = first;
      var newNode = Node(null, el, f);
      first = newNode;
      if (ValType(f) == V_UNDEF)
         last = newNode;
      else
         f.prv = newNode;
      end;
      size = size + 1;
      return newNode;
   End;

   Macro linkBefore(el: Variant, nd : Node) : Node
      var pred : Node = nd.prv;
      var newNode : Node = Node(pred, el, nd);
      nd.prv = newNode;
      if (ValType(pred) == V_UNDEF)
         first = newNode;
      else
         pred.nxt = newNode
      end;
      size = size + 1;
      return newNode;
   End;

   Macro linkAfter(el: Variant, nd : Node) : Node
      var after : Node = nd.nxt;
      var newNode: Node = Node(nd, el, after);
      nd.nxt = newNode;
      if (ValType(after) == V_UNDEF)
         last = newNode;
      else
         after.prv = newNode;
      end;
      size = size + 1;
      return newNode;
   End;

   Macro unlink(x : Node) : Variant
      var el = x.e;
      var n : Node = x.nxt;
      var p : Node = x.prv;
      if (ValType(p) == V_UNDEF)
         first = n;
      else
         p.nxt = n;
         x.prv = null;
      end;

      if (ValType(n) == V_UNDEF)
         last = p;
      else
         n.prv = p;
         x.nxt = null;
      end;
      size = size - 1;
      x.e = null;
      return el;
   End;

   Macro unlinkFirst(f : Node) : Variant
      var el = f.e;
      var n : Node = f.nxt;
      f.e = null;
      f.nxt = null;
      first = n;
      if (ValType(n) == V_UNDEF)
         last = null;
      else
         n.prv = null;
      end;
      size = size - 1;
      return el;
   End;

   Macro unlinkLast(l : Node) : Variant
      var el = l.e;
      var p : Node = l.prv;
      l.e = null;
      l.prv = null;
      last = p;
      if (ValType(p) == V_UNDEF)
         first = null;
      else
         p.nxt = null;
      end;
      size = size - 1;
      return el;
   End;

   Macro addFirst(el : Variant) : Node
      return linkFirst(el)
   End;

   Macro addLast(el : Variant) : Node
      return linkLast(el);
   End;

   Macro addE(el : Variant, ind : Integer) : Node
      if (ValType(ind) == V_UNDEF)
         return linkLast(el);
      end;
      if (Not(checkPosInd(ind)))
         return Throw(IndexOutOfBoundsException);
      end;
      if (ind == (size-1))
         return linkLast(el);
      else
         return linkBefore(el,nodeByInd(ind));
      end;
   End;

   Macro add(el : Variant, ind : Integer) : Bool
      addE(el, ind);
      return true;
   End;

   Macro append(el : Variant) : Bool
      linkLast(el);
      return true;
      OnError
         return false;
   End;

   /**
      Возвращает ноду под индексом 'ind' или `null`, если индекс не верен.
   */
   Macro getE(ind : Integer) : Node
      if (checkPosInd(ind))
         return nodeByInd(ind);
      else
         return null;
      end;
   End;

   Macro get(ind : Integer) : Variant
      var n = getE(ind);
      if (ValType(n) != V_UNDEF)
         return n.e;
      end;
   End;

   Macro set(ind : Integer, el : Variant) : Variant
      if (not(checkPosInd(ind))) return null; end;
      var x : Node = nodeByInd(ind);
      var oldVal = x.e;
      x.e = el;
      return oldVal;
   End;

   Macro getFirst() : Variant
      var f = first;
      if (ValType(f) == V_UNDEF) return null; end;
      return f.e;
   End;

   Macro getLast() : Variant
      var l = last;
      if (ValType(l) == V_UNDEF) return null; end;
      return l.e;
   End;

   Macro removeFirst() : Variant
      var f = first;
      if (ValType(f) == V_UNDEF) return null; end;
      return unlinkFirst(f);
   End;

   Macro removeLast() : Variant
      var l = last;
      if (ValType(l) == V_UNDEF) return null; end;
      return unlinkLast(l);
   End;

   Macro removeNode(nd : Node) : Variant
      if (ValType(nd) == V_UNDEF) return null; end;
      return unlink(nd);
   End;

   Macro remove(ind) : Variant
      if (Not(checkPosInd(ind)))
         return Throw(IndexOutOfBoundsException);
      end;
      var nd = nodeByInd(ind);
      return unlink(nd);
   End;

   /**
      Поиск ноды со значением 'v' в списке. Возвращает объект типа [Node] или `null` и, опционально,в переданный параметр 'finded' индекс найденного элемента или -1.
   */
   Macro searchNode(v : Variant, finded : @Integer) : Node
      var ind = 0;
      var x = first;
      while (ValType(x) != V_UNDEF)
         if (ExecMacro2(equalsfunc, v, x.e))
            setParm(2, ind);
            return x;
         end;
         x = x.nxt;
         ind = ind + 1;
      end;
      setParm(2, -1);
      return null;
   End;

   /**
      Поиск ноды в обратном порядке со значением 'v' в списке. Возвращает объект типа [Node] или `null` и, опционально,в переданный параметр 'finded' индекс найденного элемента или -1.
   */
   Macro searchLastNode(v : Variant, finded : @Integer) : Node
      var ind = size - 1;
      var x = last;
      while (ValType(x) != V_UNDEF)
         if (ExecMacro2(equalsfunc, v, x.e))
            setParm(2, ind);
            return x;
         end;
         ind = ind - 1;
         x = x.prv;
      end;
      setParm(2, -1);
      return -1;
   End;

   Macro indexOf(v : Variant) : Integer
      var ind = -1;
      searchNode(v, ind);
      return ind;
   End;

   Macro lastIndexOf(v : Variant) : Integer
      var ind = -1;
      searchLastNode(v, ind);
      return ind;
   End;

   Macro contains(v : Variant) : Bool
      return (indexOf(v) >= 0);
   End;

   Macro containsAll(enumerable) : Bool
      var res = true;
      for(var el, enumerable)
         res = (res and (contains(el)));
      end;
      return res;
   End;

   Macro removeAll(enumerable) : Bool
      var removed = false;
      var ind;
      for (var el, enumerable)
         var nd = searchNode(el, ind);
         if (ind >= 0)
            removeNode(nd);
            removed = true;
         end;
      end;
      return removed;
   End;

   // Методы Stack --------------------------------

   /**
      Возвращает первый элемент списка или `null` если список пуст.
   */
   Macro peek() : Variant
      var f = first;
      if (ValType(f) == V_UNDEF) return null; end;
      return f.e;
   End;

   /**
      Возвращает и удаляет первый элемент списка или `null` если список пуст.
   */
   Macro poll() : Variant
      var f = first;
      if (ValType(f) == V_UNDEF) return null; end;
      return unlinkFirst(f);
   End;

   /**
      Добавляет 'el' в начало списка. Возвращает текущий экземпляр класса.
   */
   Macro push(el : Variant)
      addFirst(el);
   End;

   // ---------------------------------------------

   Macro clear()
      var x = first;
      var after;
      while (ValType(x) != V_UNDEF)
         after = x.nxt;
         x.e = null;
         x.nxt = null;
         x.prv = null;
         x = after;
      end;
      first = null;
      last = null;
      size = 0;
      return this;
   End;

   Macro copy()
      var newList = newInstance();
      var cur = first;
      while (ValType(cur) != V_UNDEF)
         newList.addLast(cur.e);
         cur = cur.nxt;
      end;
      return newList;
   end;

   Macro reverse()
      if (size<2) return this; end;
      var cur = first;
      while (ValType(cur) != V_UNDEF)
         var oldNext = cur.nxt;
         cur.nxt = cur.prv;
         cur.prv = oldNext;
         cur = cur.prv;
      end;
      cur   = first;
      first = last;
      last  = cur;
      return this;
   End;


   Macro newIterator(ind : Integer) : ListItr
      return ListItr(this, ind);
   End;

   Macro newDescIterator(ind : Integer) : DescendingIterator
      return DescendingIterator(this, ind);
   End;

   Macro addAll(enumerable, ind : Integer) : LinkedList
      if (ValType(enumerable) == V_UNDEF) return this; end;
      if (enumerable.size == 0) return this; end;
      if (ValType(ind) != V_INTEGER)
         ind = size;
      elif (ind > size)
         return Throw(IndexOutOfBoundsException);
      end;
      var el;
      if (ind == size)
         for (el, enumerable)
            addLast(el);
         end;
      elif (ind == 0)
         for (el, enumerable)
            addFirst(el);
         end;
      else
         var nd = nodeByInd(ind).prv;
         for (el, enumerable)
            nd = linkAfter(el, nd);
         end;
      end;
      return this;
   End;

   Macro addItems() : Linkedlist
      var i, p;
      for (i, 1, Parmcount-1, 1)
         GetParm(i, p);
         linkLast(p);
      end;
      return this;
   End;

   Macro subList(from : Integer, to : Integer) : LinkedList
      var newList = newInstance();
      if (ValType(from) == V_UNDEF)
         from = 0;
      elif (from < 0)
         return Throw(IndexOutOfBoundsException);
      end;
      if (ValType(to) == V_UNDEF)
         to = size;
      elif (from > size)
         return Throw(IndexOutOfBoundsException);
      end;
      var cnt = abs(to - from);
      var nd = nodeByInd(from);
      var i = 0;
      while ((nd != null) and (i != cnt))
         newList.linkLast(nd.e);
         nd = nd.nxt;
         i = i + 1;
      end;
      return newList;
   End;

   Macro toArray() : SArray
      var resArr = SArray();
      if (size == 0) return resArr; end;
      resArr[size-1] = null;        // Предварительно расширяем массив
      var i = 0;
      var nd = first;
      while (nd != null)
         resArr[i] = nd.e;
         nd = nd.nxt;
         i = i + 1;
      end;
      return resArr;
   End;

   Macro isSorted(compareFun) : Bool
      if (size <= 1) return true; end;
      if (ValType(compareFun) == V_UNDEF)
         compareFun = comparator;
      end;
      var c = first;
      var n = c.nxt;
      while (n != null)
         if (ExecMacro2(compareFun, c.e, n.e) > 0)
            return false;
         end;
         c = n;
         n = c.nxt;
      end;
      return true;
   End;

   Macro sort(compareFun)
      if (size <=1) return; end;
      if (ValType(compareFun) == V_UNDEF)
         compareFun = comparator;
      end;
      var arr = toArray();
      ExQSort(arr, compareFun);
      clear();
      addAll(arr);
      return this;
   End;

   /**
      Возвращает новый объект типа [SortedLinkedList] состоящий из элементов исходного списка в порядке согласно функции-компаратору 'compareFun'.

      oparam compareFun - Ссылка на функцию-компаратор, если не указана, будет использоваться функция, определенная для списка этого списка.
   */
   Macro toSortedList(compareFun)
      if (ValType(compareFun) == V_UNDEF)
         compareFun = comparator;
      end;
      var copyList = copy();
      copyList.sort(compareFun);
      var resultList = GenObject("SortedLinkedlist", compareFun);
      resultList.addAll(this);
      return resultList;
   End;

   Macro equals(otherList : LinkedList) : Bool
      if (this == otherList) return true; end;
      if ((isEqClass(GenClassName(this), otherList) == false) or (size != otherList.size ) or (hash != otherList.hash))
         return false;
      end;
      var a = first;
      var b = otherList.first;
      var othItr = otherList.newIterator();
      while (a != null)
         if (ExecMacro2(equalsfunc, a.e, b.e) == false)
            return false;
         end;
         a = a.nxt;
         b = b.nxt;
      end;
      return true;
   End;

   Macro Destructor()
      clear();
   End;
End;

/**
   Сортированный связный список (в каждый момент времени).
   Если порядок нужен лишь однажды, быстрее использовать LinkedList.sort()
   @param  compareFun - опционально ссылка на метод компаратор Compare(el1,el2) : Integer, для сравнения объектов)
   Если не указан или null, то используется метод объекта  <objectClass>.CompareTo(ob : <objectClass>).
*/
Class (Linkedlist) SortedLinkedList(compareFun)
   InitLinkedList();
   if (ValType(compareFun) != V_UNDEF)
      setComparator(compareFun);
   end;

   Macro newInstance()
      return SortedLinkedlist(comparator);
   End;

   Macro addE(el : Variant, ind : @Integer) : Node
      var x = last;
      var i = size;
      while (x != null)
         if (ExecMacro2(comparator, el, x.e) >= 0)
            setParm(2, i);
            return linkAfter(el, x);
         end;
         i = i - 1;
         x = x.prv;
      end;
      setParm(2, 0);
      linkFirst(el);
   End;
   /**
      Добавляет элемент и возвращает его индекс.
   */
   Macro add(el : Variant) : Integer
      var ind = -1;
      addE(el, ind);
      return ind;
   End;

   /* Переопределим, чтобы корректно работали методы AddAll, FromArray*/
   Macro addLast(el : Variant) : Integer
      var ind = -1;
      addE(el, ind);
      return ind;
   End;

   Macro set()
      return Throw(UnsupportedOperationException);
   end;

   Macro setComparator(compareFun)
      comparator = compareFun;
      if (isSorted == false)
         sort();
      end;
      return this;
   End;

End;


Macro LListOfPrimitive()
   return LinkedList.setPrimitive();
End;


/** Возвращает связный список содержащий параметры `varargs`
*/
// н.р llistOf(10, 21, 32, "Hello") вернет список [10, 21, 32, "Hello"]
Macro llistOf(varargs) : LinkedList
   var ll = LinkedList();
   var p;
   var i = 0;
   var count = Parmcount();
   while (i < count)
      getParm(i, p);
      ll.addLast(p);
      i = i + 1;
   end;
   return ll;
End;

// Возвращает LinkedList примитивов из заданого дипазона.
// _from - начало диапазона
// _to   - конец диапазона
// [_step] - опционально, шаг. По умолчанию = 1
// н.р. llrange(10, 1, 2) вернет список [10, 8, 6, 4, 2]

Macro llrange(_from : Integer, _to: Integer, _step: Integer) : LinkedList
   var resList = LinkedList().setPrimitive();
   var step = abs(ifNull(_step, 1));
   if (_from > _to)
      step = -step;
   end;
   var i;
   for (i, _from, _to, step)
      resList.addLast(i);
   end;
   return resList;
End;
