/**
   @package Collections
   Файл включает в себя реализацию связного списка [LinkedList] и отсортированного связного списка [SortedLinkedList].
*/


/*!
   LinkedList  - структура для хранения объектов произвольного типа в памяти, с быстрым последовательным доступом и вставкой О(1) в произвольное место списка.
               - использовать для последовательного ввода и вывода коллекции через LinkedList.iter();
               - не использовать для вывода объекта по индексу в списке

   Основные Методы.
      - add(Ob : Variant, ind : Integer)  - добавить элемент в список, если ind не указан, добаляет в конец.
      - addFirst(Ob : Variant) - добавляет объект в начало списка
      - addLast(Ob : Variant)  - добавляет объект в конец списка
      - addE(Ob : Variant, ind : Integer) : Node - тоже самое что и add, только возвращает ссылку на свой Node.
      - get(index : Integer) : Variant - получить элемент по индексу. не рекомендуется использовать. Пробегать лучше через итератор.
      - getFirst() : Variant
      - getLast() : Variant
      - set(index : Integer, newVal : Variant) : Variant - устанавливает новое значение элементу списка с index. Возвращает вытесняемое значение.
      - remove(nd : Node) : Variant - удаляет элемент из списка. Возвращает значение.
      - removeFirst() : Variant - удаляет первый элемент из списка.
      - removeLast() : Variant  - удаляет последний элемент из списка.
      - indexOf(findValue : Variant, compRef : MethodReference) : Integer - возвращает позицию первого значения в списке равного findValue
      - lastIndexOf(findValue : Variant, compRef : MethodReference) : Integer - возвращает позицию последнего значения в списке равного findValue
      - contains(findValue : Variant, compRef : MethodReference) : Bool = возвращает true - если есть в списке равный элемент, false - если нет.
      - clear() - очищает список и подготавливает его для сборщика мусора. - Рекомендуется использовать при необходиомтси экономии памяти.
      - copy() : LinkedList - создает копию связного списка.
      - reverse() - "разворачивает" список.
      - printList()- печать списка на синий экран
      - getInstance() : LinkedList - возвращает новый связный список.

      - newIterator() : ListItr - возвращает спозиционированный в начало списка итератор
      - newDescIterator(): DescendingIterator - возвращает обратный итератор спозационированный в конец списка

      - addAll(list : LinkedList ) - добавляет в конец списка все элементы из list.
      - fromList(list : LinkedList) - = addAll()
      - fromArray(arr : TArray)    - добавляет в конец списка все элементы из arr.
      - toArray() : TArray         - возвращает массив заполненный элементами из списка

      - setCompareFun(compareFun) - устанавливает функцию для сравнения элементов списка.
      - sort(compareFun : ) - сортирует список. CompareFun - ссылка на метод компаратор типа Compare(o1,o2) : Integer
                           , который возвращает 0 - если o1==o2, >0 если o1>o2,  <0 если o1 < o2.
                           Можно не указывать при использовании .setCompareFun(compareFun)

      - isSorted() : Bool  - Возвращает true, если список отсортирован


      class ListItr(list : LinkedList, index) - Класс итератора.
                     list  - связный список по которому необходмо пройтись
                     index - индекс стартового элемента
         Методы
         - hasnext() : Bool - возвращает true если есть элемент для выдачи
         - hasprev() : Bool - возвращает true если есть предыдущий элемент
         - next() : Variant - возвращает следующий элемент
         - previous() : Variant - возвращает предыдущий элемент
         - get() - возвращает текущий элемент
         - getNode() : Node - возвращает Node текущего элемента
         - add(el : Variant)- добавляет элемент после текущего
         - addE(el : Variant) : Node - добавляет элемент после текущего и возвращает его Node
         - set(el : Variant) - изменяет значение текущего элемента
         - remove() - удаляет текущий элемент из списка, не позиционируется на следующий.
         - clear()  - реинициализирует итератор.
         - refresh()- актуализирует следующий шаг после ручного удаления, добавления и пр.
         - toPos(index : Integer) - перемещается к элементу с индексом Index
         - moveNext()

   Глобальные процедуры:
   ListOf(..) - возвращает LinkedList заполненный параметрами через запятую
      */

import "..\\Mac\\Extra\\Collections\\Iterable.mac";

Private Class Node(p: @Node, el: Variant, n : @Node)
   var e = el;
   var prv = p;
   var nxt = n;

   Macro toString() : String
      return String(e);
   end;
End;

//Класс Итератор принимает лист, и начальный индекс откуда начнем бежать
Class (BaseIterator) ListItr(LList, _ind)
   var LL : Object = LList;
   var llsize = LL.size;
   var LastReturned           = null;
   var nextNode               = null;
   var nextIndex  : Integer   = 0;

   if(ValType(_ind)==V_UNDEF)
      _ind = 0;
   end;
   if(_ind == LL.size)
      nextNode = null;
   else
      nextNode = LL.nodeByInd(_ind);
   end;
   nextIndex = _ind;
   //-------------------------------------------

   Macro getLastReturned()
      return LastReturned;
   End;

   Macro getNextIndex()
      return nextIndex;
   End;

   Macro clear()
      nextIndex = 0;
      LastReturned = null;
      nextNode = LL.nodeByInd(0);
   end;

   Macro refresh()
      if(ValType(LastReturned) == V_UNDEF) return; end;
      nextNode = LastReturned.nxt;
   End;

   Macro hasNext() : Bool
      return (nextIndex < ll.Size);
   End;

   Macro hasPrev() : Bool
      return (nextIndex > 0);
   End;

   Macro next() : Variant
      if(not(hasNext)) return; end;
      LastReturned = nextNode;
      nextNode = nextNode.nxt;
      nextIndex = nextIndex + 1;
      return LastReturned.e;
   End;

   Macro previous() : Variant
      if(not(hasPrev)) return; end;

      if(Valtype(nextNode)==V_UNDEF)
         nextNode = ll.last;
         LastReturned = nextNode;
      else
         nextNode = nextNode.prv;
         LastReturned = nextNode;
      end;
      nextIndex = nextIndex - 1;
      return LastReturned.e;
   End;

   Macro getNode() : Node
      return LastReturned;
   End;

   Macro get() : Variant
      if(ValType(LastReturned)==V_UNDEF) return null; end;
      return LastReturned.e;
   end;

   Macro addE(el : Variant) : Node
      var newNode;
      llSize = llSize + 1;
      if(ValType(nextNode) == V_UNDEF)
         newNode = LL.linkLast(el);
      else
         newNode = LL.linkBefore(el, nextNode);
      end;
      refresh();
      return newNode;
   End;

   Macro add(el : Variant)
      addE(el);
   End;

   Macro addBefore(el : Variant)
      LL.linkBefore(el, LastReturned);
      nextIndex = nextIndex + 1;
   End;

   Macro set(el : Variant)
      if(Valtype(LastReturned) == V_UNDEF) return null; end;
      LastReturned.e = el;
   End;

   Macro remove()
      if(ValType(LastReturned) == V_UNDEF) return null; end;
      var lastNext = LastReturned.nxt;
      LL.unlink(LastReturned);
      if(nextNode == LastReturned)
         nextNode = lastNext;
      else
         nextIndex = nextIndex -1;
      end;
      llSize = llsize - 1;
      LastReturned = null;
   End;

   Macro moveNext(ind : Integer)
      var i = 0;
      while (nextIndex < ind)
         nextNode = nextNode.nxt;
         nextIndex = nextIndex + 1;
      end;
      LastReturned = nextNode.prv;
   End;

   Macro toPos(ind : Integer)
      var i = 0;
      clear();
      while (nextIndex < ind)
         nextNode = nextNode.nxt;
         nextIndex = nextIndex + 1;
      end;
      LastReturned = nextNode.prv;
   End;


   Macro toString() : String
      var i;
      var pr = 0;
      var curN = getLastReturned();
      var prN;
      var s = "{";
      var visArr = TArray();
      if(ValType(curN) == V_UNDEF)
         return s;
      end;
      if(getNextIndex() > nvis)
         visArr[visArr.size] = ".. ";
      end;

      for(i,1,nvis)
         prN = curN.prv;
         pr = pr + 1;
         if(ValType(prN) == V_UNDEF)
            pr = pr - 1;
            break;
         end;
         curN = prN;
      end;
      for(i,1,pr,1)
         visArr[visArr.size] = String(curN);
         curN = curN.nxt;
      end;
      visArr[visArr.size] = "[" + String(curN) + "]";
      curN = curN.nxt;
      for(i,1,nvis)
         if(ValType(curN)!=V_UNDEF)
            visArr[visArr.size] = String(curN);
            curN = curN.nxt;
         else
            break;
         end;
      end;
      if(Valtype(curN) != V_UNDEF)
         visArr[visArr.size] = "..";
      end;

      for(i,0,visArr.size-2)
         s = s + visArr[i] + ";";
      end;
      s = s + visArr[visArr.size-1] + "}";
      return s;
   End;

   Macro Destructor()
      LastReturned = null;
      nextNode = null;
      LL = null;
   End;
End;

//Обратный итератор (бежит с хвоста в голову)
Class (ListItr) DescendingIterator(LList)
   //var itr = ListItr(LList,LList.size);
   initListItr(LList, LList.size);
   Macro hasNext() : Bool
      return hasPrev();
   End;

   Macro next() : Variant
      return previous();
   End;

   Macro clear()
      LastReturned = null;
      nextNode = null;
      nextIndex = LL.size;
   End;

   Macro toString() : String
      return ("<-" + ListItr.toString());
   End;
End;

//-------------------------------------------------
Private Const SORT_FRAGMENT_SIZE : Integer = 10000;  // Размер фрагмента для сортировки в массиве
/**
   Классическая реализация двусвязного списка. Имеет методы для использования как стэк и очередь.
*/
Class (BaseList) LinkedList()
   initBaseList();
   size = 0;
   var first: Node;
   var last : Node;
   //var iter : ListItr = ListItr(this);
   compareRef = @CF_CompareObjFromInner;

   Macro checkPosInd(ind : Integer) : Bool
      if(ValType(ind) == V_UNDEF) return false; end;
      return ((ind>=0) and (ind<size))
   End;

   Macro nodeByInd(ind : Integer) : Node
      var x : Node;
      var val;
      var i;
      if (ind <= (size/2))
         x = first;
         i = 0;
         while(i < ind)
            x = x.nxt;
            i = i + 1;
         end;
      else
         x = last;
         i = size - 1;
         while(i > ind)
            x = x.prv;
            i = i - 1;
         end;
      end;
      return x;
   End;

   Macro linkLast(el : Variant) : Node
      var l : Node= last;
      var newNode = Node(l, el, null);
      last = newNode;
      if(ValType(l) == V_UNDEF)
         first = newNode;
      else
         l.nxt = newNode;
      end;
      size = size + 1;
      return newNode;
   End;

   Macro linkFirst(el : Variant) : Node
      var f : Node = first;
      var newNode = Node(null, el, f);
      first = newNode;
      if(ValType(f) == V_UNDEF)
         last = newNode;
      else
         f.prv = newNode;
      end;
      size = size + 1;
      return newNode;
   End;

   Macro linkBefore(el: Variant, nd : Node) : Node
      var pred : Node = nd.prv;
      var newNode : Node = Node(pred, el, nd);
      nd.prv = newNode;
      if(ValType(pred) == V_UNDEF)
         first = newNode;
      else
         pred.nxt = newNode
      end;
      size = size + 1;
      return newNode;
   End;

   Macro linkAfter(el: Variant, nd : Node) : Node
      var after : Node = nd.nxt;
      var newNode: Node = Node(nd, el, after);
      nd.nxt = newNode;
      if(ValType(after) == V_UNDEF)
         last = newNode;
      else
         after.prv = newNode;
      end;
      size = size + 1;
      return newNode;
   End;

   Macro unlink(x : Node) : Variant
      var el = x.e;
      var n : Node = x.nxt;
      var p : Node = x.prv;
      if(ValType(p) == V_UNDEF)
         first = n;
      else
         p.nxt = n;
         x.prv = null;
      end;

      if(ValType(n) == V_UNDEF)
         last = p;
      else
         n.prv = p;
         x.nxt = null;
      end;
      size = size - 1;
      x.e = null;
      return el;
   End;

   Macro unlinkFirst(f : Node) : Variant
      var el = f.e;
      var n : Node = f.nxt;
      f.e = null;
      f.nxt = null;
      first = n;
      if(ValType(n) == V_UNDEF)
         last = null;
      else
         n.prv = null;
      end;
      size = size - 1;
      return el;
   End;

   Macro unlinkLast(l : Node) : Variant
      var el = l.e;
      var p : Node = l.prv;
      l.e = null;
      l.prv = null;
      last = p;
      if(ValType(p) == V_UNDEF)
         first = null;
      else
         p.nxt = null;
      end;
      size = size - 1;
      return el;
   End;

   Macro addFirst(el : Variant) : Node
      return linkFirst(el)
   End;

   Macro addLast(el : Variant) : Node
      return linkLast(el);
   End;

   Macro addE(el : Variant, ind : Integer) : Node
      if(ValType(ind) == V_UNDEF)
         return linkLast(el);
      end;
      if(Not(checkPosInd(ind)))
         return null;
      end;
      if(ind == (size-1))
         return linkLast(el);
      else
         return linkBefore(el,nodeByInd(ind));
      end;
   End;

   Macro add(el : Variant, ind : Integer) : Bool
      addE(el, ind);
      return true;
   End;

   Macro append(el : Variant) : Bool
      linkLast(el);
      return true;
      OnError
         return false;
   End;

   Macro getE(ind : Integer) : Node
      if(checkPosInd(ind))
         return nodeByInd(ind);
      end;
   End;

   Macro get(ind : Integer) : Variant
      var n = getE(ind);
      if(ValType(n) != V_UNDEF)
         return n.e;
      end;
   End;

   Macro set(ind : Integer, el : Variant) : Variant
      if(not(checkPosInd(ind))) return null; end;
      var x : Node = nodeByInd(ind);
      var oldVal = x.e;
      x.e = el;
      return oldVal;
   End;

   Macro getFirst() : Variant
      var f = first;
      if(ValType(f) == V_UNDEF) return null; end;
      return f.e;
   End;

   Macro getLast() : Variant
      var l = last;
      if(ValType(l) == V_UNDEF) return null; end;
      return l.e;
   End;

   Macro removeFirst() : Variant
      var f = first;
      if(ValType(f) == V_UNDEF) return null; end;
      return unlinkFirst(f);
   End;

   Macro removeLast() : Variant
      var l = last;
      if(ValType(l) == V_UNDEF) return null; end;
      return unlinkLast(l);
   End;

   Macro removeNode(nd : Node) : Variant
      if(ValType(nd) == V_UNDEF) return null; end;
      return unlink(nd);
   End;

   Macro remove(ind) : Variant
      var nd = getE(ind);
      if(ValType(nd) == V_UNDEF) return null; end;
      return unlink(nd);
   End;

   Macro indexOf(v : Variant) : Integer
      var ind = 0;
      var x = first;
      if(ValType(v) == V_UNDEF)   // Если нужно найти Null
         while(Valtype(x) != V_UNDEF)
            if(Valtype(x.e) == V_UNDEF)
               return ind;
            end;
            x = x.nxt;
            ind = ind + 1;
         end;
      else
         while(ValType(x) != V_UNDEF)
            if(isEquals(v, x.e))
               return ind;
            end;
            x = x.nxt;
            ind = ind + 1;
         end;
      end;
      return -1;
   End;

   Macro lastIndexOf(v : Variant) : Integer
      var ind = size;
      var x = last;
      if(ValType(v) == V_UNDEF)   // Если нужно найти Null
         while(ValType(x)!=V_UNDEF)
            ind = ind - 1;
            if(Valtype(x.e)==V_UNDEF)
               return ind;
            end;
            x = x.prv;
         end;
      else
         while(ValType(x) != V_UNDEF)
            ind = ind - 1;
            if(isEquals(v, x.e))
               return ind;
            end;
            x = x.prv;
         end;
      end;
      return -1;
   End;

   Macro contains(v : Variant) : Bool
      return (indexOf(v)>=0);
   End;


   // Методы Stack --------------------------------
   Macro peek() : Variant
      var f = first;
      if(ValType(f) == V_UNDEF) return null; end;
      return f.e;
   End;

   Macro poll() : Variant
      var f = first;
      if(ValType(f) == V_UNDEF) return null; end;
      return unlinkFirst(f);
   End;

   Macro push(el : Variant)
      addFirst(el);
   End;

   // ---------------------------------------------

   Macro clear()
      var x = first;
      var after;
      while(ValType(x) != V_UNDEF)     // NotNull(x)
         after = x.nxt;
         x.e = null;
         x.nxt = null;
         x.prv = null;
         x = after;
      end;
      first = null;
      last = null;
      size = 0;
      return this;
   End;

   Macro copy()
      var newList = LinkedList();
      var cur = first;
      while(ValType(cur) != V_UNDEF)
         newList.addLast(cur.e);
         cur = cur.nxt;
      end;
      return newList;
   end;

   Macro reverse()
      if(size<2) return this; end;
      var cur = first;
      while(ValType(cur) != V_UNDEF)
         var oldNext = cur.nxt;
         cur.nxt = cur.prv;
         cur.prv = oldNext;
         cur = cur.prv;
      end;
      cur   = first;
      first = last;
      last  = cur;
      return this;
   End;

   Macro getInstance()
      return Linkedlist();
   end;

   Macro newInstance()
      return LinkedList();
   End;

   Macro newIterator() : ListItr
      return ListItr(this);
   End;

   Macro newDescIterator() : DescendingIterator
      return DescendingIterator(this);
   End;

   Macro addAll(list : Iterable, ind : Integer)
      if(ValType(list) == V_UNDEF) return this; end;
      if(list.size == 0) return this; end;
      var itr = list.newIterator();
      if((ValType(ind) != V_INTEGER) or (ind == size))
         while(itr.hasnext())
            addLast(itr.next());
         end;
      else
         if(not(checkPosInd(ind)))
            return this;
            // Or Error?
         end;
         var nd = nodeByInd(ind);
         nd = linkBefore(itr.next, nd);
         while(itr.hasnext())
            nd = linkAfter(itr.next(), nd);
         end;
      end;
      return this;
   End;

   Macro addArray(arr : TArray, ind : Integer)
      if(ValType(arr) == V_UNDEF) return this; end;
      if(arr.size == 0) return this; end;
      if((ValType(ind) != V_INTEGER) or (ind == size))
         for(var el, arr)
            addLast(el);
         end;
      else
         if(not(checkPosInd(ind)))
            return this;
            // Or Error?
         end;
         var nd = nodeByInd(ind);
         nd = linkBefore(arr[0], nd);
         var i;
         for(i, 1, arr.size-1, 1)
            nd = linkAfter(arr[i], nd)
         end;
      end;
      return this;
   End;

   Macro fromList(list : Iterable)
      clear();
      addAll(list);
      return this;
   End;

   Macro fromArray(arr : TArray)
      clear();
      var i = 0;
      for(i, 0, arr.size - 1)
         addLast(arr[i]);
      end;
      return this;
   End;

   Macro toArray() : TArray
      var resArr : TArray = TArray;
      resArr[size-1] = null;        // Предварительно расширяем массив
      var inItr = newIterator();
      var i = 0;
      while(inItr.hasNext())
         resArr[i] = inItr.next();
         i = i + 1;
      end;
      return resArr;
   End;

   Macro sort(_compareFun)
      if(size <=1) return; end;
      var compareFun = _compareFun;
      if(ValType(compareFun) == V_UNDEF)
         compareFun = compareRef;
      end;
      var arr = toArray();
      ExQSort(arr, comparefun);
      clear();
      fromArray(arr);
      return this;
      OnError(err)
         if(err.code == 37)
            RunError("Не верно определена функция-компаратор для sort()", err);
         end;
   End;

   Macro Destructor()
      clear();
   End;
End;

/**
   Сортированный связный список (в каждый момент времени).
   Если порядок нужен лишь однажды, быстрее использовать LinkedList.sort()
   @param  _compareRef - опционально ссылка на метод компаратор Compare(el1,el2) : Integer, для сравнения объектов)
   Если не указан или null, то используется метод объекта  <objectClass>.CompareTo(ob : <objectClass>).
*/
Class (Linkedlist) SortedLinkedList(_compareRef)
   InitLinkedList();
   Private var dItr = newDescIterator();

   Macro newInstance()
      return SortedLinkedlist(compareRef);
   End;

 // Добавляет элемент и возвращает его Node, опционально в параметр ind возвращает позиция в списке
   Macro addE(el : Variant, ind : @Integer) : Node
      var prevEl;
      dItr.clear();
      if(ValType(el)!= V_UNDEF)
         while (ditr.hasnext())
            prevEl = ditr.next();
            if(ExecMacro2(compareRef, el, prevEl) >= 0)
               setparm(2,ditr.nextIndex+1);
               return linkAfter(el, ditr.getNode);
            end;
         end;
         setparm(2,0);
         return linkFirst(el);
      end;
   End;

   Macro add(el : Variant) : Integer
      var ind = -1;
      addE(el, ind);
      return ind;
   End;

   /*Переопределим, чтобы корректно работали методы AddAll, FromArray*/
   Macro addLast(el : Variant) : Integer
      var ind = -1;
      addE(el, ind);
      return ind;
   End;

   Macro setCompareFun(_compareFun)
      compareRef = _compareFun;
      if(isSorted == false)
         sort(compareRef);
      end;
      return this;
   End;

   if(ValType(_compareRef) != V_UNDEF)
      setCompareFun(_compareRef);
   end;
End;


Macro LListOfPrimitive()
   return LinkedList.setPrimitive();
End;

//! Приведение LinkedList к SortedLinkedList.
//! list - экземпляр объекта LinkedList
//! [_compareFun] - опционально, ссылка на функцию компаратор. По умолчанию возмет ссылку из list
//! [_reverse]    - опционально, порядок обхода list. По умолчанию - false - от меншьего индекса к большему
Macro ToSortedLinkedList(list : @LinkedList, _compareFun, _reverse : Bool) : SortedLinkedlist
   if(Not(IsEqClass("LinkedList", list)))
      return null;
   end;
   var sortedList = SortedLinkedList(_compareFun);
   var compFun = ifNull(_compareFun, list.compareRef);
   var reverse = ifNull(_reverse, false);
   list.sort(compFun);

   var inItr;
   if(reverse)
      inItr = list.newDescIterator();
   else
      inItr = list.newIterator();
   end;

   while(inItr.hasNext())
      sortedList.add(inItr.next());
   end;
   return sortedList;
End;

/** Возвращает связный список содержащий параметры `varargs`
*/
// н.р llistOf(10, 21, 32, "Hello") вернет список [10, 21, 32, "Hello"]
Macro llistOf(varargs) : LinkedList
   var ll = LinkedList();
   var p;
   var i = 0;
   var count = Parmcount();
   while(i < count)
      getParm(i, p);
      ll.addLast(p);
      i = i + 1;
   end;
   return ll;
End;

// Возвращает LinkedList примитивов из заданого дипазона.
// _from - начало диапазона
// _to   - конец диапазона
// [_step] - опционально, шаг. По умолчанию = 1
// н.р. llrange(10, 1, 2) вернет список [10, 8, 6, 4, 2]

Macro llrange(_from : Integer, _to: Integer, _step: Integer) : LinkedList
   var resList = LinkedList().setPrimitive();
   var step = abs(ifNull(_step, 1));
   if(_from > _to)
      step = -step;
   end;
   var i;
   for(i, _from, _to, step)
      resList.addLast(i);
   end;
   return resList;
End;
