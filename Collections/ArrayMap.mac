/**
   @package Collections

   Файл включает в себя реализацию интерфейса 'map' через два массива.
   В среднем медленнее чем [Collections.HashMap Hashmap], однако занимает меньше места в памяти.
   Также в качестве ключей могут выступать только примитивные типы. Отлично подходит для ситуации с небольшим количества элементов (до 1000) и редких операциях удаления, вставки.
*/

import "..\\Mac\\Extra\\Collections\\Iterable.mac";

Private Macro binarySearchMap(arr : TArray, el : Variant) : Integer
   var high = arr.size;
   var low = 0;
   var mid = 0;
   var x;
   var i = -1;
   while(low < high)
      mid = (low + high) / 2;
      x = arr[mid];
      if (el == x)
         return mid;
      elif (el < x)
         high = mid;
         i = -mid-1;
      else
         low = mid + 1;
         i = -low-1;
      end;
   end;
   return i;
End;

/**
   Реализация коллекции элементов пары ключ-значении на основе двух массивов. В среднем медленнее чем [Collections.HashMap Hashmap], однако занимает меньше места в памяти.
*/
Class (MapInterface) ArrayMap()
   size = 0;
   valueComparator = @VariantCompare;
   valueEqualsFunc = @VariantEquals;
   var keysArr = SArray();
   var valuesArr = SArray();

   Macro setKeyType(type : Integer)
      if (type == V_STRING)
         ;
      elif (type == V_INTEGER)
         ;
      elif (type == V_GENOBJ)
         return Throw(IllegalArgumentException("Объектный тип ключей не допустим."));
      else
         return Throw(IllegalArgumentException("Данный тип ключей не предусмотрен реализацией." + type));
      end;
      return this;
   End;

   Macro setValueType(type : Integer)
      if (type <= 10)
         valueComparator  = @CF_ComparePrimitive;
         valueEqualsFunc  = @CF_EqualsPrimitive;
      elif (type == V_GENOBJ)
         valueComparator = @CF_CompareToImpl;
         valueEqualsFunc = @CF_EqualsImpl;
      else
         RunError("Данный тип значений не предусмотрен реализацией." + type);
      end;
      return this;
   End;

   Macro put(key, value) : Variant
      var i = binarySearchMap(keysArr, key);
      var oldVal;
      if (i >= 0)
         oldVal = valuesArr[i];
         valuesArr[i] = value;
      else
         i = -i - 1;
         keysArr.add(key, i);
         valuesArr.add(value, i);
         size = size + 1;
      end;
      return oldVal;
   End;

   Macro get(key) : Variant
      var i = binarySearchMap(keysArr, key);
      if (i >= 0)
         return valuesArr[i];
      end;
   End;

   Macro replace(key, value) : Bool
      var i = binarySearchMap(keysArr, key);
      if (i >= 0)
         valuesArr[i] = value;
         return true;
      end;
      return false;
   End;

   Macro remove(key) : Variant
      var i = binarySearchMap(keysArr, key);
      if (i < 0) return; end;
      var remVal = valuesArr.remove(i);
      keysArr.remove(i);
      size = size - 1;
      return remVal;
   End;

   Macro containsKey(key) : Bool
      var i = binarySearchMap(keysArr, key);
      return (i >= 0);
   End;

   Macro containsValue(val)
      return valuesArr.contains(val, valueEqualsFunc);
   End;

   Macro clear()
      keysArr.clear();
      valuesArr.clear();
      size = 0;
   end;

   Macro append(p : Pair)
      put(p.key, p.value);
   End;

   Macro putAll(map) : ArrayMap
      for (var p, map)
         put(p.key, p.value);
      end;
      return this;
   End;

   Macro toArray() : SArray
      var res = SArray;
      for (var i, 0, size - 1, 1)
         res[i] = Pair(keysArr[i], valuesArr[i]);
      end;
      return res;
   End;

   Macro keys() : SArray
      return keysArr;
   End;

   Macro values() : SArray
      return valuesArr;
   End;

   Macro newIterator()
      return ExecMacro2("ArrayMapEntryIterator", this);
   End;

   Macro newEntryIterator()
      return ExecMacro2("ArrayMapEntryIterator", this);
   End;

   Macro newKeyIterator()
      return ExecMacro2("ArrayMapKeyIterator", this);
   End;

   Macro newValueIterator()
      return ExecMacro2("ArrayMapValueIterator", this);
   End;

   Macro newInstance()
      var ni = ArrayMap();
      return ni;
   End;

   Macro equals(map : ArrayMap) : Bool
      if ((ValType(map) == V_UNDEF) or (size != map.size) or (IsEqClass("ArrayMap", map) == false))
         return false;
      end;
      for (var i, 0, size-1, 1)
         if ((ExecMacro2(keyEqualsFunc, keysArr[i], map.keysArr[i]) == false) or
             (ExecMacro2(valueEqualsFunc, valuesArr[i], map.valuesArr[i])== false))
            return false;
         end;
      end;
      return true;
   End;
End;

Private Class (IteratorInterface) ArrayMapIterator(_arrayMap : ArrayMap)
   var map = _arrayMap;
   var lastReturned = null;
   var nextIndex : Integer = 0;

   Macro getLastReturned()
      return lastReturned;
   End;

   Macro hasNext()
      return (nextIndex != map.size);
   End;

   Macro hasPrev()
      return (nextIndex != 0)
   End;

   Macro next() : Pair
      lastReturned = Pair(map.keysArr[nextIndex], map.valuesArr[nextIndex]);
      nextIndex = nextIndex + 1;
      return lastReturned;
   End;

   Macro prev() : Pair
      nextIndex = nextIndex - 1;
      lastReturned = Pair(map.keysArr[nextIndex], map.valuesArr[nextIndex]);
      return lastReturned;
   End;
End;

Private Macro ArrayMapEntryIterator(map : ArrayMap)
   return ArrayMapIterator(map);
End;

Private Macro ArrayMapKeyIterator(map)
   return map.keysArr.newIterator();
End;

Private Macro ArrayMapValueIterator(map)
   return map.valuesArr.newIterator();
End;
