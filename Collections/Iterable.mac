/**
 *  @package Collections
 *  @version 1.0
 *  @author Dzhanybaev M.P.
 *
 *  Базовые классы и функции коллекций.
*/

import "..\\Mac\\Extra\\Utils\\Common.mac";      // ifNull
import "..\\Mac\\Extra\\Utils\\OOP.mac";         // Any
import "..\\Mac\\Extra\\Utils\\StringUtil.mac";  // JoinToString
import "..\\Mac\\Extra\\Utils\\SArray.mac";
import "..\\Mac\\Extra\\Utils\\CompareFunc.mac";
import "..\\Mac\\Extra\\Utils\\SortingFunc.mac";
import "..\\Mac\\Extra\\Utils\\Exceptions.mac";
import "..\\Mac\\Extra\\Lambda\\lambda.mac";

import rcw;

Class Pair(k, v)
   var key = k;
   var value = v;
   Macro toString() : String
      return "(" + key + " - " + value + ")";
   End;
End;


Private Class EmptyObj()
   Macro equals() : Bool
      return true;
   End;

   Macro compareTo() : Integer
      return 0;
   End;

   Macro hash()

   End;

   Macro toString() : String
      return "Empty";
   End;
End;

/** Нулевой объект-загулшка для HashSet*/
Const PRESENT = EmptyObj();  //

/** Видимость до и после текущего значения итератора в отладчике */
Const NVIS = 2;  //

/**
   Интерфейс базового итератора для всех коллекций,
   методы обязательны для переопределения
*/
Class BaseIterator()
   /** Возвращает следующий элемент коллекции или `null` если находится в конце списка*/
   Macro next() : Variant
   End;
   /** Возвращает `true` если имеется следующий элемент коллекции. `false`  в противном случае. */
   Macro hasNext() : Bool
   End;

   /** Возвращает предыдущий элемент коллекции или `null` если находится в начале списка*/
   Macro previous() : Variant
   End;

   /** Возвращает `true` если имеется предыдущий элемент коллекции. `false`  в противном случае. */
   Macro hasPrev() : Bool
   End;

   /** Повторно возвращает последний уже отданный элемент*/
   Macro getLastReturned() : Variant
   End;

   /** Переводит указатель итератора в начало списка */
   Macro clear()
   End;
End;

/**
   Обертка для [BaseIterator]. Позволяет перебирать элементы коллекций (наследников [Iterable]) нативным `for(e, iterable)`;
*/
Class NativeIterator(_itr : BaseIterator)
   var itr  = _itr;

   Macro next() : Bool
      if(itr.hasNext())
         itr.next;
         return true;
      end;
      return false;
   End;

   Macro item() : Variant
      return itr.getLastReturned();
   End;

   Macro toString() : String
      return String(itr);
   End;
End;

/**
   Базовый класс коллекций. Содержит описание интерфейса коллекций.
*/
Class Iterable()
   /** Размер коллекции.*/
   var size;

   /** Возвращает новый экземпляр текущего класса */
   Macro newInstance()
   End;

   /** Удаляет все элементы коллекции*/
   Macro clear()
   End;

   /** Возвращает `true`, если коллекция пуста, иначе возвращает `false`.*/
   Macro isEmpty() : Bool
      return (size == 0);
   End;

   /**
      Возвращает массив типа [Utils.SArray SArray] состоящий из элементов исходной коллекции.
   */
   Macro toArray() : SArray
   End;

   /** Дефалтное добавление (для chain - функций) */
   Macro append(baseCollectionElement)
   End;

   /** Возвращает новый итератор */
   Macro newIterator() : BaseIterator
   End;

   /** Устанавливает флаг [isPrimitive] в `true`; Возвращает себя
      @return this
   */
   Macro setPrimitive()
      return this;
   End;

   /** Возвращает строку из элементов коллекции, разделенных '_delim', начинается с '_prefix' заканчивается '_postfix'*/
   Macro join(_delim, _prefix, _postfix) : String
      var delim   = ifNull(_delim, ", ");
      var prefix  = ifNull(_prefix, "[");
      var postfix = ifNull(_postfix,"]");
      return joinToString(this, delim, prefix, postfix);
   End;

   // Chain - функции

   /** Возвращает объект того же типа коллекции с элементами подходящими под условия функции
      @param _func - ссылка на функцию - предикат вида Macro func(el : Variant) : Bool
   */
   Macro filter(_func) : Iterable
      var func = getFunOrLambda(_func);
      var result = newInstance();
      var el;
      var itr = newIterator();
      while (itr.hasNext)
         el = itr.next;
         if (ExecMacro2(func, el))
            result.append(el);
         end;
      end;
      return result;
   End;

   // Возвращает объект того же типа коллекции с элементами преобразованными функцией
   // _func - ссылка на функцию вида Macro func(el : Variant) : Variant
   Macro map(_func) : Iterable
      var func = getFunOrLambda(_func);
      var result = newInstance();
      var el, outEl;
      var itr = newIterator();
      while (itr.hasNext)
         el = itr.next;
         outEl = ExecMacro2(func, el);
         result.append(outEl);
      end;
      return result;
   End;

   // Возвращает сумму элементов коллекции (только для примитивной)
   Macro sum() : Numeric
      var sum = 0;
      var itr = newIterator();
      while (itr.hasnext())
         sum = sum + itr.next();
      end;
      return sum;
   end;

   // Возвращает сумму элементов коллекции по свойству объектов (для объектной)
   // propname - имя свойство объекта
   Macro sumByProp(_propName) : Numeric
      var sum : Numeric = 0;
      var itr = newIterator();
      var v,p;
      while (itr.hasnext())
         v = itr.next();
         p = GenGetProp(v, _propName);
         sum = sum + p;
      end;
      return sum;
   End;

   // Возвращает сумму элементов коллекции(для объектной и примитивной)
   // _func - ссылка на функцию - преобразователь вида Macro func(el : Variant) : Numeric
   Macro sumBy(_func)
      var func = getFunOrLambda(_func);
      var sum : Numeric = 0;
      var itr = newIterator();
      var p;
      while (itr.hasnext())
         p = ExecMacro2(func, itr.next());
         sum = sum + p;
      end;
      return sum;
   End;

   /** Возвращает максимальное значение коллекции.
      oparam _func = @CF_ComparePrimitive ссылка на функцию компаратор.
   */
   Macro max(_func) : Variant
      var func = _func;
      if(ValType(func) == V_UNDEF)
         func = @CF_ComparePrimitive;
      end;
      var v;
      var itr = newIterator();
      var maxV = itr.next();
      while(itr.hasNext())
         v = itr.next();
         if(ExecMacro2(func, v, maxV) > 0)
            maxV = v;
         end;
      end;
      return maxV;
   End;

   /** Возвращает максимальное значение объекта в порядке величины его полей заданных как String [varargs]*/
   Macro maxByProp(varargs) : Variant
      var pc = ParmCount();
      var i,p;
      var parmArr = TArray;
      for(i, 1, pc - 1,1)
         GetParm(i,p);
         parmArr[parmArr.size] = p;
      end;
      var comparator = CF_ObjectComparator(parmArr);
      var func = R2M(comparator, "compare");
      return this.max(func);
   End;

   /** Возвращает минимальное значение коллекции.
      oparam _func = @CF_ComparePrimitive ссылка на функцию компаратор.
   */
   Macro min(_func) : Variant
      var func = _func;
      if(ValType(func) == V_UNDEF)
         func = @CF_ComparePrimitive;
      end;
      var itr = newIterator();
      var v;
      var minV = itr.next();
      while(itr.hasNext())
         v = itr.next();
         if(ExecMacro2(func, v, minV) < 0)
            minV = v;
         end;
      end;
      return minV;
   End;

   /** Возвращает минимальное значение объекта в порядке величины его полей заданных как String [varargs]*/
   Macro minByProp(varargs) : Variant
      var pc = ParmCount();
      var i,p;
      var parmArr = TArray;
      for(i, 1, pc - 1,1)
         GetParm(i,p);
         parmArr[parmArr.size] = p;
      end;
      var comparator = CF_ObjectComparator(parmArr);
      var func = R2M(comparator, "compare");
      return this.min(func);
   End;


   Macro toStr() : String
      return join();
   End;

   /** Выводит коллекцию на экран с переносом строк*/
   Macro toScreen()
      joinToPrint(this, "\n","[\n", "\n]");
   End;
   /** Выводит коллекцию на экран без переноса строк*/
   Macro toScreen2()
      joinToPrint(this,", ", "[", "]");
   End;

   // Метод для возможности перечисления нативным for(el, collection)
   Macro createEnum()
      return NativeIterator(newIterator());
   End;

End;

/**
   Базовый интерфейс для списков.

   @see [Collection.ArrayList]
   @see [Collection.LinkedList]
*/
Class (Iterable) ListInterface()

   /* Ссылка на функцию компаратор. */
   private var comparator ;
   /* Ссылка на функцию equals. */
   private var equalsfunc ;

   /**
      Устанавливает необходимые для работы с примитивными типами 'comparator' и 'equalsFunc' и возвращает текущий экземпляр списка.
   */
   Macro setPrimitive() : ListInterface
   End;

   Macro setComparator(_comparator) : ListInterface
      comparator = _comparator;
      return this;
   End;

   Macro setEqualsFunc(equalsfun) : ListInterface
      equalsfunc = equalsfun;
      return this;
   End;
   /**
      Добавляет 'element' в список на позицию 'ind'. Если 'ind' не указан или равен `null`, добавляет элемент в конец списка.
   */
   Macro add(element : Variant, ind : Integer)
   End;

   /**
      Добавляет 'element' в начало списка.
   */
   Macro addFirst(element : Variant)
   End;

   /**
      Добавляет 'element' в конец списка.
   */
   Macro addLast(element : Variant)
   End;

   /**
      Добавляет все элементы 'enumerable' в конец списка.
   */
   Macro addAll(enumerable)
   End;

   /**
      Возвращает элемент под индексом 'ind'.
   */
   Macro get(ind : Integer) : Variant
   End;

   /**
      Возвращает первый элемент списка.
   */
   Macro getFirst() : Variant
   End;

   /**
      Возвращает последний элемент списка.
   */
   Macro getLast() : Variant
   End;

   /**
      Устанавливает новое значение 'newValue' элементу под индексом 'ind' и возвращает заменяемое значение.
   */
   Macro set(newValue : Variant, ind : Integer) : Variant
   End;

   /**
      Удаляет и возвращает значение под индексом 'ind'.
   */
   Macro remove(ind : Integer) : Variant
   End;

   /**
      Возвращает индекс первого элемента равного 'element' согласно функции 'equalFunc'. Если функция не указана сравнение происходит через '=='.
   */
   Macro indexOf(element, equalFunc)
   End;

   /**
      Возвращает индекс последнего элемента равного 'element' согласно функции 'equalFunc'. Если функция не указана сравнение происходит через '=='.
   */
   Macro lastIndexOf(element, equalFunc)
   End;

   /**
      Возвращает `true`, если коллекция содержит элемент равный 'element' согласно функции 'equalFunc'. Если функция не указана сравнение происходит через '=='.
   */
   Macro contains(element, equalFunc) : Bool
   End;

   /**
      Возвращает `true`, если коллекция отсортирована согласно функции-компаратору 'compareFunc'.
   */
   Macro isSorted(compareFunc) : Bool
   End;

   /**
      Сортирует исходный список согласно функции-компаратору 'compareFunc' и возвращает ссылку на него.
   */
   Macro sort(compareFunc) : ListInterface
   End;

   /**
      Разворачивает исходный список и возращает ссылку на него.
   */
   Macro reverse() : ListInterface
   End;

   /**
      Возвращает массив типа [Utils.SArray SArray] состоящий из элементов исходного списка.
   */
   Macro toArray() : SArray
   End;
End;

/**
   Базовый интерфейс для коллекций пар "ключ-значение".

   @see [Collection.HashMap]
   @see [Collection.TreeMap]
   @see [Collection.ArrayMap]
*/
Class (Iterable) MapInterface()

   private var keyEqualsFunc;
   private var keyComparator;
   private var valueEqualsFunc;
   private var valueComparator;

   /**
      Устанавливает тип ключа 'type' из языка RSL.
   */
   Macro setKeyType(type : Integer) : MapInterface
   End;

   /**
      Устанавливает тип значений 'type' из языка RSL.
   */
   Macro setValueType(type : Integer) : MapInterface
   End;

   /**
      Помещает в коллекцию ключ 'key' и соответсвующее ему значение 'value', если такой ключ уже присутствует, значение меняется, а заменяемое значение возвращается.
   */
   Macro put(key, value : Variant) : Variant
   End;

   /**
      Помещает в коллекцию все пары "ключ-значение" из 'map'.
   */
   Macro putMapEntries(map : MapInterface)
   End;

   /**
      Возвращает значение соответствующее ключу 'key', если такого ключа не найдено возвращает `null`.
   */
   Macro get(key) : Variant
   End;

   /**
      Заменяет значение соответствующее ключу 'key' на 'newValue' и возвращает `true`, если ключа не найдено возвращает `false`, при этом добавление нового элемента не происходит.
   */
   Macro replace(key, newValue : Variant) : Bool
   End;

   /**
      Удаляет и коллекции пару с ключем 'key' и возвращает удаляемое значение.
   */
   Macro remove(key) : Variant
   End;

   /**
      Возвращает `true`, если коллекция содержит пару с ключем 'key'.
   */
   Macro containsKey(key) : Bool
   End;

   /**
      Возвращает `true`, если коллекция содержит пару со значением равным 'value' согласно функции 'equalFunc'. Если функция не указана сравнение происходит через '=='.
   */
   Macro containsValue(value, equalFunc) : Bool
   End;

   /**
      Возвращает массив [Utils.SArray SArray] состоящий из ключей исходной коллекции.
   */
   Macro keys() : SArray
   End;

   /**
      Возвращает массив [Utils.SArray SArray] состоящий из значений исходной коллекции.
   */
   Macro values() : SArray
   End;

   /**
      Возвращает новый итератор пар.
   */
   Macro newEntryIterator()
   End;

   /**
      Возвращает новый итератор ключей.
   */
   Macro newKeyIterator()
   End;

   /**
      Возвращает новый итератор значений.
   */
   Macro newValueIterator()
   End;

   Macro newIterator()
      return newEntryIterator();
   End;
End;

/**
   Базовый интерфейс для коллекций уникальных значений.

   @see [Collection.HashSet]
   @see [Collection.TreeSet]
*/
Class (Iterable) SetInterface()

   /**
      Добавляет 'element' в сэт и возвразает `true`, если элемент добавляется впервые.
   */
   Macro add(element) : Bool
   End;

   /**
      Ищет и удаляет 'element', возвращает `true`, если элемент был найден и удален.
   */
   Macro remove(element) : Bool
   End;

   /**
      Ищет и удаляет все элементы иходного массива которые содержаться в 'enumerable', который может являться списком или массивом.
   */
   Macro removeAll(enumerable) : Bool
   End;

   /**
      Возвращает `true`, если коллекция содержит элемент равный 'element'.
   */
   Macro contains(element) : Bool
   End;

   /**
      Возвращает `true`, если коллекция содержит все элементы из 'enumerable'.
   */
   Macro containsAll(enumerable) : Bool
   End;


End;

/**
   Базовый класс для итераторов списка.
   @param iList объект списка
   @oparam ind = 0 начальный индекс
*/
Class (BaseIterator) ListIterator(ilist : ListInterface, ind : Integer)
   var list = ilist;
   var curIndex  : Integer = -1;
   var nextIndex : Integer = 0;
   var lastReturned;

   if(ValType(ind)==V_UNDEF)
      ind = 0;
   end;

   nextIndex = ind;

   Macro getLastReturned()
      return lastReturned;
   End;

   Macro getNextIndex()
      return nextIndex;
   End;

   Macro clear()
      nextIndex = 0;
      lastReturned = null;
   End;

   Macro hasNext() : Bool
      return (nextIndex < list.size);
   End;

   Macro hasPrev()
      return (nextIndex>0);
   End;

   Macro next() : Variant
      lastReturned = list.get(nextIndex);
      curIndex = nextIndex;
      nextIndex = nextIndex + 1;
      return lastReturned;
   End;

   Macro previous() : Variant
      if (not(hasPrev))
         return;
      end;
      nextIndex = nextIndex - 1;
      curIndex = nextIndex;
      lastReturned = list.get(nextIndex);
      return lastReturned;
   End;

   Macro toPos(ind : Integer)
      if ((ind<0) or (ind>list.size-1)) return; end;
      curIndex = ind;
      nextIndex = ind + 1;
   End;
End;


/** Возвращает иммутабельный список [ImmutableList] из элементов 'varargs' */
/*
Macro listOf(varargs)
   var arr = TArray();
   var p;
   var i = 0;
   var count = Parmcount();
   while(i < count)
      getParm(i, p);
      arr[i] = p;
      i = i + 1;
   end;
   return ImmutableList.fromArray(arr);
End;
*/
/**
   Возвращает иммутабельный список [ImmutableList] элементов 'Integer'
   начиная с 'from' заканчивая 'to' с шагом 'step'.
   @param from начало диапозона
   @param to   конец диапозона
   @oparam step = 1 шаг
*/
/*
Macro range(from : Integer, to: Integer, step: Integer) : ImmutableList
   var arr = TArray();
   var istep = ifNull(step, 1);
   if(from>to)
      istep = -istep;
   end;
   var i;
   for(i,from,to,istep)
      arr[arr.size] = i;
   end;
   return ImmutableList.fromArray(arr);
End;

*/
