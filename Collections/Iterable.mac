/**
 *  @package Collections
 *  @version 1.0
 *  @author Dzhanybaev M.P.
 *
 *  Базовые классы и функции коллекций.
*/

import "..\\Mac\\Extra\\Utils\\Common.mac";      // ifNull
import "..\\Mac\\Extra\\OOP\\OOP.mac";           // Any
import "..\\Mac\\Extra\\Utils\\StringUtils.mac";  // StringJoiner
import "..\\Mac\\Extra\\Utils\\SArray.mac";
import "..\\Mac\\Extra\\Utils\\Comparators.mac";
import "..\\Mac\\Extra\\Utils\\SortingFunc.mac";
import "..\\Mac\\Extra\\Utils\\Exceptions.mac";
import "..\\Mac\\Extra\\Lambda\\lambda.mac";

import rcw;

Class Pair(k, v)
   var key = k;
   var value = v;
   Macro toString() : String
      return "(" + key + " - " + value + ")";
   End;
End;


Private Class EmptyObj()
   Macro equals() : Bool
      return true;
   End;

   Macro compareTo() : Integer
      return 0;
   End;

   Macro hash()
      return 0;
   End;

   Macro toString() : String
      return "Empty";
   End;
End;

/** Нулевой объект-загулшка для HashSet*/
Const PRESENT = EmptyObj();  //

/** Видимость до и после текущего значения итератора в отладчике */
Const NVIS = 2;  //

/**
   Интерфейс базового итератора для всех коллекций,
   методы обязательны для переопределения
*/
Class IteratorInterface(collectionInstance)

   /** Возвращает следующий элемент коллекции или `null` если находится в конце списка*/
   Macro next() : Variant
   End;
   /** Возвращает `true` если имеется следующий элемент коллекции. `false`  в противном случае. */
   Macro hasNext() : Bool
   End;

   /** Возвращает предыдущий элемент коллекции или `null` если находится в начале списка*/
   Macro previous() : Variant
   End;

   /** Возвращает `true` если имеется предыдущий элемент коллекции. `false`  в противном случае. */
   Macro hasPrev() : Bool
   End;

   /** Повторно возвращает последний уже отданный элемент. */
   Macro getLastReturned() : Variant
   End;

   /** Переводит указатель итератора в начало списка. */
   Macro clear()
   End;
End;

Class DescendingIterator(collectionInstance, ind : Integer)
   private var inst = collectionInstance;
   private var itr = null;

   if (ValType(ind) == V_UNDEF)
      ind = 0;
   elif (ValType(ind) != V_INTEGER)
      Throw(IllegalArgumentException());
   elif ((ind < 0) or (ind > inst.size))
      Throw(IndexOutOfBoundsException());
   end;
   itr = inst.newIterator(inst.size-ind);

   Macro hasNext() : Bool
      return itr.hasPrev();
   End;

   Macro next() : Variant
      return itr.prev();
   End;

   Macro hasPrev() : Bool
      return itr.hasNext();
   End;

   Macro prev() : Variant
      return itr.next();
   End;

   Macro nextIndex() : Integer
      return itr.nextIndex - 1;
   End;

   Macro clear()
      itr.toPos(inst.size);
   End;

   Macro toString() : String
      return ("<-" + itr.toString());
   End;
End;

/**
   Обертка для [IteratorInterface]. Позволяет перебирать элементы коллекций (наследников [Iterable]) нативным `for(e, iterable)`;
*/
Class NativeIterator(_itr : IteratorInterface)
   var itr  = _itr;

   Macro next() : Bool
      if(itr.hasNext())
         itr.next;
         return true;
      end;
      return false;
   End;

   Macro item() : Variant
      return itr.getLastReturned();
   End;

   Macro toString() : String
      return String(itr);
   End;
End;

private var StrJoiner   = StringJoiner(", ", "[", "]");
private var StrJoinerML = StringJoiner("\n","[\n", "\n]");
/**
   Базовый класс коллекций. Содержит описание интерфейса коллекций.
*/
Class Iterable()
   /** Размер коллекции.*/
   var size;

   /** Возвращает новый экземпляр текущей коллекции */
   Macro newInstance()
   End;

   /** Удаляет все элементы коллекции*/
   Macro clear()
   End;

   /** Возвращает `true`, если коллекция пуста, иначе возвращает `false`.*/
   Macro isEmpty() : Bool
      return (size == 0);
   End;

   /**
      Возвращает массив типа [Utils.SArray SArray] состоящий из элементов исходной коллекции.
   */
   Macro toArray() : SArray
   End;

   /** Дефалтное добавление (для chain - функций) */
   Macro append(baseCollectionElement)
   End;


   /** Возвращает новый итератор начинающий с позиции 'ind'. Если 'ind' не задан или равен `null` итератор пойдет с начала коллекции. */
   Macro newIterator(ind) : IteratorInterface
   End;

   /**
      Возвращает копию исходной коллекции. Каждый базовый элемент передается 'copyFunction', которая возвращает копию элемента.Если 'copyFunction' не задана - объекты копируются по ссылке, примитивы по значению.
   */
   Macro copy(copyFunction) : Iterable
      var newCl = newInstance();
      var itr = newIterator;
      if (ValType(copyFunction) == V_UNDEF)
         while (itr.hasnext)
            newCl.append(itr.next);
         end;
      else
         while (itr.hasnext)
            newCl.append(ExecMacro2(copyFunction, itr.next));
         end;
      end;
      return newCl;
   End;

   // Chain - функции

   /** Возвращает объект того же типа коллекции с элементами подходящими под условия функции
      @param _func - ссылка на функцию - предикат вида Macro func(el : Variant) : Bool
   */
   Macro filter(_func) : Iterable
      var func = getFunOrLambda(_func);
      var result = newInstance();
      var el;
      var itr = newIterator();
      while (itr.hasNext)
         el = itr.next;
         if (ExecMacro2(func, el))
            result.append(el);
         end;
      end;
      return result;
   End;

   // Возвращает объект того же типа коллекции с элементами преобразованными функцией
   // _func - ссылка на функцию вида Macro func(el : Variant) : Variant
   Macro map(_func) : Iterable
      var func = getFunOrLambda(_func);
      var result = newInstance();
      var el, outEl;
      var itr = newIterator();
      while (itr.hasNext)
         el = itr.next;
         outEl = ExecMacro2(func, el);
         result.append(outEl);
      end;
      return result;
   End;

   // Возвращает сумму элементов коллекции (только для примитивной)
   Macro sum() : Numeric
      var sum = 0;
      var itr = newIterator();
      while (itr.hasnext())
         sum = sum + itr.next();
      end;
      return sum;
   end;

   // Возвращает сумму элементов коллекции по свойству объектов (для объектной)
   // propname - имя свойство объекта
   Macro sumByProp(_propName) : Numeric
      var sum : Numeric = 0;
      var itr = newIterator();
      var v,p;
      while (itr.hasnext())
         v = itr.next();
         p = GenGetProp(v, _propName);
         sum = sum + p;
      end;
      return sum;
   End;

   // Возвращает сумму элементов коллекции(для объектной и примитивной)
   // _func - ссылка на функцию - преобразователь вида Macro func(el : Variant) : Numeric
   Macro sumBy(_func)
      var func = getFunOrLambda(_func);
      var sum : Numeric = 0;
      var itr = newIterator();
      var p;
      while (itr.hasnext())
         p = ExecMacro2(func, itr.next());
         sum = sum + p;
      end;
      return sum;
   End;

   /** Возвращает максимальное значение коллекции.
      oparam _func = @CF_ComparePrimitive ссылка на функцию компаратор.
   */
   Macro max(func) : Variant
      if(ValType(func) == V_UNDEF)
         func = @CF_ComparePrimitive;
      end;
      var v;
      var itr = newIterator();
      var maxV = itr.next();
      while(itr.hasNext())
         v = itr.next();
         if(ExecMacro2(func, v, maxV) > 0)
            maxV = v;
         end;
      end;
      return maxV;
   End;

   /** Возвращает максимальное значение объекта в порядке величины его полей заданных как String [varargs]*/
   Macro maxByProp(varargs) : Variant
      var pc = ParmCount();
      var i,p;
      var parmArr = TArray;
      for(i, 1, pc - 1,1)
         GetParm(i,p);
         parmArr[parmArr.size] = p;
      end;
      var comparator = CF_ObjectComparator(parmArr);
      var func = R2M(comparator, "compare");
      return this.max(func);
   End;

   /** Возвращает минимальное значение коллекции.
      oparam _func = @CF_ComparePrimitive ссылка на функцию компаратор.
   */
   Macro min(_func) : Variant
      var func = _func;
      if(ValType(func) == V_UNDEF)
         func = @CF_ComparePrimitive;
      end;
      var itr = newIterator();
      var v;
      var minV = itr.next();
      while(itr.hasNext())
         v = itr.next();
         if(ExecMacro2(func, v, minV) < 0)
            minV = v;
         end;
      end;
      return minV;
   End;

   /** Возвращает минимальное значение объекта в порядке величины его полей заданных как String [varargs]*/
   Macro minByProp(varargs) : Variant
      var pc = ParmCount();
      var i,p;
      var parmArr = TArray;
      for(i, 1, pc - 1,1)
         GetParm(i,p);
         parmArr[parmArr.size] = p;
      end;
      var comparator = CF_ObjectComparator(parmArr);
      var func = R2M(comparator, "compare");
      return this.min(func);
   End;

   /** Возвращает строку из элементов коллекции, разделенных '_delim', начинается с '_prefix' заканчивается '_postfix'*/
   Macro join(_delim, _prefix, _postfix) : String
      var delim   = ifNull(_delim, ", ");
      var prefix  = ifNull(_prefix, "[");
      var postfix = ifNull(_postfix,"]");
      return StringJoiner(delim, prefix, postfix).joinToString(this);
   End;

   Macro toStr() : String
      return join();
   End;

   /** Выводит коллекцию на экран без переноса строк*/
   Macro toScreen()
      StrJoiner.joinToPrint(this);
   End;

   /** Выводит коллекцию на экран с переносом строк*/
   Macro toScreen2()
      StrJoinerML.joinToPrint(this);
   End;

   Macro hash() : Integer
      var h = 1;
      for (var el, this)
         h = h*17 + VariantHashCode(el);
      end;
      return abs(h);
   End;

   Macro equals(otherIterable) : Bool
      // Inherited implementation
   End;

   // Метод для возможности перечисления нативным for(el, collection)
   Macro createEnum()
      return NativeIterator(newIterator());
   End;



End;

/**
   Базовый интерфейс для списков.

   @see [Collection.ArrayList]
   @see [Collection.LinkedList]
*/
Class (Iterable) ListInterface()

   /** Ссылка на функцию компаратор. */
   private var comparator ;
   /** Ссылка на функцию проверки на равенство. */
   private var equalsfunc ;

   /**
      Устанавливает необходимые для работы с примитивными типами 'comparator' и 'equalsFunc' и возвращает текущий экземпляр списка.
   */
   Macro setType(type) : ListInterface
      if ((type > V_UNDEF) and (type < V_TIME))
         comparator = @CF_ComparePrimitive;
         equalsfunc = @CF_EqualsPrimitive;
      elif (type == V_GENOBJ)
         comparator = @CF_CompareToImpl;
         equalsfunc = @CF_EqualsImpl;
      else
         return Throw(IllegalArgumentException("Данный тип не предусмотрен реализацией." + type));
      end;
      return this;
   End;

   /**
      Устанавливает функцию-компаратор 'comparefun' и возвращает текущий список.
   */
   Macro setComparator(comparefun) : ListInterface
      comparator = comparefun;
      return this;
   End;

   /**
      Устанавливает функцию м 'equalsfun' и возвращает текущий список.
   */
   Macro setEqualsFunc(equalsfun) : ListInterface
      equalsfunc = equalsfun;
      return this;
   End;
   /**
      Добавляет 'element' в список на позицию 'ind'. Если 'ind' не указан или равен `null`, добавляет элемент в конец списка.
   */
   Macro add(element : Variant, ind : Integer)
   End;

   /**
      Добавляет все аргументы в конец списка и возвращает текущий экземпляр.
   */
   Macro addItems(varargs )
   End;


   /**
      Добавляет 'element' в начало списка.
   */
   Macro addFirst(element : Variant)
   End;

   /**
      Добавляет 'element' в конец списка.
   */
   Macro addLast(element : Variant)
   End;

   /**
      Добавляет все элементы 'enumerable' в конец списка.
   */
   Macro addAll(enumerable, ind : Integer)
   End;

   /**
      Возвращает элемент под индексом 'ind'.
   */
   Macro get(ind : Integer) : Variant
   End;

   /**
      Возвращает первый элемент списка.
   */
   Macro getFirst() : Variant
   End;

   /**
      Возвращает последний элемент списка.
   */
   Macro getLast() : Variant
   End;

   /**
      Устанавливает новое значение 'newValue' элементу под индексом 'ind' и возвращает заменяемое значение.
   */
   Macro set(newValue : Variant, ind : Integer) : Variant
   End;

   /**
      Удаляет и возвращает значение под индексом 'ind'.
   */
   Macro remove(ind : Integer) : Variant
   End;

   /**
      Удаляет и возвращает первый элемент.
   */
   Macro removeFirst() : Variant
   End;

   /**
      Удаляет и возвращает последний элемент.
   */
   Macro removeLast() : Variant
   End;

   /**
      Удаляет все элементы из 'enumerable' и возвращает `true`, если был найден и удален хотябы один элемент.
   */
   Macro removeAll(enumerable, equalsFun) : Bool
   End;

   /**
      Возвращает индекс первого элемента равного 'element' согласно функции 'equalsFun'. Если функция не указана сравнение происходит через функцию заданную по умолчанию для текущего спискаа.
   */
   Macro indexOf(element, equalsFun)
   End;

   /**
      Возвращает индекс последнего элемента равного 'element' согласно функции 'equalsFun'. Если функция не указана сравнение происходит через функцию заданную по умолчанию для текущего списка.
   */
   Macro lastIndexOf(element, equalsFun)
   End;

   /**
      Возвращает `true`, если коллекция содержит элемент равный 'element' согласно функции 'equalsFun'. Если функция не указана сравнение происходит через '=='.
   */
   Macro contains(element, equalsFun) : Bool
   End;

   /**
      Возвращает `true`, если коллекция содержит все элементы из 'enumerable' согласно функции 'equalsFun'. Если функция не указана сравнение происходит через '=='.
   */
   Macro containsAll(enumerable, equalsFun) : Bool
      var res = true;
      for(var el, enumerable)
         res = (res and (contains(el, equalsFun)));
      end;
      return res;
   End;

   /**
      Возвращает `true`, если коллекция отсортирована согласно функции-компаратору 'compareFun'.
   */
   Macro isSorted(compareFun) : Bool
   End;

   /**
      Сортирует исходный список согласно функции-компаратору 'compareFun' и возвращает ссылку на него.
   */
   Macro sort(compareFun) : ListInterface
   End;

   /**
      Разворачивает исходный список и возращает ссылку на него.
   */
   Macro reverse() : ListInterface
   End;

   /**
      Возвращает список состоящий из подмножества исходного, начиная с 'from' (включительно), заканчивая 'to' (исключительно).
   */
   Macro subList(from : Integer, to : Integer) : ListInterface
   End;

   /**
      Возвращает массив типа [Utils.SArray SArray] состоящий из элементов исходного списка.
   */
   Macro toArray() : SArray
   End;

   /** Возвращает новый убывающий итератор. */
   Macro newDescIterator(ind) : DescendingIterator
      return DescendingIterator(this, ind);
   End;


   Macro equals(othList)
      if (size != othList.size)
         return false;
      end;
      var itr1 = newIterator();
      var itr2 = othList.newIterator();
      while (itr1.hasnext)
         var t1 = itr1.next();
         var t2 = itr2.next();
         if (ExecMacro2("equalsfunc", t1, t2) == false)
            return false;
         end;
      end;
      return true;
   End;

End;

/**
   Базовый интерфейс для коллекций пар "ключ-значение".

   @see [Collection.HashMap]
   @see [Collection.TreeMap]
   @see [Collection.ArrayMap]
*/
Class (Iterable) MapInterface()

   private var keyComparator;
   private var keyEqualsFunc;
   private var valueComparator;
   private var valueEqualsFunc;

   /**
      Устанавливает функцию-компаратор ключей 'kCompareFun' и возвращает текущую коллекцию.
   */
   Macro setKeyComparator(kCompareFun)
      keyComparator = kCompareFun;
      return this;
   End;

   /**
      Устанавливает функцию проверки на равенство ключей 'kEqualsFun' и возвращает текущую коллекцию.
   */
   Macro setKeyEqualsFunc(kEqualsFun)
      keyEqualsFunc = kEqualsFun;
      return this;
   End;

   /**
      Устанавливает функцию-компаратор значений 'vCompareFun' и возвращает текущую коллекцию.
   */
   Macro setValueComparator(vCompareFun)
      valueComparator = vCompareFun;
      return this;
   End;

   /**
      Устанавливает функцию проверки на равенство значений 'vEqualsFun' и возвращает текущую коллекцию.
   */
   Macro setValueEqualsFunc(vEqualsFun)
      valueEqualsFunc = vEqualsFun;
      return this;
   End;

   /**
      Устанавливает тип ключа 'type' из языка RSL.
   */
   Macro setKeyType(type : Integer) : MapInterface
   End;

   /**
      Устанавливает тип значений 'type' из языка RSL.
   */
   Macro setValueType(type : Integer) : MapInterface
   End;

   /**
      Помещает в коллекцию ключ 'key' и соответсвующее ему значение 'value', если такой ключ уже присутствует, значение меняется, а заменяемое значение возвращается.
   */
   Macro put(key, value : Variant) : Variant
   End;

   /**
      Помещает в коллекцию все пары "ключ-значение" из 'map'.
   */
   Macro putMapEntries(map : MapInterface)
   End;

   /**
      Возвращает значение соответствующее ключу 'key', если такого ключа не найдено возвращает `null`.
   */
   Macro get(key) : Variant
   End;

   /**
      Заменяет значение соответствующее ключу 'key' на 'newValue' и возвращает `true`, если ключа не найдено возвращает `false`, при этом добавление нового элемента не происходит.
   */
   Macro replace(key, newValue : Variant) : Bool
   End;

   /**
      Удаляет и коллекции пару с ключем 'key' и возвращает удаляемое значение.
   */
   Macro remove(key) : Variant
   End;

   /**
      Возвращает `true`, если коллекция содержит пару с ключем 'key'.
   */
   Macro containsKey(key) : Bool
   End;

   /**
      Возвращает `true`, если коллекция содержит пару со значением равным 'value' согласно функции 'equalsFun'. Если функция не указана сравнение происходит через '=='.
   */
   Macro containsValue(value, equalsFun) : Bool
   End;

   /**
      Возвращает массив [Utils.SArray SArray] состоящий из ключей исходной коллекции.
   */
   Macro keys() : SArray
   End;

   /**
      Возвращает массив [Utils.SArray SArray] состоящий из значений исходной коллекции.
   */
   Macro values() : SArray
   End;

   /**
      Возвращает новый итератор пар.
   */
   Macro newEntryIterator()
   End;

   /**
      Возвращает новый итератор ключей.
   */
   Macro newKeyIterator()
   End;

   /**
      Возвращает новый итератор значений.
   */
   Macro newValueIterator()
   End;

   Macro newIterator()
      return newEntryIterator();
   End;
End;

/**
   Базовый интерфейс для коллекций уникальных значений.

   @see [Collection.HashSet]
   @see [Collection.TreeSet]
*/
Class (Iterable) SetInterface()

   Macro setType(rslType : Integer) : SetInterface

   End;

   /**
      Добавляет 'element' в сэт и возвразает `true`, если элемент добавляется впервые.
   */
   Macro add(element) : Bool
   End;

   /**
      Добавляет все элементы 'enumerable' в конец сэта. Возвращает `true` если был добавлен хотя бы один элемент.
   */
   Macro addAll(enumerable) : Bool
   End;

   /**
      Добавляет все аргументы в сэт и возвращает текущий экземпляр.
   */
   Macro addItems(varargs)
   End;

   /**
      Ищет и удаляет 'element', возвращает `true`, если элемент был найден и удален.
   */
   Macro remove(element) : Bool
   End;

   /**
      Ищет и удаляет все элементы иcходного сэта, которые содержаться в 'enumerable', который может являться списком, сэтом или массивом. Вовзращает `true` если был найден или удален хотя бы один элемент.
   */
   Macro removeAll(enumerable) : Bool
   End;

   /**
      Возвращает `true`, если сэт содержит элемент равный 'element'.
   */
   Macro contains(element) : Bool
   End;

   /**
      Возвращает `true`, если сэт содержит все элементы из 'enumerable'.
   */
   Macro containsAll(enumerable) : Bool
   End;

   Macro equals(oth)
      if (size != oth.size)
         return false;
      end;
      var itr1 = newIterator();
      var itr2 = oth.newIterator();
      while (itr1.hasnext)
         var t1 = itr1.next();
         var t2 = itr2.next();
         if (ExecMacro2("equalsfunc", t1, t2) == false)
            return false;
         end;
      end;
      return true;
   End;

End;
