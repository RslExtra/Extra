/**
   @package Collections
   @version 1.0

   Реализация списка на основе массива [TArray].
*/

import "..\\Mac\\Extra\\Collections\\Iterable.mac";

/**
   Реализация итератора для [ArrayList].
   @param _arrList : ArrayList Объект списка
   @oparam _ind = 0 Индекс стартового элемента
*/
Private Class (ListIterator) ArrayListIterator(_arrList, _ind : Integer)
   InitListIterator(_arrList, _ind);
   // var list = _arrList;
   // var curIndex  : Integer = -1;
   // var nextIndex : Integer = 0;
   // var lastReturned;

   if(ValType(_ind)==V_UNDEF)
      _ind = 0;
   end;

   nextIndex = _ind;

   Macro add(el : Variant) : Bool      // Add after curEl
      list.add(el, nextIndex);
   End;

   Macro addBefore(el : Variant)
      list.add(el, nextIndex - 1);
      curIndex = curIndex + 1;
      nextIndex = nextIndex + 1;
   End;

   Macro set(el : Variant) : Variant
      var oldVal;
      if (ValType(lastReturned) != V_UNDEF)
         return list.set(el, curIndex);
      end;
   End;

   Macro remove() : Variant   // Удаяем текущий элемент и никуда не идем
      if (curIndex >= 0)
         var rem = list.remove(curIndex);
         curIndex = -1;
         return rem;
      end;
   End;

   Macro toPos(ind : Integer)
      if ((ind < 0) or (ind > list.size-1)) RunError("Index of bound"); end;
      curIndex = ind;
      nextIndex = ind + 1;
   End;
End;

/** Вместимость списка при инициализации. */
Private CONST INIT_CAPACITY = 128;


/** Реализация списка на основе массива [TArray]. Реализует все классические методы как в реализации Java.Collection [ArrayList.add add()], [ArrayList.get() get()] и т.д.
@see [Collections.LinkedList Двусвязный список]
@see [NativeIterator]
*/
Class (ListInterface) ArrayList()
   size = 0;
   comparator  = @AnyTypeCompare;
   equalsfunc  = @AnyTypeEquals;
   var items = TArray();
   var capacity = INIT_CAPACITY;

   items[capacity - 1] = null; // Инициализируем null-ами

   Private Macro resize()
      capacity = capacity * 2;
      items[capacity-1] = null;
   end;

   Macro setPrimitive()
      comparator  = @CF_ComparePrimitive;
      equalsfunc  = @CF_EqualsPrimitive;
      return this;
   End;


   Macro newInstance()
      return ArrayList()
            .setComparator(comparator);
   End;

   /**
      Добавляет указанный элемент `v` на позицию `ind`. Если  `ind` не указан, добавляет элемент в конец списка.
      @sample [samples.Collections.ArrayList.add]
   */
   Macro add(v, ind) : Bool
      if ((ValType(ind) == V_UNDEF) or (ind == size))
         items[size] = v;
      elif ((ind < 0) or (ind >= size))
         return false;
         RunError("Index of bound.");
      else
         for(var i, size - 1, ind, -1)
            items[i + 1] = items[i];
         end;
         items[i] = v;
      end;
      size = size + 1;
      if(size == capacity)
         resize();
      end;
      return true;
   End;

   Macro addFirst(v : Variant) : Bool
      return add(v,0);
   End;

   Macro addLast(v : Variant) : Bool
      return add(v);
   End;

   Macro addItems()
      var i, p;
      for (i, 1, Parmcount-1, 1)
         GetParm(i, p);
         add(p);
      end;
   End;

   Macro get(ind) : Variant
      if ((ind <0) or (ind>=size))
         return null;
      end;
      return items[ind];
   End;

   Macro getFirst() : Variant
      if (size == 0) return null; end;
      return items[0];
   End;

   Macro getLast() : Variant
      if (size == 0) return null; end;
      return items[size - 1];
   End;

   Macro set(ind : Integer , v : Variant) : Variant
      if ((ValType(ind) == V_UNDEF) or (ind<0) or (ind >= size))
         return null;
      end;
      var oldVal = items[ind];
      items[ind] = v;
      return oldVal;
   End;

   Macro remove(ind : Integer) : Variant
      if((ValType(ind) == V_UNDEF) or (ind<0) or (ind >= size))
         return null;
      end;
      var remVal = items[ind];
      for(var i, ind, size-2,1)
         items[i] = items[i+1];
      end;
      items[size-1] = null;
      size = size - 1;
      return remVal;
   End;

   Macro removeFirst() : Variant
      return remove(0);
   End;

   Macro removeLast() : Variant
      return remove(size-1);
   End;

   Macro addAll(enumerable, ind : Integer)
      if (ValType(enumerable) == V_UNDEF) return this; end;
      if (enumerable.size == 0) return this; end;
      if(ValType(ind) != V_INTEGER)
         ind = size;
      end;
      var ofs = enumerable.size;
      while (capacity <= (size + ofs))     // Раздвигаем массив
         resize();
      end;
      var i;
      for (i, size-1, ind, -1)
         items[i + ofs] = items[i];
      end;
      i = ind;
      for (var el, enumerable)
         items[i] = el;
         i = i + 1;
      end;
      size = size + ofs;
      return this;
   End;

   Macro indexOf(v : Variant, equalsfun) : Integer
      if (ValType(equalsfun) == V_UNDEF)
         equalsfun = equalsfunc;
      end;
      var i;
      if (ValType(v) == V_UNDEF)
         for (i, 0, size-1, 1)
            if (ValType(items[i]) == V_UNDEF)
               return i;
            end;
         end;
      else
         for (i, 0, size-1, 1)
            if (ExecMacro2(equalsfun, v, items[i]))
               return i;
            end;
         end;
      end;
      return -1;
   End;

   Macro lastIndexOf(v : Variant, equalsfun) : Integer
      if (ValType(equalsfun) == V_UNDEF)
         equalsfun = equalsfunc;
      end;
      var i;
      if (ValType(v) == V_UNDEF)
         for (i, size - 1, 0, -1)
            if (ValType(items[i]) == V_UNDEF)
               return i;
            end;
         end;
      else
         for (i, size-1, 0, -1)
            if (ExecMacro2(equalsfun, v, items[i]))
               return i;
            end;
         end;
      end;
      return -1;
   End;

   Macro contains(v : Variant, equalsfun) : Bool
      return (indexOf(v) >= 0);
   End;

   Macro containsAll(enumerable, equalsfun) : Bool
      var res = true;
      for(var el, enumerable)
         res = (res and (contains(el, equalsFun)));
      end;
      return res;
   End;

   Macro removeAll(enumerable, equalsfun) : Bool
      var removed = false;
      for (var el, enumerable)
         var ind = indexOf(el, equalsfun);
         if (ind >= 0)
            remove(ind);
            removed = true;
         end;
      end;
      return removed;
   End;


   /** Бинарный поиск по списку элемента `el`. Возвращает индекс найденного элемента или отрицательное значение равное подходящему индексу вставки умноженное на -1 и с вычетом 1.*/
   Macro binarySearch(el, compareFun) : Integer
      if(ValType(compareFun) == V_UNDEF)
         compareFun = comparator;
      end;
      var high = size;
      var low = 0;
      var mid = 0;
      var x;
      var i = -1;
      while(low < high)
         mid = (low + high) / 2;
         var resCom = ExecMacro2(compareFun, el, items[mid]);
         if (resCom == 0)
            return mid;
         elif (resCom < 0)
            high = mid;
            i = -mid-1;
         else
            low = mid + 1;
            i = -low-1;
         end;
      end;
      return i;
   End;

   Macro clear()
      var i;
      for(i, 0, size - 1, 1)
         items[i] = null;
      end;
      items = TArray();
      items[capacity - 1] = null;
      size = 0;
   End;

   Macro copy() : ArrayList
      var newList = newInstance();
      for(var i, 0, size-1, 1)
         newList.add(items[i]);
      end;
      return newList;
   End;

   Macro reverse()
      for(var i, 0, size/2-1, 1)
         var t = items[i];
         items[i] = items[size-i-1];
         items[size-i-1] = t;
      end;
      return this;
   End;


   Macro fromList(list : Iterable)
      if(IsEqClass("ImmutableList", list))
         while(capacity <= list.size)
            resize();
         end;
         items = list.items;
         size = list.size;
         capacity = size;
      else
         clear();
         addAll(list);
      end;
      return this;
   End;

   Macro fromArray(arr : TArray)
      while(capacity <= arr.size)
         resize();
      end;
      items = arr;
      size = arr.size;
      items[capacity - 1] = null;
      return this;
   End;

   Macro toArray() : SArray
      var retArr = SArray();
      retArr[size - 1] = null;
      for (var i, 0, size - 1, 1)
         retArr[i] = items[i];
      end;
      return retArr;
   End;

   Macro sort(compareFun)
      if (ValType(compareFun) == V_UNDEF)
         compareFun = comparator;
      end;
      var arr = toArray();
      QSort(arr, compareFun);
      clear();
      return addAll(arr);
      OnError(err)
         if(err.code == 37)
            RunError("Не верно определена функция-компаратор для sort()", err);
         end;
   End;


   Macro isSorted(compareFun) : Bool
      if (ValType(compareFun) == V_UNDEF)
         compareFun = comparator;
      end;
      for (var i, 1, size-1, 1)
         if (ExecMacro2(compareFun, items[i-1], items[i]) > 0)
            return false;
         end;
      end;
      return true;
   End;

   Macro equals(otherList) : Bool
      if (this == otherList) return true; end;
      if ((GenClassName(otherList) != GenClassName(this)) or (size != otherList.size ) or (hash != otherList.hash))
         return false;
      end;
      for (var i, 0, size - 1, 1)
         if (ExecMacro2(equalsfunc, items[i], otherList.items[i]) == false)
            return false;
         end;
      end;
      return true;
   End;

   Macro newIterator()
      return ArrayListIterator(this);
   End;
End;
