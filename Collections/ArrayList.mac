/**
   @package Collections
   @version 1.0

   Реализация списка на основе массива [TArray].
*/

import "..\\Mac\\Extra\\Collections\\Iterable.mac";

/**
   Реализация итератора для [ArrayList].
   @param arrList : ArrayList Объект списка
   @oparam ind = 0 Индекс стартового элемента
*/
Private Class (IteratorInterface) ArrayListIterator(arrList, ind : Integer)
   var inst = arrList;
   var nextIndex : Integer = 0;
   var lastIndex   : Integer = -1;
   var lastReturned;

   if (ValType(ind) == V_UNDEF)
      ind = 0;
   elif (ValType(ind) != V_INTEGER)
      return Throw(IllegalArgumentException());
   elif ((ind < 0) or (ind > inst.size))
      return Throw(IndexOutOfBoundsException());
   end;
   nextIndex = ind;

   Macro getLastReturned()
      return lastReturned;
   End;

   Macro getNextIndex()
      return nextIndex;
   End;

   Macro clear()
      nextIndex = 0;
      lastReturned = null;
      lastIndex = -1;
   End;

   Macro toPos(ind : Integer)
      if ((ind < 0) or (ind > inst.size))
         return Throw(IndexOutOfBoundsException());
      end;
      nextIndex = ind;
   End;

   Macro hasNext() : Bool
      return (nextIndex < inst.size);
   End;

   Macro hasPrev()
      return (nextIndex > 0);
   End;

   Macro next() : Variant
      if (nextIndex > inst.size)
         return Throw(NoSuchElementException());
      end;
      lastReturned = inst.get(nextIndex);
      lastIndex = nextIndex;
      nextIndex = nextIndex + 1;
      return lastReturned;
   End;

   Macro prev() : Variant
      if (nextIndex == 0)
         return Throw(NoSuchElementException());
      end;
      nextIndex = nextIndex - 1;
      lastReturned = inst.get(nextIndex);
      lastIndex = nextIndex;
      return lastReturned;
   End;

   Macro add(el : Variant)
      inst.add(el, nextIndex);
      nextIndex = nextIndex + 1;
      lastIndex = -1;
   End;

   Macro addBefore(el : Variant)
      inst.add(el, nextIndex - 1);
      nextIndex = nextIndex + 1;
   End;

   Macro set(el : Variant) : Variant
      if (lastIndex < 0)
         return Throw(IllegalStateException);
      end;
      var oldVal = inst.set(lastIndex, el);
      lastIndex = -1;
      return oldVal;
   End;

   Macro remove() : Variant   // Удаяем текущий элемент и никуда не идем
      if (lastIndex < 0)
         return Throw(IllegalStateException);
      end;
      var rem = inst.remove(lastIndex);
      lastIndex = -1;
      return rem;
   End;
End;

/** Вместимость списка при инициализации. */
Private CONST INIT_CAPACITY = 128;


/** Реализация списка на основе массива [TArray]. Реализует все классические методы как в реализации Java.Collection [ArrayList.add add()], [ArrayList.get() get()] и т.д.
@see [Collections.LinkedList Двусвязный список]
@see [NativeIterator]
*/
Class (ListInterface) ArrayList()
   size = 0;
   comparator  = @VariantCompare;
   equalsfunc  = @VariantEquals;
   var items = TArray();
   var capacity = INIT_CAPACITY;

   items[capacity - 1] = null; // Инициализируем null-ами

   Private Macro resize()
      capacity = capacity * 2;
      items[capacity-1] = null;
   end;

   Macro setPrimitive()
      comparator  = @CF_ComparePrimitive;
      equalsfunc  = @CF_EqualsPrimitive;
      return this;
   End;


   Macro newInstance()
      return ArrayList()
            .setComparator(comparator)
            .setEqualsFunc(equalsfunc);
   End;

   /**
      Добавляет указанный элемент `v` на позицию `ind`. Если  `ind` не указан, добавляет элемент в конец списка.
      @sample [samples.Collections.ArrayList.add]
   */
   Macro add(v, ind) : String
      if ((ValType(ind) == V_UNDEF) or (ind == size))
         items[size] = v;
      elif ((ind < 0) or (ind >= size))
         return Throw(IndexOutOfBoundsException);
      else
         for(var i, size - 1, ind, -1)
            items[i + 1] = items[i];
         end;
         items[i] = v;
      end;
      size = size + 1;
      if(size == capacity)
         resize();
      end;
   End;

   Macro addFirst(v : Variant) : Bool
      return add(v,0);
   End;

   Macro addLast(v : Variant) : Bool
      return add(v);
   End;

   Macro addItems() : ArrayList
      var i, p;
      for (i, 1, Parmcount-1, 1)
         GetParm(i, p);
         add(p);
      end;
      return this;
   End;

   Macro get(ind) : Variant
      if ((ind <0) or (ind>=size))
         return null;
      end;
      return items[ind];
   End;

   Macro getFirst() : Variant
      if (size == 0) return null; end;
      return items[0];
   End;

   Macro getLast() : Variant
      if (size == 0) return null; end;
      return items[size - 1];
   End;

   Macro set(ind : Integer , v : Variant) : Variant
      if ((ValType(ind) == V_UNDEF) or (ind<0) or (ind >= size))
         return null;
      end;
      var oldVal = items[ind];
      items[ind] = v;
      return oldVal;
   End;

   Macro remove(ind : Integer) : Variant
      if((ValType(ind) == V_UNDEF) or (ind<0) or (ind >= size))
         return null;
      end;
      var remVal = items[ind];
      for(var i, ind, size-2,1)
         items[i] = items[i+1];
      end;
      items[size-1] = null;
      size = size - 1;
      return remVal;
   End;

   Macro removeFirst() : Variant
      return remove(0);
   End;

   Macro removeLast() : Variant
      return remove(size-1);
   End;

   Macro addAll(enumerable, ind : Integer) : ArrayList
      if (ValType(enumerable) == V_UNDEF) return this; end;
      if (enumerable.size == 0) return this; end;
      if(ValType(ind) != V_INTEGER)
         ind = size;
      end;
      var ofs = enumerable.size;
      while (capacity <= (size + ofs))     // Раздвигаем массив
         resize();
      end;
      var i;
      for (i, size-1, ind, -1)
         items[i + ofs] = items[i];
      end;
      i = ind;
      for (var el, enumerable)
         items[i] = el;
         i = i + 1;
      end;
      size = size + ofs;
      return this;
   End;

   Macro indexOf(v : Variant) : Integer
      for (var i, 0, size-1, 1)
         if (ExecMacro2(equalsfunc, v, items[i]))
            return i;
         end;
      end;
      return -1;
   End;

   Macro lastIndexOf(v : Variant) : Integer
      for (var i, size-1, 0, -1)
         if (ExecMacro2(equalsfunc, v, items[i]))
            return i;
         end;
      end;
      return -1;
   End;

   Macro contains(v : Variant) : Bool
      return (indexOf(v) >= 0);
   End;

   Macro containsAll(enumerable) : Bool
      var res = true;
      for(var el, enumerable)
         res = (res and (contains(el)));
      end;
      return res;
   End;

   Macro removeAll(enumerable) : Bool
      var removed = false;
      for (var el, enumerable)
         var ind = indexOf(el);
         if (ind >= 0)
            remove(ind);
            removed = true;
         end;
      end;
      return removed;
   End;


   /** Бинарный поиск по списку элемента `el`. Возвращает индекс найденного элемента или отрицательное значение равное подходящему индексу вставки умноженное на -1 и с вычетом 1.*/
   Macro binarySearch(el) : Integer
      var high = size, low = 0, mid, x;
      var i = -1;
      while(low < high)
         mid = (low + high) / 2;
         var resCom = ExecMacro2(comparator, el, items[mid]);
         if (resCom == 0)
            return mid;
         elif (resCom < 0)
            high = mid;
            i = -mid-1;
         else
            low = mid + 1;
            i = -low-1;
         end;
      end;
      return i;
   End;

   Macro clear()
      items.size = 0;
      items[capacity - 1] = null;
      size = 0;
   End;

   Macro copy() : ArrayList
      var newList = newInstance();
      for(var i, 0, size-1, 1)
         newList.add(items[i]);
      end;
      return newList;
   End;

   Macro subList(from : Integer, to : Integer) : ArrayList
      var newList = newInstance();
      if (ValType(from) == V_UNDEF)
         from = 0;
      elif (from < 0)
         return Throw(IndexOutOfBoundsException);
      end;
      if (ValType(to) == V_UNDEF)
         to = size;
      elif (from > size)
         return Throw(IndexOutOfBoundsException);
      end;
      for(var i, from, to-1, 1)
         newList.addLast(items[i]);
      end;
      return newList;
   End;

   Macro reverse()
      for(var i, 0, size/2-1, 1)
         var t = items[i];
         items[i] = items[size-i-1];
         items[size-i-1] = t;
      end;
      return this;
   End;

   Macro fromArray(arr : TArray)
      while(capacity <= arr.size)
         resize();
      end;
      items = arr;
      size = arr.size;
      items[capacity - 1] = null;
      return this;
   End;

   Macro toArray() : SArray
      var retArr = SArray();
      retArr[size - 1] = null;
      for (var i, 0, size - 1, 1)
         retArr[i] = items[i];
      end;
      return retArr;
   End;

   Macro sort(compareFun)
      if (ValType(compareFun) == V_UNDEF)
         compareFun = comparator;
      end;
      var arr = toArray();
      ExQSort(arr, compareFun);
      clear();
      return addAll(arr);
      OnError(err)
         if(err.code == 37)
            return Throw(IllegalArgumentException("Не верно определена функция-компаратор для метода sort()"));
         end;
   End;


   Macro isSorted(compareFun) : Bool
      if (ValType(compareFun) == V_UNDEF)
         compareFun = comparator;
      end;
      for (var i, 1, size-1, 1)
         if (ExecMacro2(compareFun, items[i-1], items[i]) > 0)
            return false;
         end;
      end;
      return true;
   End;

   Macro equals(otherList) : Bool
      if (this == otherList) return true; end;
      if ((GenClassName(otherList) != GenClassName(this)) or (size != otherList.size ) or (hash != otherList.hash))
         return false;
      end;
      for (var i, 0, size - 1, 1)
         if (ExecMacro2(equalsfunc, items[i], otherList.items[i]) == false)
            return false;
         end;
      end;
      return true;
   End;

   Macro newIterator(ind)
      return ArrayListIterator(this, ind);
   End;
End;
