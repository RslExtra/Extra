/**
   @package Collections
   Файл включает в себя реализацию классического интерфейса 'set', коллекцию уникальных значений.

*/
import "..\\Mac\\Extra\\Collections\\HashMap.mac";

/**
   Коллекция уникальных значений. Реализована на основе [HashMap].
*/
Class (SetInterface) HashSet(_InitialCapacity, _LoadFactor)
   size = 0;
   private var inMap = HashMap(_InitialCapacity, _LoadFactor);

   Macro setInMap(newMap)
      inMap = newMap;
   End;

   Macro setType(type : Integer)
      inMap.setKeyType(type);
      return this;
   End;

   Macro add(el : Variant) : Bool
      if (inMap.containsKey(el))
         return false;
      else
         inmap.put(el, PRESENT);
         size = size + 1;
         return true;
      end;
   End;

   Macro addAll(enumerable) : Bool
      var res = false;
      for (var el, enumerable)
         if (add(el))
            res = true;
         end;
      end;
      return res;
   end;

   Macro addItems() : HashSet
      var i, p;
      for (i, 1, Parmcount-1, 1)
         GetParm(i, p);
         add(p);
      end;
      return this;
   End;

   Macro remove(element : Variant) : Bool
      if (inMap.remove(element) == PRESENT)
         size = size - 1;
         return true;
      end;
      return false;
   End;

   Macro removeAll(enumerable) : Bool
      var res = false;
      for (var el, enumerable)
         if (remove(el))
            res = true;
         end;
      end;
      return res;
   End;

   Macro contains(element : Variant)
      return inMap.containsKey(element);
   End;

   Macro containsAll(enumerable) : Bool
      for (var el, enumerable)
         if (inMap.containsKey(el) == false)
            return false;
         end;
      end;
      return true;
   End;

   Macro clear() : HashSet
      inMap.clear();
      size = 0;
      return this;
   End;

   Macro toArray() : SArray
      return inMap.keys();
   End;

   Macro newInstance() : HashSet
      var inst = HashSet();
      inst.setInMap(inMap.newInstance());
      return inst;
   End;

   Macro append(el)
      add(el);
   End;

   Macro newIterator()
      return inMap.newKeyIterator();
   End;
End;

/** Возвращает [HashSet] уникальных Integer */
Macro IntHashSet(_InitialCapacity, _LoadFactor)
   return HashSet(_InitialCapacity, _LoadFactor).setType(V_INTEGER);
End;


/** Возвращает [HashSet] уникальных String */
Macro StringHashSet(_InitialCapacity, _LoadFactor)
   return HashSet(_InitialCapacity, _LoadFactor).setType(V_INTEGER);
End;