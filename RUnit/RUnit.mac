/**
   @Package RUnit
   @Ancestor Extra
   @Title    RUnit. Библиотека для юнит-тестирования.

   Библиотека для легкого тестирования пользовательских классов, макросов и модулей, написанных на RSL. Использует рефлексию, поэтому для создания тестов, необходимо следовать  простым шагам:
   - Создаём отдельный макрофайл.
   - Импортируем библиотеку `import "..\\mac\\extra\\RUnit\\RUnit.Mac";`
   - Если тестируется исполняемый модуль, то в тексте него после иннициализации глобных переменных и до начала исполнения необходимо добавить строку
     `if (ExecMacro2("UnitTestMarker") != null) return; end;`, что завершит выполнение модуля, при его импорте.
   - Импортируем тестируемый модуль
   - При необходимости настраиваем поведение 'RUnit', через свойства объект [RUnitTest].

   - Создаем тестовый кейс как класс, расширяющий [TestCase].
   - Тестовые методы называем начиная со слова `test_`
   - Все остальные вспомогательные методы и поля класса называем иначе.

   Для запуска тестов существует два варианта:
   - По умолчанию настройка [RUnitProperties.AUTO_RUN_UNIT_TEST AUTO_RUN_UNIT_TEST] == `true`, что запускает тесты при вызове деструктора обхъекта кейса, поэтому необходимо в конце файла создать инстанс тестового кейса, не присваивая его переменной. Например `MyTestCase();`.
   - Выставить значение [RUnitProperties.AUTO_RUN_UNIT_TEST AUTO_RUN_UNIT_TEST] == `false`. Запустить тест методом [TestCase.RunCase].

   Для вывода результатов теста, существует также два вариант в зависимости от настройки [RUnitProperties.AUTO_PRINT_RESULT AUTO_PRINT_RESULT] :
   - По умолчанию значение `true`. Дополнительных манипуляций производить не нужно. При вызове деструктора в конце работы программы результаты теста выведутся на экран.
   - Если установить значение `false`. В нужный момент работы програмы вызвать функцию [UT_PrintResults UT_PrintResults()].

   Для логирования всё аналогично выводу на экран. За вывод отвечает настройка [RUnitProperties.AUTO_LOG_RESULT AUTO_LOG_RESULT] :
   - По умолчанию значение `true`. В конце работы программы результаты тестов запишутся в лог.
   - Если установить значение `false`. Необходимо вызвать функцию [UT_LogResults UT_LogResults()].
*/

import rcw;
import "..\\Mac\\Extra\\Utils\\StringUtils.mac";
import "..\\Mac\\Extra\\RUnit\\MemDB.mac";

/**
   Объект класса [RUnitProperties] для настройки поведения тестов.
*/
const RUnitTest = GenObject("RUnitProperties");

Private var AllTestResult = GenObject("AllTestsResult");

Private Macro getTimeDiffMillis(t1, t2) : Integer
   var strTime = String((t2 - t1) : m);
   var h = Int(SubStr(strTime, 1, 2));
   var m = Int(SubStr(strTime, 4, 2));
   var s = Int(SubStr(strTime, 7, 2));
   var ms = Int(SubStr(strTime, 10, 2));
   return ((((h*60) + m) * 60) + s) * 100 + ms;
end;

/**
   Класс настроек библиотеки представленный [RUnitTest].
*/
Private Class RUnitProperties()
   /** Флаг автоматического запуска теста при вызове деструктора объекта. При установка значения `false`, тесты запускаться не будут. */
   var AUTO_RUN_UNIT_TEST      : Bool = true;

   /** Флаг автоматического вывода на экран результатов тестов */
   var AUTO_PRINT_RESULT       : Bool = true;

   /** Флаг автоматического вывода на экран результатов тестов */
   var AUTO_LOG_RESULT         : Bool = true;

   /** Флаг вывода успешнопройденных тестовых кейсов. По умолчанию `true` */
   var SHOW_SUCCEED_CASE       : Bool = true;

   /** Флаг вывода успешнопройденных тестовых функций. По умолчанию `true` */
   var SHOW_SUCCEED_FUN        : Bool = true;

   /** Флаг вывода успешнопройденных ассертов. По умолчанию `false` */
   var SHOW_SUCCEED_ASSERT     : Bool = false;

   /** Флаг вывода времени исполнения кейса */
   var SHOW_CASE_EXECUTION_TIME     : Bool = true;

   /** Флаг вывода времени исполнения тестового метода */
   var SHOW_FUN_EXECUTION_TIME      : Bool = true;
   /** Флаг записи в логгер. По умолчанию `false` при установке этого флага в `true`, так же необходимо установить экземпляр логгера в поле
   [RUnitProperties.LOGGER_INSTANCE LOGGER_INSTANCE] */
   var WRITE_TO_LOG                : Bool = false;

   /** Флаг записи в лог успешнопройденных тестовых кейсов. По умолчанию `true`. */
   var LOG_SUCCEED_CASE       : Bool = true;

   /** Флаг записи в лог успешнопройденных тестовых функций. По умолчанию `true`. */
   var LOG_SUCCEED_FUN        : Bool = true;

   /** Флаг записи в лог успешнопройденных ассертов. По умолчанию `false`. */
   var LOG_SUCCEED_ASSERT     : Bool = false;

   /** Флаг записи в лог времени исполнения */
   var LOG_EXECUTION_TIME     : Bool = true;
   /** Экземпляр класса логера, логер должен иметь методы 'i()' для записи успешно пройденных тестов, и 'e()' для проваленных. Можно воспользоваться одним из логеров [LogR.SingleLogger] или [LogR.Logger] */
   var LOGGER_INSTANCE                    = null;

   /** Установка префикса для тестовых методов. По умолчанию 'TEST_'.*/
   var METHOD_PREFIX : String = "TEST_";

   var SEPARATOR_LINE_WIDTH        : Integer = 80;

   var ALL_TEST_RESULT_LINE_WIDTH  : Integer = 70;

   var TEST_CASE_RESULT_LINE_WIDTH : Integer = 40;

   var TEST_FUNC_RESULT_LINE_WIDTH : Integer = 30;

   var ASSERT_STATUS_WIDTH         : Integer = 6;

End;


Private Macro toLogI(msg)
   RUnitTest.LOGGER_INSTANCE.i(msg);
End;

Private Macro toLogE(msg)
   RUnitTest.LOGGER_INSTANCE.e(msg);
End;

Private Class AssertResult(_definition : String)
   var definition = _definition;
   var passed : Bool = true;
   var msg = "";
   var num = 0;

   Macro toScreen()
      if (not(RUnitTest.SHOW_SUCCEED_ASSERT) and passed) return; end;
      var st = "ok  ";
      if (passed)
         println("      " + String(num:2:0) + " : ok   :   " + definition);
      else
         println("      " + String(num:2:0) + " : fail :   " + definition + " - " + msg);
      end;


   End;

   Macro toLog()
      if (RUnitTest.LOG_SUCCEED_ASSERT and passed) return; end;
      if (not(passed))
         toLogE("fail - " + definition + " - " + msg);
      else
         toLogI("ok   - " + definition);
      end;
   End;
End;

Private Class FunResult(_funcname)
   var funcname       : String  = _funcname;
   var passed         : Bool    = true;
   var pass_asserts   : Integer = 0;
   var fail_asserts   : Integer = 0;
   var execTimeMillis : Integer = 0;
   var fail_flag      : Bool    = false;
   var fail_msg       : String  = "";

   var assertResults = TArray();

   Macro isPassed()
      return (passed and (not(fail_flag)));
   End;

   Macro addAssertResult(assRes : AssertResult)
      assertResults[assertResults.size] = assRes;
      if (assRes.passed)
         pass_asserts = pass_asserts  + 1;
      else
         fail_asserts = fail_asserts + 1;
         passed = false;
      end;
   End;

   Macro toScreen()
      if (not(RUnitTest.SHOW_SUCCEED_FUN) and passed) return; end;

      var st = "[OK]";
      if (not(isPassed))
         st = "[FAIL]";
      end;
      var stats = "Asserts run:" + (pass_asserts + fail_asserts) + ", failed:" + fail_asserts;
      print("   "); println(StringUtils.fillBetween(funcname, st, RUnitTest.TEST_FUNC_RESULT_LINE_WIDTH, " "));
      print("   "); println(stats);
      if (RUnitTest.SHOW_FUN_EXECUTION_TIME)
         println("   " + "(" + execTimeMillis + " ms)");
      end;
      for (var assRes, assertResults)
         assRes.toScreen();
      end;
      if (fail_flag)
         println("   Test was failed because : " + fail_msg);
      end;
      println("");
   End;

   Macro toLog()
      if (RUnitTest.LOG_SUCCEED_FUN and passed) return; end;
      var stats = "   Asserts run:" + (pass_asserts + fail_asserts) + ", failed:" + fail_asserts;
      if (not(isPassed))
         toLogE(String(funcname:20:0) + "[FAIL]  " + stats);
      else
         toLogI(String(funcname:20:0) + "[OK]    " + stats);
      end;

      for (var assRes, assertResults)
         assRes.toLog();
      end;
   End;
End;

Private Class CaseResult(_casename : String)
   var casename       : String  = _casename;
   var passed         : Bool    = true;
   var pass_funs      : Integer = 0;
   var fail_funs      : Integer = 0;
   var execTimeMillis : Integer = 0;
   var funResults = TArray();

   Macro addFunResult(_funResult : FunResult)
      funResults[funResults.size] = _funResult;
      if (_funResult.passed)
         pass_funs = pass_funs + 1;
      else
         fail_funs = fail_funs + 1;
         passed = false;
      end;
   End;

   Macro toScreen()
      if (funResults.size == 0) return; end;
      if (not(RUnitTest.SHOW_SUCCEED_CASE) and passed) return; end;

      var st = "[OK]";
      if (not(passed))
         st = "[FAIL]";
      end;
      var stats = "Tests method run: " + (pass_funs + fail_funs) + ", failed: " + fail_funs;

      println(StringUtils.fillBetween(casename, st, RUnitTest.TEST_CASE_RESULT_LINE_WIDTH, " "));
      println(stats);
      if (RUnitTest.SHOW_CASE_EXECUTION_TIME)
         println("("+ execTimeMillis +" ms)")
      end;
      println("");

      for (var funRes, funResults)
         funRes.toScreen();
      end;
      println(StringUtils.repeat("-", RUnitTest.SEPARATOR_LINE_WIDTH));

   End;

   Macro toLog()
      if (funResults.size == 0) return; end;
      if (RUnitTest.LOG_SUCCEED_CASE and passed) return; end;
      var stats = "Tests method run: " + (pass_funs + fail_funs) + ", failed: " + fail_funs;
      if (not(passed))
         toLogE(String(casename:20:0) + "[FAIL]");
      else
         toLogI(String(casename:20:0) + "[OK]");
      end;
      toLogI(stats);
      for (var funRes, funResults)
         funRes.toLog();
      end;
   End;
End;

Private Class AllTestsResult()
   var passed = true;
   var pass_case = 0;
   var fail_case = 0;
   var printed = false;
   var logged  = false;
   var testResults = TArray();
   var startTime = Time();

   Macro addTestResult(testResult : caseResult)
      testResults[testResults.size] = testResult;
      if (testResult.passed)
         pass_case = pass_case + 1;
      else
         fail_case = fail_case + 1;
         passed = false;
      end;
   End;

   Macro clearResults()
      testResults.size = 0;
   End;

   Macro printTestResults()
      if (testResults.size == 0) return; end;

      Println("================================= START TESTS ==================================");
      var st = "[OK]";
      if (not(passed))
         st = "[FAILED]"
      end;
      println(st + " Testcases successful complete: " + pass_case + "/" + (pass_case+fail_case));
      println("(" + getTimeDiffMillis(startTime, time) + " ms)");
      println("");
      for (var testRes, testResults)
         testRes.toScreen();
      end;
      //Println("================================== END TESTS ==========+========================");
      clearResults();
   End;

   Macro logTestResults()
      if (testResults.size == 0) return; end;
      if (not(RUnitTest.WRITE_TO_LOG)) return; end;

      toLogI("START UNIT TESTS " + Date() + "  " + Time());
      var st;;
      if (not(passed))
         st = "[FAILED]";
         toLogE("[FAILED] " + "Testcases successful complete: "  + pass_case + "/" + (pass_case+fail_case));
      else
         toLogI("[OK    ] " + "Testcases successful complete: "  + pass_case + "/" + (pass_case+fail_case));
      end;
      for (var testRes, testResults)
         testRes.toLog();
      end;
      toLogI("END UNIT TESTS");

   End;

   Macro Destructor()
      if (RUnitTest.AUTO_PRINT_RESULT and (not(printed)))
         printTestResults();
         printed = true;
      end;
      if (RUnitTest.AUTO_LOG_RESULT and (not(logged)))
         logTestResults();
         logged = true;
      end;
   End;
End;

Private Class AssertClass(_val1, _val2)
   var val1 = _val1;
   var val2 = _val2;
   private var strAssert = StrSubst(GenClassName(this),"CLASS", "") + " ( " + String(_val1) + " , " + String(_val2) + " )";
   var result = AssertResult(strAssert);
   var num = 0;

   Macro setNum(n : Integer)
      num = n;
      result.num = n;
   End;

   Macro runAssert() : Bool
      return true;
   End;

   Macro setResult(res : Bool)
      result.passed = res;
   End;

   Macro getResult() : Bool
      return true;
   End;

   Macro setFaultCause(cause : String)
      result.msg = cause;
   End;

End;

Private Macro VariantEquals(o1: Variant, o2: Variant) : Bool
   var t1 = ValType(o1);
   var t2 = ValType(o2);
   if (t1 != t2) return false; end;
   if (t1 <= 10)                    // Примитивы
      return (o1 == o2);
   elif (t1 == V_GENOBJ)            // Объекты
      var rEq = ExecMacro2(R2M(o1,"equals"), o2);
      if (ValType(req) == V_BOOL) return req; end;
      var rCmp = ExecMacro2(R2M(o1,"compareTo"), o2);
      if (ValType(rCmp) == V_INTEGER)
         return (rCmp == 0);
      end;
      return false;
   end;
   return (o1 == o2);
End;

Private Class (AssertClass) AssertEqualsClass(_val1, _val2)
   initAssertClass(_val1, _val2);

   Macro runAssert() : Bool
      if (ValType(val1) != ValType(val2))
         setResult(false);
         setFaultCause("AssertEquals different ValTypes.");
      elif (ValType(val1) == V_GENOBJ)
         var eq = VariantEquals(val1, val2);
         setResult(eq);
         if (eq == false)
            setFaultCause("Object not equals: " + val1 + " and " + val2);
         end;
      elif (val1 != val2)
         setResult(false);
         setFaultCause("AssertEquals expected value: " + String(val1) + " , real value: " + String(val2));
      else
         setResult(true);
      end;
   End;
End;

Private Class (AssertClass) AssertNullClass(_val1)
   initAssertClass(_val1);
   result.definition = StrSubst(GenClassName(this),"CLASS", "") + " ( " + String(_val1) + " )";

   Macro runAssert() : Bool
      if (ValType(val1) == V_UNDEF)
         setResult(true);
      else
         setResult(false);
         setFaultCause("AssertNull expected null-value, but value is: " + String(val1));
      end;
   End;
End;

Private Class (AssertClass) AssertNotNullClass(_val1)
   initAssertClass(_val1);
   result.definition = StrSubst(GenClassName(this),"CLASS", "") + " ( " + String(_val1) + " )";

   Macro runAssert() : Bool
      if (ValType(val1) != V_UNDEF)
         setResult(true);
      else
         setResult(false);
         setFaultCause("AssertNotNull expected notnull-value, but value is null");
      end;
   End;
End;

Private Class (AssertClass) AssertTrueClass(_val1)
   initAssertClass(_val1);
   result.definition = StrSubst(GenClassName(this),"CLASS", "") + " ( " + String(_val1) + " )";

   Macro runAssert() : Bool
      if (ValType(val1) == V_BOOL)
         if (val1)
            setResult(true);
         else
            setResult(false);
            setFaultCause("AssertTrue expected TRUE, but value is: " + String(val1));
         end;
      else
         setResult(false);
         setFaultCause("AssertTrue value is not BOOL type: " + String(val1));
      end;
   End;
End;

Private Class (AssertClass) AssertFalseClass(_val1)
   initAssertClass(_val1);
   result.definition = StrSubst(GenClassName(this),"CLASS", "") + " ( " + String(_val1) + " )";

   Macro runAssert() : Bool
      if (ValType(val1) == V_BOOL)
         if (Not(val1))
            setResult(true);
         else
            setResult(false);
            setFaultCause("AssertFalse expected FALSE, but value is: " + String(val1));
         end;
      else
         setResult(false);
         setFaultCause("AssertFalse value is not BOOL type: " + String(val1));
      end;
   End;
End;

Private Class (AssertClass) AssertArraysClass(_arr1, _arr2)
   initAssertClass(_arr1, _arr2);

   Macro runAssert() : Bool
      setResult(true);
      if (IsEqClass("TArray", val1) == false)
         setResult(false);
         setFaultCause("AssertArrays first parm is not an Array");
      elif (IsEqClass("TArray", val2) == false)
         setResult(false);
         setFaultCause("AssertArrays second parm is not an Array");
      elif (val1.size != val2.size)
         setResult(false);
         setFaultCause("AssertArrays arrays has a different size. " + val1.size + " and " + val2.size);
      else
         var i;
         for (i,0,val1.size-1,1)
            if (val1[i]!=val2[i])
               setResult(false);
               setFaultCause("AssertArrays arrays are not equal. At least on index: " + i + " , values: '" + val1[i] + "' and '" + val2[i] + "'");
               break;
            end;
         end;
      end;
   End;
End;

Private Class (AssertClass) AssertErrorClass(_expCode, _err)
   initAssertClass(_expCode, _err);

   if (isEqClass("TRSLERROR",_err))
      strAssert = StrSubst(GenClassName(this),"CLASS", "") + " ( " + String(_expCode) + " , " + String(_err.code) + " )";
      result = AssertResult(strAssert);
   end;

   Macro runAssert()
      var expCode = val1;
      var err = val2;
      if (ValType(err)!=V_UNDEF)
         if (ValType(expCode) == V_INTEGER)    // Если ожидалась ошибка проверим код
               if ((expCode == -1) or (expCode == err.Code))
                  setResult(true);
               else
                  setResult(false);
                  setFaultCause("Expected error with code: " + expCode + " , but was catched error with code: " + err.code + " - " + err.Message);
               end;
         else
            setResult(false);
            setFaultCause("Unexpected Error. Code: " + err.code + " - " + err.Message);
         end;
      else
         setResult(false);
         setFaultCause("AssertError expected ERROR, but wasn't catched any error. Value is:" + val1);
      end;
   End;
End;

Private Class (AssertClass) AssertExceptionClass(_val1, _val2)
   initAssertClass(_val1, _val2);

   Macro getException(val1, cand)
      if (isEqClass("Exception", cand) == false)
         var lastExc = ExecMacro2("GetLastException");
         if (isEqClass("Exception", lastExc))
            val2 = lastExc;
         end;
      end;
   End;

   Macro runAssert() : Bool
      getException(val1, val2);
      if (isEqClass("Exception", val1) == false)
         setResult(false);
         setFaultCause("Expected value is not [Exception] class type.");
      elif (isEqClass("Exception", val2) == false)
         setResult(false);
         setFaultCause("Real value is not [Exception] class type.");
      elif (isEqClass(GenClassName(val1), val2) == false)
         setResult(false);
         setFaultCause("AssertException expected Exception: " + GenClassName(val1) + ", but real: " + GenClassName(val2));
      else
         setResult(true);
      end;
   End;
End;


Private Class UnitFun(_testCase, _funcname : String)
   var case = _testCase;
   var funcname = _funcname;
   var expErrCode;
   var result    = FunResult(_funcname);
   private var curAssNum = 0;

   Macro setExecTime(millis : Integer)
      result.execTimeMillis = millis;
   End;

   Macro runTestFun()
      var curTest = 0;
      var t0 = time();
      var res = GenRun(case, funcname);
      setExecTime(getTimeDiffMillis(t0, time));

      OnError(err) // При ошибке внутри функции
         var errAss = AssertErrorClass(expErrCode, err);
         this.addAssert(errAss);
   End;

   Macro addAssert(ass)
      if (result.fail_flag) return; end;
      curAssNum = curAssNum + 1;
      ass.setNum(curAssNum);
      ass.RunAssert();
      result.addAssertResult(ass.result);
   End;

   Macro fail(msg : String)
      result.fail_flag = true;
      result.fail_msg  = msg;
      result.passed = false;
   End;
End;

/**
   Основной класс библиотеки, для написания юнит теста необходимо унаследоваться от него. Для запуска
*/
Class TestCase(_name)
   var name       : String;
   var testFuns   : TArray;
   var curTestFun : UnitFun;

   var complete   : Bool;

   var result;

   if (ValType(_name) == V_STRING)
      name = _name;
   end;

   /**
      Метод выполняется до проведения тестов кейса. Используется для моков в контексте кейса.
   */
   Macro beforeClass()
   End;
   /**
      Метод выполняется после проведения тестов кейса.
   */
   Macro afterClass()
   End;

   /**
      Метод будет выполнен перед каждым тестом.
   */
   Macro beforeTest()
   End;

   /**
      Метод будет выполнен после каждого теста.
   */
   Macro afterTest()
   End;

   /**
      Проверка на равенство 'val1 == val2'.
   */
   Macro assertEquals(val1, val2)
      curTestFun.addAssert(AssertEqualsClass(val1,val2));
   End;

   /**
      Проверка является ли 'val1' `null`.
   */
   Macro assertNull(val1) : Bool
      curTestFun.addAssert(AssertNullClass(val1));
   End;

   /**
      Проверка не является ли 'val1' `null`.
   */
   Macro assertNotNull(val1) : Bool
      curTestFun.addAssert(AssertNotNullClass(val1));
   End;

   /**
      Проверка на равенство с `true`.
   */
   Macro assertTrue(val1) : Bool
      curTestFun.addAssert(AssertTrueClass(val1));
   End;

   /**
      Проверка на равенство с `false`.
   */
   Macro assertFalse(val1) : Bool
      curTestFun.addAssert(AssertFalseClass(val1));
   End;

   Macro assertError(val1) : Bool
      curTestFun.addAssert(assertErrorClass(val1));
   End;

   /**
      Проверка, является ли последнее брошенное исключение [OOP.Exception Exception] 'val2' того же типа, что и  'val1'.
   */
   Macro assertException(val1, val2)
      curTestFun.addAssert(AssertExceptionClass(val1, val2));
   End;

   /**
      Проверка на равенство двух массивов [TArray] 'arr1' и 'arr2'.
   */
   Macro assertArrays(arr1, arr2)
      curTestFun.addAssert(assertArraysClass(arr1, arr2));
   End;

   /**
      Принудительно заваливает тест. Полезно при проверке внутри большого цикла вместо создания 1000 ассертов.
   */
   Macro fail(msg : String)
      curTestFun.fail(msg);
   End;

   Macro catchError(_code)
      var code = _code;
      if (valType(code) != V_INTEGER)
         code = -1;           // Catch all errors
      end;
      curTestFun.expErrCode = code;
   End;

   /**
      Генерирует массив [TArray] из переданных параметров.
      @oparam varargs параметры инициализации массива.
   */
   Macro Ar()
      var arr = TArray();
      var p, i = 1;
      while (i < Parmcount)
         getParm(i, p);
         arr[i-1] = p;
         i = i + 1;
      end;
      return arr;
   End;

   Private Macro __AddTestFun(funName)
      testFuns[testFuns.size] = UnitFun(this, funName);
   End;

   Private Macro __ParseMethods()
      for (var mn, GetObjMethods(this))
         if (SubStr(mn,1,5) == StrUpr(RUnitTest.METHOD_PREFIX))
            __AddTestFun(mn);
         end;
      end;
   End;

   Private Macro startTests()
      testFuns = TArray();
      __ParseMethods();

      for (curTestFun, testFuns)
         beforeTest();
         curTestFun.runTestFun();
         afterTest();
         result.addFunResult(curTestFun.result);
      end;
   End;

   /**
      Запускает тесты текущего кейса. Целесообразно использовать только при настройке [RUnitProperties.AUTO_RUN_UNIT_TEST AUTO_RUN_UNIT_TEST] = `false`.
   */
   Macro RunCase()
      if (ValType(name) == V_UNDEF)
         name = GenClassName(this);
      end;
      result = CaseResult(name);
      var t0 = time();
      beforeClass();
      startTests();
      afterClass();
      result.execTimeMillis = getTimeDiffMillis(t0, time);
      AllTestResult.addTestResult(result);
   End;

   Macro Destructor()
      if ((ValType(complete) == V_UNDEF) and RUnitTest.AUTO_RUN_UNIT_TEST)
         RunCase();
         complete = true;
      end;
   End;
End;

/**
   Выводит на экран результаты всех кейсов. Вызывать после проведения всех тестов.
*/
Macro UT_PrintResults()
   AllTestResult.printTestResults();
End;

/**
   Выводит в лог результаты всех кейсов. Вызывать после проведения всех тестов.
*/
Macro UT_LogResults()
   AllTestResult.logTestResults();
End;