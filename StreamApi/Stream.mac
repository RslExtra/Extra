/**
   @Package StreamApi
   @Alias StreamApi
   @Ancestor Extra
   @Version 0.8

   Реализация Stream Api. В большинстве своём схожа с 'Java Stream Api'. Реализует самые полезные методы для создания цепочек ленивых вычислений.

   Создать Stream можно следующими способами
   - методом '.toStream()', если он реализован у класса объекта например ([SArray], [Iterable Collections]).
   - вызовом функции StreamOf(obj). Obj может быть массивом [TArray], [Collections.Iterable], объектом [TStreamDoc], строкой 'String', объектом таблицы бд [TbFile].
   - реализовав итератор для любого класса с методами (next() : Variant, hasNext() : Bool) и передав его инстанс в конструктор класса [BornStream].

   После создания объекта, как обычно, через точку пишем конвеерные методы (тэг 'Conveyor'), агрегирующие методы (тэг 'Agregate') и заверщаем цепочку одним терминальным методом ('Terminal'), который вернет или `null` или соответствующий результат.

   Во всех методах где необходимо передать ссылку на функцию, можно использовать лямбды, имя функции с '@' перед именем, ссылкой на метод [R2M] или ссылку на функцию через '@'.

   О чем следует помнить:
   - Стрим не запускает конвеер вычислений до добавление в цепочку терминального метода.
   - После того как стрим завершил работу, повторно запустить его не получится. Нужно создать заново.
   - При передаче параметра как ссылки метода объекта класса (через [R2M]), следует помнить, что объект должен существовать в момент вызова метода. Т.е объект необходимо поместить в память, например в переменную или массив, чтобы его не уничтожил GC.

   Использование библиотеки помогает существенно сократить время написания аналитических отчетов (время исполнения чаще всего тоже), однако при использовании "на постоянку" желательно не использовать лямбды, чтобы не использовать HDD (все лямбды можно описать как маленькие функции).

   В виду того, что RSL - динамически типизирован, рекомендуется потренироваться в использовании на языке со статической типизацией (Java, Scala, Kotlin, C#).
*/

import "..\\Mac\\Extra\\Collections\\Collections.mac";
import "..\\Mac\\Extra\\Utils\\ArrayUtils.mac";
import "..\\Mac\\Extra\\StreamApi\\Collectors.mac";

Private Macro callLambda(obj,_func, parm1, parm2) : Variant
   var res = CallR2M(_func, parm1, parm2);
   return res;
End;

Private Macro defVal(codType)
   if (codType == V_STRING)
      return "";
   elif (codType == V_MONEY)
      return $0;
   elif (codType == V_INTEGER)
      return 0;
   elif (codType == V_DATE)
      return Date(0, 0, 0);
   elif (codType == V_TIME)
      return Time(0, 0, 0);
   elif (codType == V_BOOL)
      return false;
   else
      return 0;
   end;
end;

/**
   Базовый класс для всех стримов, описывает методы доступные для всех наследников.
*/
Private Class StreamInterface()
   var upstream;
   var downstream;
   var needStop = false;

   /*
      Связывает стрим с верхним и нижним. Запускает на выполнение если стрим терминальный.
   */
   Private Macro accept(streamObj : StreamInterface)
      downstream = streamObj;
      streamObj.upstream = this;
      if (isEqClass("TerminalStream", streamObj))
         return streamObj.apply();
      end;
      return streamObj;
   End;

   /*
      Останавливает стрим и сообщает об остановке другим конвеерным классам.
   */
   Macro stopStream()
      needStop = true;
      if (downstream != null)
         downstream.stopStream();
      end;
   End;

   /*
      Возвращает следующий элемент.
   */
   Macro next() : Variant
      return upstream.next();
   End;
End;

/**
   Базовый класс для агрегатных и конвеерных стримов.
*/
Private Class (StreamInterface) ContinuedStream()

   /**
      Преобразует каждый элемент стрима согласно 'mapfunc'. Если используются лямбды, вернет последнюю инструкцию н.р
      ```
         var arr = SArray(1, 2, 3).toStream()
                  .map("i -> println(i); i*2")  // Выведет на экран каждое число и вернёт каждое удвоенным
                  .toArray();
      ```
      @tag Conveyor
   */
   Macro map(mapfunc)
      var streamObj = GenObject("MapStream", mapfunc);
      return accept(streamObj);
   End;

   /**
      Разворачивает вложенные stream  в один.

      @tag Conveyor
   */
   Macro flatMap(mapfunc)
      var streamObj = GenObject("FlatMapStream", mapfunc);
      return accept(streamObj);
   End;

   /**
      Фильтрует записи согласно функции 'predicate', т.е передает дальше только те элементы для которых вызов 'predicate' вернет `true`.

      @tag Conveyor
   */
   Macro filter(predicate)
      var streamObj = GenObject("FilterStream", predicate);
      return accept(streamObj);
   End;

   /**
      Ограничивает переданное количество элементов параметром '_count'.

      @tag Conveyor
   */
   Macro limit(_count : Integer)
      var streamObj = GenObject("LimitStream", _count);
      return accept(streamObj);
   End;

   /**
      Пропускает первые 'cnt' элементов.

      @tag Conveyor
   */
   Macro skip(_count  : Integer)
      var streamObj = GenObject("SkipStream", _count);
      return accept(streamObj);
   End;

   /**
      Передает элементы дальше пока 'predicate' возвращает 'true'; как только 'predicate' вернет 'false' стрим закончится.

      @tag Conveyor
   */
   Macro takeWhile(predicate)
      var streamObj = GenObject("TakeWhileStream", predicate);
      return accept(streamObj);
   End;

   /**
      Передает только уникальные элементы. Если это объектный тип, должны быть реализованы методы hash и equals.

      @tag Conveyor
   */
   Macro distinct()
      var streamObj = GenObject("DistinctStream");
      return accept(streamObj);
   End;

   /**
      Передает только уникальные элементы по параметру возвращаемой функцией 'parmfunc'.

      @tag Conveyor
   */
   Macro distinctBy(parmfunc)
      var streamObj = GenObject("DistinctByStream", parmfunc);
      return accept(streamObj);
   End;

   /**
      Передает только уникальные элементы по параметру типа 'String' возвращаемой функцией 'parmFunc'.

      @tag Conveyor
   */
   Macro distinctByString(parmFunc)
      var streamObj = GenObject("DistinctByStringStream", parmfunc);
      return accept(streamObj);
   End;

   /**
      Передает только уникальные элементы по параметру типа 'Integer' возвращаемой функцией 'parmFunc'.

      @tag Conveyor
   */
   Macro distinctByInt(parmfunc)
      var streamObj = GenObject("DistinctByIntStream", parmfunc);
      return accept(streamObj);
   End;

   /**
      Вызывает для каждого элемента 'peekfunc' и возвращает неизмененный элемент.

      @tag Conveyor
   */
   Macro peek(peekfunc)
      var streamObj = GenObject("PeekStream", peekfunc);
      return accept(streamObj);
   End;

   /**
      Вызывает функцию 'oncefunc' единожды и возвращает неизменненные элементы. Отлично подходит для того, чтобы понять входящий  тип элемента, для этого в интересующее место цепочки вставляем `.once("debugbreak")`.

      @tag Conveyor
   */
   Macro once(oncefunc)
      var streamObj = GenObject("OnceStream", oncefunc);
      return accept(streamObj);
   End;

   /**
      Объединяет каждый элемент с соответсвующим ему индексом в объект [Tuple]. Можно задать начальный индекс 'startIndex', по умолчанию нумеруется с 0.

      @tag Conveyor
   */
   Macro zipWithIndex(startIndex)
      var streamObj = GenObject("zipWithIndexStream", startIndex);
      return accept(streamObj);
   End;

   /**
      Групирует элементы в структуру типа HashMap<key, List> где key вычисляется функцией parmfunc.
      Следующим элементом в цепочке будет объект типа [Collections.Pair].

      @tag Agregate
   */
   Macro groupBy(parmfunc)
      var streamObj = GenObject("GroupByStream", parmfunc);
      return accept(streamObj);
   End;

   /**
      Групирует элементы в структуру типа HashMap<key, List> где key вычисляется функцией parmfunc. Оптимизирован для Integer ключей.
      Следующим элементом в цепочке будет объект типа [Collections.Pair].

      @tag Agregate
   */
   Macro groupByInt(parmfunc)
      var streamObj = GenObject("GroupByIntStream", parmfunc);
      return accept(streamObj);
   End;

   /**
      Групирует элементы в структуру типа HashMap<key, List> где key вычисляется функцией parmfunc. Оптимизирован для String ключей.
      Следующим элементом в цепочке будет объект типа [Collections.Pair].

      @tag Agregate
   */
   Macro groupByString(parmfunc)
      var streamObj = GenObject("GroupByStringStream", parmfunc);
      return accept(streamObj);
   End;

   /**
      Сортирует элементы согласно функции 'comparator'.

      @tag Agregate
   */
   Macro sorted (comparator)
      var streamObj = GenObject("SortedStream", comparator);
      return accept(streamObj);
   End;

   /**
      Для каждого элемента выполняет 'func' и завершает стрим.

      @tag Terminal
   */
   Macro forEach(func)
      var streamObj = GenObject("ForEachStream", func);
      return accept(streamObj);
   End;

   /**
      Собирает элементы согласно 'collectorObj'. Заготовленные коллекторы можно посмотреть [StreamApi.#Collectors]

      @tag Terminal
   */
   Macro collect(collectorObj)
      var streamObj = GenObject("CollectStream", collectorObj);
      return accept(streamObj);
   End;

   /**
      Выводит все элементы на экран и завершает стрим.

      @tag Terminal
   */
   Macro toScreen()
      var streamObj = GenObject("toScreenStream");
      return accept(streamObj);
   End;

   /**
      Выполняет агрегатную функцию 'accumulator' с начальным значением 'identity' возвращает результат 'identity'.

      @tag Terminal
   */
   Macro reduce(identity, accumulator)
      var streamObj = GenObject("ReduceStream", identity, accumulator);
      return accept(streamObj);
   End;

   /**
      Возвращает сумму для числового стрима.

      @tag Terminal
   */
   Macro sum()
      var streamObj = GenObject("SumStream");
      return accept(streamObj);
   End;

   /**
      Возвращает сумму по параметру возвращаемого  'parmFunc'.

      @tag Terminal
   */
   Macro sumBy(parmFunc)
      var streamObj = GenObject("SumByStream", parmFunc);
      return accept(streamObj);
   End;

   /**
      Возвращает первый элемент из стрима или 'OrElse' если стрим пустой.

      @tag Terminal
   */
   Macro findFirst(OrElse : Variant)
      var streamObj = GenObject("FindFirstStream", OrElse);
      return accept(streamObj);
   End;

   /**
      Возвращает количество элементов в стриме.

      @tag Terminal
   */
   Macro count() : Integer
      var streamObj = GenObject("CountStream");
      return accept(streamObj);
   End;

   /**
      Возвращает `true` если функция 'predicate' хотябы раз вернет `true`.

      @tag Terminal
   */
   Macro anyMatch(predicate) : Bool
      var streamObj = GenObject("AnyMatchStream", predicate);
      return accept(streamObj);
   End;

   /**
      Возвращает `true` если функция 'predicate' для всех элементов вернет `false`.

      @tag Terminal
   */
   Macro noneMatch(predicate) : Bool
      var streamObj = GenObject("NoneMatchStream", predicate);
      return accept(streamObj);
   End;


   /**
      Возвращает `true` если функция 'predicate' для всех элементов вернет `true`.

      @tag Terminal
   */
   Macro allMatch(predicate) : Bool
      var streamObj = GenObject("AllMatchStream", predicate);
      return accept(streamObj);
   End;

   /**
      Возвращает минимальное значение согласно 'comparator'.

      @tag Terminal
   */
   Macro min(comparator) : Variant
      var streamObj = GenObject("MinStream", comparator);
      return accept(streamObj);
   End;

   /**
      Возвращает максимальное значение согласно 'comparator'.

      @tag Terminal
   */
   Macro max(comparator) : Variant
      var streamObj = GenObject("MaxStream", comparator);
      return accept(streamObj);
   End;

   /**
      Возвращает массив из элементов.

      @tag Terminal
   */
   Macro toArray() : SArray
      var streamObj = GenObject("ToArrayStream");
      return accept(streamObj);
   End;

   /**
      Позволяет использовать кастомный объект Stream. Для этого необходимо унаследоваться от [ConveyorStream], [AgregateStream] или [TerminalStream] переопределить необходимые методы и передать экземпляр класса в функцию как 'streamObj'.

      @tags Conveyor, agregate, terminal
   */
   Macro custom(streamObj)
      return accept(streamObj);
   End;
End;

/**
   Базовый класс для стримов рождающих потоки. На вход принимает 'iterator', объект класса реализующий методы Macro hasNext() : Bool, Macro next() : Variant.
*/
Class (ContinuedStream) BornStream(iterator)
   initContinuedStream();
   private var iter = iterator;
   private var inc = 0;

   Macro hasNext() : Bool
      return iter.hasNext();
   End;

   Macro next() : Variant
      if (iter.hasNext == false)
         return stopStream();
      end;
      var res = iter.next();
      return res;
   End;
End;

/**
   Базовый класс для конвеерных стримов. Если будете писать свой конвеерный класс, унаследуйтесь от этого класса и переопределите метод next () : Variant.
*/
Class (ContinuedStream) ConveyorStream()
   initContinuedStream();

   Macro next()
      var el = upstream.next();
      if (needStop) return stopStream(); end;
      return el;
   End;
End;

/**
   Базовый класс для агрегатных стримов. Жадно собирает данные у предыдущих стримов, азатем запускается на выполнение как будто является [BornStream].
*/
Class (ContinuedStream) AgregateStream()
   private var isReadyToGive = false;
   private var iter;

   Macro stopStream()
      needStop = true;
      if (isReadyToGive)
         downstream.stopStream();
      end;
   End;
   /**
      Специфичный для 'AgregateStream' метод, собирает данные, прежде чем отдавать их. При переопределении, в конце метода необходимо определить итератор `iter`.
   */
   Macro accumulate()
      // implement in child
   end;

   Macro next()
      if (not(isReadyToGive))
         accumulate();
      end;

      if (iter.hasNext() == false)
         return stopStream();
      end;
      var res = iter.next();
      return res;
   End;
End;

/**
   Базовый класс для терминальных стримов (запускающих и завершающих). Если будете писать свой терминальный класс, унаследуйтесь от этого класса и переопределите метод apply(el).
*/
Class (StreamInterface) TerminalStream()

   /**
      Специфичный для 'TerminalStream' метод. Вызывается сразу как стрим добавлен к цепочке.
   */
   Macro apply()

   end;
End;

Private Class (ConveyorStream) MapStream(_mapfunc)
   var mapFunc = Lambdas.getFunc(_mapFunc);

   Macro next()
      var el = upstream.next();
      if (needStop) return stopStream(); end;
      return ExecMacro2(mapFunc, el);
   End;
End;

Private Class (ConveyorStream) FlatMapStream(_mapfunc)
   private var mapFunc = Lambdas.getFunc(_mapfunc);
   private var curSubStream = null;

   Private Macro nextSubStream() : Bool
      var el = upstream.next();
      if (needStop) return false; end;
      curSubStream = ExecMacro2(mapFunc, el);
      if (IsEqClass("Iterable", curSubStream))
         curSubStream = ExecMacro2("StreamOf", curSubStream);
      end;
      return true;
   End;

   Macro next()
      if ((Valtype(curSubStream) == V_UNDEF))
         if (nextSubStream == False)
            return stopStream();
         end;
      end;
      while(true)
         var el = curSubStream.next();
         if (not(curSubStream.needStop))
            return el;
         else
            if (nextSubStream == False)
               return stopStream;
            end;
         end;
      end;

   End;
End;

Private Class (ConveyorStream) FilterStream(_predicate)
   private var predicate = Lambdas.getFunc(_predicate);

   Macro next()
      while(true)
         var el = upstream.next();
         if (needStop) return stopStream(); end;
         if (ExecMacro2(predicate, el))
            return el;
         end;
      end;
      stopStream();
   End;
End;

Private Class (ConveyorStream) LimitStream(_count : Integer)
   private var needCount : Integer = _count;
   private var curCount  : Integer = 0;

   Macro next()
      if (curCount >= needCount)
         return stopStream();
      end;
      var el = upstream.next();
      if (needStop) return stopStream(); end;
      curCount = curCount + 1;
      return el;
   End;
End;

Private Class (ConveyorStream) SkipStream(_count : Integer)
   private var needCount = _count;
   private var curCount = 0;
   private var skipped = false;

   Macro next()
      var el;
      if (skipped == false)
         while (curCount < needCount)
            el = upstream.next();
            if (needStop) return stopStream(); end;
            curCount = curCount + 1;
         end;
         skipped = true;
      end;
      el = upstream.next();
      if (needStop) return stopStream(); end;
      return el;
   End;
End;

Private Class (ConveyorStream) TakeWhileStream(_predicate)
   private var predicate = Lambdas.getFunc(_predicate);

   Macro next()
      var el = upstream.next();
      if (needStop) return stopStream(); end;
      if (ExecMacro2(predicate, el))
         return el;
      end;
      return stopStream();
   End;
End;

Private Class (ConveyorStream) DistinctStream()
   private var set = HashSet(10000, 0.1);

   Macro next()
      while(true)
         var el = upstream.next();
         if (needStop) return stopStream; end;
         if (set.add(el))
            return el;
         end;
      end;
      stopStream();
   End;
End;

Private Class (ConveyorStream) DistinctByStream(_funcParm)
   private var funcParm =  Lambdas.getFunc(_funcParm);
   private var set = HashSet(10000, 0.1);;

   Macro next()
      while (true)
         var el = upstream.next();
         if (needStop) return stopStream; end;
         var parm = ExecMacro2(funcParm, el);
         if (set.add(parm))
            return el;
         end;
      end;
      stopStream();
   End;
End;

Private Class (DistinctByStream) DistinctByIntStream(_funcParm)
   funcParm = Lambdas.getFunc(_funcParm);
   set = IntHashSet(10000, 0.1);
End;

Private Class (DistinctByStream) distinctByStringStream(_funcParm)
   funcParm = Lambdas.getFunc(_funcParm);
   set = StringHashSet(10000, 0.1);
End;

Private Class (ContinuedStream) PeekStream(_func)
   private var func = Lambdas.getFunc(_func);

   Macro next()
      var el = upstream.next();
      if (needStop) return stopStream(); end;
      ExecMacro2(func, el);
      return el;
   End;
End;

Private Class (ContinuedStream) OnceStream(_func)
   private var func = Lambdas.getFunc(_func);
   private var trigger = false;

   Macro next()
      var el = upstream.next();
      if (needStop) return stopStream(); end;
      if (not(trigger))
         ExecMacro2(func, el);
         trigger = true;
      end;
      return el;
   End;
End;


// Agreagate

Private Class (AgregateStream) GroupByStream(_groupByFunc)
   private var groupByFunc = Lambdas.getFunc(_groupByFunc);
   private var hmap = LinkedHashMap(10000, 0.1);

   Macro accumulate()
      while (true)
         var el = upstream.next();
         if (needStop) break; end;
         var parm = ExecMacro2(groupByFunc, el);
         var list = hmap.get(parm);
         if (Valtype(list) == V_UNDEF)
            list = ArrayList();
            hmap.put(parm, list);
         end;
         list.addLast(el);
      end;

      iter = hmap.newEntryIterator();
      isReadyToGive = true;
      needStop = false;
   End;

End;

Private Class (GroupByStream) GroupByIntStream(_groupByFunc)
   groupByFunc = Lambdas.getFunc(_groupByFunc);
   hmap = HashMap(10000, 0.1).setKeyType(V_INTEGER);
End;

Private Class (GroupByStream) GroupByStringStream(_groupByFunc)
   groupByFunc = Lambdas.getFunc(_groupByFunc);
   hmap = HashMap(10000, 0.1).setKeyType(V_STRING);
End;

Private Class (AgregateStream) SortedStream(_comparator)
   private var comparator = @VariantCompare;
   private var arr = SArray();
   if (ValType(_comparator) != V_UNDEF)
      comparator = Lambdas.getFunc(_comparator);
   end;

   Macro accumulate()
      while(true)
         var el = upstream.next();
         if(needStop) break; end;
         arr[arr.size] = el;
      end;
      ExQSort(arr, comparator);
      iter = ArrayUtils.newIterator(arr);
      isReadyToGive = true;
      needStop = false;
   End;
End;

// Borning

Private Macro reverseReplacement(tbStr)
   var hp;
   if ( not(tbStr._getit))
      hp = tbStr.inFile.prev();
   else
      hp = (tbStr.inFile.getPos > 0);
   end;
   if (not(hp) or tbStr.needStop) return tbStr.stopStream(); end;
   if (not(tbStr.isFixed))
      return tbStr.inFile.rec;
   else
      return tbStr.getCopyRec().rec;
   end;
End;

/**
   Класс для создания стрима из объекта [TBFile].
*/
Private Class (BornStream) TBFileStream(tbFile)
   var inFile = tbFile;
   private var front = true;
   private var fix = false;
   private var thandl = TRecHandler(inFile.TblName, inFile.DicName);

   private var arrKeys     = TArray();
   private var arrKeysType = TArray();
   private var arrKeysSize = 0;
   var _getit = (inFile.getPos > 0);

   Macro ini()
      var i = 0, k = 0;
      var kInfo = THandl.GetKeyInfo();
      var fInfo = THandl.GetFldInfo();
      while (i < kInfo.size)
         if (kInfo[i] == inFile.keyNum)
            var pos = kInfo[i+2];
            arrKeys[k] = pos;
            arrKeysType[k]  = fInfo[(pos * 5) + 1];
            k = k + 1;
            break;
         end;
         i = i + 5;
      end;
      arrKeysSize = k;
   End;

   Macro getCopyRec()
      var handl = TRecHandler(inFile.TblName, inFile.DicName);
      copy(handl, inFile);
      return handl;
   End;

   Macro isFixed()
      return fix;
   End;

   Macro next()
      var hn;
      if (not(_getit))
         hn = inFile.next();
      else
         hn = (inFile.getPos > 0);
         _getit = false;
      end;
      if (not(hn) or needStop) return stopStream(); end;
      if (not(Fix))
         return inFile.rec;
      else
         return getCopyRec().rec;
      end;
   End;

   /**
      Устанавливает флаг fix в значение `true`; каждая итерация стрима будет возвращать копию буфера таблицу в [TRecHandler]. Накладная по скорости и памяти операция, поэтому желательно избегать использование этой опции, предпочитая мапить rec в ваш POJO объект.
   */
   Macro fixed() : TBFileStream
      fix = true;
      return this;
   End;

   /**
      Курсор бд будет бежать в обратном направлении.
   */
   Macro reverse() : TBFileStream
      GenAttach(this, "next", @reverseReplacement);
      return this;
   End;

   /**
      Метод аналогичен методу [TBFile.rewind].
   */
   Macro rewind() : TBFileStream
      inFile.rewind();
      _getit = false;
      return this;
   End;

   /**
      Устанавливает новый ключ 'kn'.
   */
   Macro setKey(kn : Integer) : TBFileStream
      inFile.keyNum = kn;
      rewind();
      ini();
      return this;
   End;

   /**
      Метод аналогичен методу [TBFile.getGE]. Параметры пеерчисляют для текущего ключа базы в 'varargs'.

      @oparam varargs - значения полей ключа
   */
   Macro getGE() : TBFileStream
      inFile.clear();
      var i = 0, v, p;
      while (GetParm(i+1, v))
         p = arrKeys[i];
         if (ValType(v) == V_UNDEF)
            defVal(arrKeysType[i], v);
         end;
         inFile.rec[p] = v;
         i = i + 1;
      end;
      if (inFile.getGE())
         _getit = true;
      else
         needStop = true;
      end;
      return this;
   End;

   /**
      Метод аналогичен методу [TBFile.getGT]. Параметры пеерчисляют для текущего ключа базы в 'varargs'.

      @oparam varargs - значения полей ключа
   */
   Macro getGT() : TBFileStream
      inFile.clear();
      var i = 0, v, p;
      while (GetParm(i+1, v))
         p = arrKeys[i];
         if (ValType(v) == V_UNDEF)
            defVal(arrKeysType[i], v);
         end;
         inFile.rec[p] = v;
         i = i + 1;
      end;
      if (inFile.getGT())
         _getit = true;
      else
         needStop = true;
      end;
      return this;
   End;

   /**
      Метод аналогичен методу [TBFile.getLE]. Параметры пеерчисляют для текущего ключа базы в 'varargs'.

      @oparam varargs - значения полей ключа
   */
   Macro getLE() : TBFileStream
      inFile.clear();
      var i = 0, v, p;
      while (GetParm(i+1, v))
         p = arrKeys[i];
         if (ValType(v) == V_UNDEF)
            defVal(arrKeysType[i], v);
         end;
         inFile.rec[p] = v;
         i = i + 1;
      end;
      if (inFile.getLE())
         _getit = true;
      else
         needStop = true;
      end;
      return this;
   End;

   /**
      Метод аналогичен методу [TBFile.getLT]. Параметры пеерчисляют для текущего ключа базы в 'varargs'.

      @oparam varargs - значения полей ключа
   */
   Macro getLT() : TBFileStream
      inFile.clear();
      var i = 0, v, p;
      while (GetParm(i+1, v))
         p = arrKeys[i];
         if (ValType(v) == V_UNDEF)
            defVal(arrKeysType[i], v);
         end;
         inFile.rec[p] = v;
         i = i + 1;
      end;
      if (inFile.getLT())
         _getit = true;
      else
         needStop = true;
      end;
      return this;
   End;

   /**
      Метод аналогичен методу [TBFile.getEQ]. Параметры пеерчисляют для текущего ключа базы в 'varargs'.

      @oparam varargs - значения полей ключа
   */
   Macro getEQ() : TBFileStream
      inFile.clear();
      var i = 0, v, p;
      while (GetParm(i+1, v))
         p = arrKeys[i];
         if (ValType(v) == V_UNDEF)
            defVal(arrKeysType[i], v);
         end;
         inFile.rec[p] = v;
         i = i + 1;
      end;
      inFile.getEQ();
      return this;
   End;

   ini();
End;

Private Class (TBFileStream) MemDBFileStream(tbFile)
   inFile = tbFile;
   front = true;
   fix = false;
   thandl = TRecHandler(inFile.TblName, inFile.getFldInfo);
   _getit = false;

   arrKeys     = TArray();
   arrKeysType = TArray();
   arrKeysSize = 0;

   Macro getCopyRec()
      var handl = TRecHandler(inFile.TblName, inFile.getFldInfo);
      copy(handl, inFile.buff);
      return handl;
   End;

   Macro ini()
      var i = 0, k = 0;
      var kInfo = inFile.GetKeyInfo();
      var fInfo = inFile.GetFldInfo();
      while (i < kInfo.size)
         if (kInfo[i] == inFile.keyNum)
            var pos = kInfo[i+2];
            arrKeys[k] = pos;
            arrKeysType[k]  = fInfo[(pos * 5) + 1];
            k = k + 1;
            break;
         end;
         i = i + 5;
      end;
      arrKeysSize = k;
   End;

   ini();
End;

Private Class (TerminalStream) ForEachStream(_func)
   var func = Lambdas.getFunc(_func);

   Macro apply(parm)
      while(true)
         var el = upstream.next();
         if(needStop) break; end;
         ExecMacro(func, el);
      End;
   End;
End;

Private Class (ForEachStream) toScreenStream()
   initForEachStream(R2M(this, "funcPrint"));
   Macro funcPrint(par)
      println(par);
   End;
End;

Private Class (ContinuedStream) ZipStream(_s1, _s2, _bifunc)
   private var bifunc = Lambdas.getFunc(_bifunc);
   private var s1 = _s1;
   private var s2 = _s2;

   Macro next()
      var e1 = s1.next;
      var e2 = s2.next;
      if (s1.needStop or s2.needStop) return stopStream(); end;
      var res = ExecMacro2(bifunc, e1, e2);
      return res;
   End;
End;

Private Class (ContinuedStream) zipWithIndexStream(_stInd)
   private var ind = -1;
   if (ValType(_StInd) == V_INTEGER)
      ind = _stInd - 1;
   end;

   Macro next()
      var el = upstream.next();
      if (needStop) return stopStream(); end;
      ind = ind + 1;
      return Tuple2(ind, el);
   End;
End;

Private Class (TerminalStream) ReduceStream(_identity, _accumulator)
   private var identity    = _identity;
   private var accumulator = Lambdas.getFunc(_accumulator);

   Macro apply(parm)
      while (true)
         var el = upstream.next();
         if (needStop) break; end;
         identity = ExecMacro2(accumulator, identity, el);
      End;
      return identity;
   End;
End;

Private Class (ReduceStream) SumStream()
   initReduceStream(0, R2M(this, "SumFunc"));

   Macro SumFunc(x, y)
      return x + y;
   End;
End;

Private Class (ReduceStream) SumByStream(_funcParm)
   initReduceStream(0, R2M(this,"SumFunc"));
   private var funcParm = _funcParm;

   Macro SumFunc(x, y)
      return x + y;
   End;

   Macro apply()
      while(true)
         var el = upstream.next();
         if(needStop) break; end;
         var x = ExecMacro2(funcParm, el);
         identity = ExecMacro2(accumulator, identity, x);
      End;
      return identity;
   End;
End;

Private Class (TerminalStream) CollectStream(collectorObj)
   private var collector = collectorObj;

   Macro apply()
      var coll = collector.create();
      while (true)
         var el = upstream.next();
         if (needStop) break; end;
         collector.accumulate(coll, el);
      end;
      return collector.finish(coll);
   End;
End;

Private Class (TerminalStream) FindFirstStream(_orElse)
   private var orElse = _orElse;

   Macro apply()
      while(true)
         var el = upstream.next();
         if (needStop) break; end;
         return el;
      end;
      return orElse;
   End;
End;

Private Class (TerminalStream) CountStream()

   Macro apply()
      var i = 0;
      while (true)
         var el = upstream.next();
         if (needStop) break; end;
         i = i + 1;
      end;
      return i;
   End;
End;

Private Class (TerminalStream) AnyMatchStream(_predicate)
   private var predicate = Lambdas.getFunc(_predicate);

   Macro apply()
      while(true)
         var el = upstream.next();
         if (needStop) break; end;
         if (ExecMacro2(predicate, el))
            return true;
         end;
      end;
      return false;
   End;
End;

Private Class (TerminalStream) NoneMatchStream(_predicate)
   private var predicate = Lambdas.getFunc(_predicate);

   Macro apply()
      while (true)
         var el = upstream.next();
         if (needStop) break; end;
         if (ExecMacro2(predicate, el))
            return false;
         end;
      end;
      return true;
   End;
End;

Private Class (TerminalStream) AllMatchStream(_predicate)
   private var predicate = Lambdas.getFunc(_predicate);

   Macro apply()
      while (true)
         var el = upstream.next();
         if (needStop) break; end;
         if (ExecMacro2(predicate, el) == false)
            return false;
         end;
      end;
      return true;
   End;
End;

Private Class (TerminalStream) MinStream(_comparator)
   private var comparator = @VariantCompare;

   if (ValType(_comparator) != V_UNDEF)
      comparator = Lambdas.getFunc(_comparator);
   end;

   Macro apply()
      var result;
      var notFirst = false;
      while(true)
         var el = upstream.next();
         if (needStop) break; end;
         if (notFirst)
            if (ExecMacro2(comparator, el, result) < 0)
               result = el;
            end;
         else
            result = el;
            notFirst = true;
         end;
      end;
      return result;
   End;
End;


Private Class (TerminalStream) MaxStream(_comparator)
   private var comparator = @VariantCompare;

   if (ValType(_comparator) != V_UNDEF)
      comparator = Lambdas.getFunc(_comparator);
   end;

   Macro apply()
      var result;
      var notFirst = false;
      while (true)
         var el = upstream.next();
         if (needStop) break; end;
         if (notFirst)
            if (ExecMacro2(comparator, el, result) > 0)
               result = el;
            end;
         else
            result = el;
            notFirst = true;
         end;
      end;
      return result;
   End;
End;

Private Class (TerminalStream) ToArrayStream()
   Macro apply()
      var result = SArray();
      var i = 0;
      while (true)
         var el = upstream.next();
         if (needStop) break; end;
         result[i] = el;
         i = i + 1;
      end;
      return result;
   End;
End;

/**
   Создает и возвращает Stream из объекта или примитива 'obj'. Если создать стрим не возможно, бросается исключение [IllegalArgumentException].
   В настоящий момент как передаваемый параметр 'obj' может выступать:
   - Массив [TArray] или его наследники.
   - Объект класса наследующего [Iterable], т.е. все коллекции из библиотеки [Collections].
   - Объект таблицы БД [TBFile] и его наследники
   - Объект БД в памяти [RUnit.MemDb].
   - Объект текстового файла типа [TStreamDoc]. В качестве передаваемых элементов - строки.
   - Примитив типа 'String'. В качестве передаваемых элементов - символы.

   Если ваш класс предполагает последовательность и вы хотите использовать стримы, реализуйте итератор и воспользуйтесь [BornStream].

*/
Macro StreamOf(obj)
   if (ValType(obj) == V_GENOBJ)
      if (IsEqClass("TArray", obj))
         return BornStream(ArrayUtils.newIterator(obj));
      elif (IsEqClass("Iterable", obj))
         return BornStream(obj.newIterator());
      elif (IsEqClass("TStreamDoc", obj))
         return BornStream(GenObject("LineFileIterator", obj));
       elif (IsEqClass("TStream", obj))
         return BornStream(GenObject("ByteFileIterator", obj));
      elif (isEqClass("TbFile", obj))
         return TBFileStream(obj);
      elif (isEqClass("MemDb", obj))
         return MemDbFileStream(obj);
      else
         return Throw(IllegalArgumentException("Не возможно создать Stream из объекта типа " + GenClassName(obj)));
      end;
   elif (ValType(obj) == V_STRING)
      return BornStream(GenObject("StringIterator", obj));
   else
      return Throw(IllegalArgumentException("Не возможно создать Stream из объекта типа " + GenClassName(obj)));
   end;
End;

/**
   Создает стрим из двух стримов 's1' и 's2' и объединяет их элементы согласно функции 'bifunc'.
*/
Macro zipStreams(s1 : ContinuedStream, s2 : ContinuedStream, bifunc)
   return ZipStream(s1, s2, bifunc);
End;

/**
   Функция-маркер для проверки загрузки библиотеки [#Stream].
*/
Macro StreamLoadedMarker()
   return 1;
End;

Private Class StringIterator(sourcestr)
   private var str = sourcestr;
   private var nextIndex = 1;
   private var len = StrLen(sourcestr);

   Macro hasNext() : Bool
      return (nextIndex <= len);
   End;

   Macro next() : String
      var s = (SubStr(str, nextIndex, 1));
      nextIndex = nextIndex + 1;
      return s;
   End;
End;

Private Class LineFileIterator(_inFile : TStreamDoc)
   private var inFile = _inFile;
   private var nextLine = null;

   Macro hasNext() : Bool
      return (ValType(nextLine) != V_UNDEF);
   End;

   Macro next() : String
      var res = nextLine;
      if (inFile.readLine(nextLine) == false)
         nextLine = null;
      end;
      return res;
   End;

   next();
End;

Private Class ByteFileIterator(_inFile : TStream)
   private var inFile = _inFile;
   private var nextByte = null;

   Macro hasNext() : Bool
      return (ValType(nextByte) != V_UNDEF);
   End;

   Macro next() : String
      var res = nextByte;
      if (inFile.read(nextByte, V_INTEGER, 1) == false)
         nextByte = null;
      end;
      return res;
   End;

   next();
End;