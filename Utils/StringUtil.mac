/**
   @package Utils

*/

import "..\\mac\\extra\\utils\\SArray.mac";
import "..\\mac\\extra\\utils\\ArrayUtil.mac";

Private Macro ifNull(val : Variant, replace : Variant) : Variant
   if(Valtype(val) == V_UNDEF)
      return replace;
   end;
   return val;
End;

Class StringBuilder()
   var str = "";
   var arr = TArray();
   var arrS  = 0;

   Macro append(ap)
      if(ValType(ap) == V_UNDEF)
         return this;
      end;
      arr[arrS] = ap;
      arrS = arrS + 1;
      return this;
   End;

   Macro toString() : String
      var i = 0;
      if(arr.size == 0) return ""; end;
      for(i, 0, arrS - 1)
         str = str + arr[i];
      end;
      return str;
   End;

   Macro printLine()
      var i = 0;
      for(i, 0, arrS - 1, 1)
         print(arr[i]);
      end;
      println();
   End;

   Macro clear()
      arr = TArray();
      arrS = 0;
      str = "";
   End;
End;


Class StringJoiner(_delim : String, _prefix : String, _posfix : String)
   var sb = StringBuilder();
   var delim   = ifNull(_delim, ", ");
   var prefix  = ifNull(_prefix, "");
   var posfix  = ifNull(_posfix, "");

   Macro joinIterable(iter)
      sb.clear();
      sb.append(prefix);
      if(iter.hasNext)
         while(true)
            sb.append(iter.next());
            if(iter.hasNext() == false) break; end;
            sb.append(delim);
         end;
      end;
      sb.append(posfix);
   End;

   Macro joinArray(arr)
      if(arr.size == 0)
         return;
      end;
      var iter = Arrays.newIterator(arr);
      joinIterable(iter);
   End;

   Macro joinSome(someIterable)
      if(GenClassName(someIterable) == "TArray")
         joinArray(someIterable);
      elif(IsEqClass("Iterable", someIterable))
         joinIterable(someIterable.newIterator());
      else
         return;
      end;
   End;

   Macro joinToString(someIterable) : String
      joinSome(someIterable);
      return sb.toString;
   End;

   Macro joinToPrint(someIterable)
      joinSome(someIterable);
      sb.printLine();
   End;
End;

Macro JoinToString(someIterable, _delim, _prefix, _postfix) : String
   return StringJoiner(_delim, _prefix, _postfix).joinToString(someIterable);
End;

Macro JoinToPrint(someIterable, _delim, _prefix, _postfix)
   StringJoiner(_delim, _prefix, _postfix).JoinToPrint(someIterable);
End;

Macro StrSplitToArr(str : String, delim : String) : SArray
   var pos;
   var stPos = 1;
   var i = -1;
   var res = SArray();
   pos = Index(str, delim);

   while(pos>0)
      i = i + 1;
      res(i) = substr(str, stPos, pos - stpos);
      stpos = pos +1;
      pos = Index(str, delim, stpos);
   end;
   i = i + 1;
   res(i) = substr(str, stpos);
   return res;
end;

Macro IndexRev(_str, _findStr, _startPos) : Integer
   var findLen = strLen(_findStr);
   var startPos = StrLen(_str);
   if(findLen == 0) return 0; end;
   if((ValType(_startPos) == V_INTEGER) and (startPos > 0))
      if(_startPos<findLen) return 0; end;
      startPos = _startPos;
   end;
   var i = 0;
   for(i, startPos - findLen + 1, 1, -1)
      if(SubStr(_str, i, findLen) == _findStr)
         return i;
      end;
   end;
   return 0;
End;

Macro isNullOrEmpty(str) : Bool
   return ((ValType(str) == V_UNDEF) or (str == ""));
End;

Macro isNullOrBlank(str) : Bool
   return ((ValType(str) == V_UNDEF) or (trim(str) == ""));
End;

Macro notNullOrEmpty(str) : Bool
   return ((ValType(str) != V_UNDEF) and (str != ""));
End;
