import "../mac/extra/RUnit/RUnit.Mac";
import "../mac/extra/utils/SArray.mac";
import "../mac/extra/utils/functions.mac";
import "../mac/extra/utils/CompareFunc.mac";
import bankinter;
import rcw;
RUnitTest.SHOW_ONLY_FAILED_UNIT_FUN = false;

// Тестовый класс для объектных коллекций
Private Class Account(_acc : String, _summ : Integer)
   var acc = _acc;
   var summ = _summ;

   Macro compareTo(othAcc : Account)
      if(acc > othAcc.acc)
         return 1;
      elif(acc < othAcc.acc)
         return -1;
      else
         if(summ > othAcc.summ)
            return 1;
         elif (summ > othAcc.summ)
            return -1;
         else
            return 0;
         end;
      end;
   End;

   Macro toString() : String
      return acc + " - " + summ;
   End;
End;

Macro compareJustAcc(acc1, acc2)
   if(acc1.acc == acc2.acc)
      return 0;
   elif(acc1.acc < acc2.acc)
      return -1;
   else
      return 1;
   end;
End;

Macro otherCompFun(a1,a2)
   return CF_ComparePrimitive(a1.acc,a2.acc);
end;

Macro otherCompFun2(a1,a2)
   return CF_ComparePrimitive(a1.summ, a2.summ);
end;

Macro equalAbs(i1, i2)
   return (abs(i1) == abs(i2));
End;

Private Macro filterFunc(el) : Bool
   return (GenCLassName(el) == "INTEGER");
end;

Private Macro mapFunc(el) : Integer
   return (el*el);
End;

private Macro reduceFunc(acc, el)
   return acc + el;
End;


Class (UnitTest) TestSArray()
   var arr;

   Macro beforeTest()
      arr = SArray();
   End;

   Macro fullfillArr()
      arr = SArray("first", 2, null, Account("4081700000000123", 100), 3, 12, Account("4081700000000666", 505), null, 2);
   End;

   Macro test_add()
      assertEquals(0, arr.size);
      arr.add(1);
      assertEquals(1, arr.size);
      arr.add(2, 0);
      assertEquals(2, arr[0]);
      assertEquals(1, arr[1]);
      assertEquals(2, arr.size);
      arr.add(18, 1);
      assertEquals(3, arr.size);
      assertArrays(arr_(2, 18, 1), arr);
   End;

   Macro test_get()
      arr = SArray(1, 2, 3);
      assertEquals(2, arr.get(1));
      //assertError(arr.get(-1));
   End;

   Macro test_push()
      arr.push("one");
      assertArrays(arr_("one"), arr);
      arr.push("two");
      assertArrays(arr_("one", "two"), arr);
   End;

   Macro test_peek()
      assertNull(arr.peek);
      arr.addAll(1,2,3);
      assertEquals(3, arr.peek);
      assertEquals(3, arr.size);
   End;

   Macro test_pop()
      arr.addAll(1, 2, 3);
      assertEquals(3, arr.pop);
      assertEquals(2, arr.pop);
      assertEquals(1, arr.pop);
      assertEquals(0, arr.size);
   End;

   Macro test_poll()
      assertNull(arr.poll);
      arr.addAll(1, 2, 3);
      assertEquals(3, arr.poll);
      assertEquals(2, arr.poll);
      assertEquals(1, arr.poll);
      assertEquals(0, arr.size);
   End;

   Macro test_indexOf()
      assertEquals(-1, arr.indexof(1));
      arr.push(null);
      assertEquals(0, arr.indexof());
      arr.push(null);
      assertEquals(0, arr.indexof());
      arr.addAll(1, 2, 1, 4);
      assertEquals(2, arr.indexof(1));
      assertEquals(3, arr.indexof(2));
   End;

   Macro test_lastindexOf()
      assertEquals(-1, arr.lastIndexof(1));
      arr.push(null);
      assertEquals(0, arr.lastIndexof(null));
      arr.push(null);
      assertEquals(1, arr.lastIndexof());
      arr.addAll(1, 2, 1, 4);
      assertEquals(4, arr.lastIndexof(1));
      assertEquals(3, arr.lastIndexof(2));
   End;

   Macro test_slice()
      assertEquals(0, arr.slice().size);
      arr.addAll(1, 2, 3);
      assertArrays(arr_(1, 2, 3), arr.slice);
      assertArrays(arr_(1, 2), arr.slice(0, 2));
      assertArrays(arr_(2, 3), arr.slice(1));

   End;

   Macro test_reverse()
      assertEquals(0, arr.reverse().size);
      arr.addAll(1, 2, 3);
      assertArrays(arr_(3, 2, 1), arr.reverse);
      assertArrays(arr_(1, 2, 3), arr.reverse);
      arr.add(4);
      assertArrays(arr_(4, 3, 2, 1), arr.reverse);
   End;

   Macro test_distinct()
      arr.addAll(1, 2, -1, 2, 3, -4, 4, 3, 0);
      assertArrays(arr_(1, 2, -1, 3, -4, 4, 0), arr.distinct);
      assertArrays(arr_(1, 2, 3, -4, 0), arr.distinct(@equalAbs));

      arr = SArray(2, 1, 1, 2, 3, 3, 3, 3, 3);
      debugbreak;
      var a = arr.distinctSort();
      assertArrays(arr_(1,2,3), a);
   End;


   Macro test_clear()
      arr.addAll(1, 2, 3);
      assertEquals(3, arr.size);
      arr.clear();
      assertEquals(0, arr.size);
   End;

   Macro test_concat()
      arr.addAll(1, 2, 3);
      var arr2 = SArray(4, 5, 6, 7);
      var arrc = arr.concat(arr2);
      assertArrays(arr_(1, 2, 3, 4, 5, 6, 7), arrc);
      assertArrays(arr_(1, 2, 3), arr);
      assertArrays(arr_(4, 5, 6, 7), arr2);
      arr.clear();
      arrc = arr.concat(arr2);
      assertArrays(arr_(4,5,6,7), arrc);
      arrc = arr2.concat(arr);
      assertArrays(arr_(4,5,6,7), arrc);
      arr2.clear();
      arrc = arr2.concat(arr2);
      assertEquals(0, arrc.size);
   End;

   Macro test_addArray()
      assertArrays(arr_(1,2,3), arr.addArray(SArray(1,2,3)));
      assertEquals(3, arr.size);
      assertArrays(arr_(1,2,3,1), arr.addArray(SArray(1)));
      assertEquals(4, arr.size);
      assertArrays(arr_(1,2,3,1), arr.addArray(SArray()));
   End;

   Macro test_join()
      var s;
      s = arr.join();
      assertEquals("", s);
      s = arr.join(",", "[", "]");
      assertEquals("[]", s);

      arr.addAll(1, 2, 3);
      s = arr.join();
      assertEquals("123", s);
      s = arr.join(", ");
      assertEquals("1, 2, 3", s);
      s = arr.join(", ", "!", "?");
      assertEquals("!1, 2, 3?", s);
   End;

   Macro test_filter()

   End;

   Macro test_map()

   End;

   Macro test_reduce()

   End;

   Macro test_foreach()

   End;

   Macro test_sort()
      arr = SArray(4, 5, 6, 5, 1, 3, 2);
      arr.sort();
      assertArrays(arr_(1, 2, 3, 4, 5, 5, 6), arr);

      var sf = CF_ObjectComparator("-summ", "acc").getFunc();
      arr = SArray(Account("123", 100), Account("124", 100), Account("123", 200), Account("124", 200));
      arr.sort(sf);
      assertEquals("123", arr[0].acc);
      assertEquals(200, arr[0].summ);
      assertEquals("124", arr[1].acc);
      assertEquals(200, arr[1].summ);
      assertEquals("123", arr[2].acc);
      assertEquals(100, arr[2].summ);
      assertEquals("124", arr[3].acc);
      assertEquals(100, arr[0].summ);
      assertTrue(false);
   End;

   Macro test_iterator()
      arr.addAll(1, 2, 3, 4, 5, 6);
      var itr = arr.newIterator();
      var a = itr.next();
      assertEquals(1, a);
      assertTrue(itr.hasNext());
      itr.remove();
      itr.next();
      itr.remove();

      arr = SArray(1, 2, 3);
      itr = arr.newIterator();
      assertTrue(itr.hasNext);
      assertEquals(1, itr.next);
      assertTrue(itr.hasNext);
      assertEquals(2, itr.next);
      assertTrue(itr.hasNext);
      assertEquals(3, itr.next);
      assertFalse(itr.hasNext);

      assertTrue(itr.hasPrev);
      assertEquals(3, itr.prev);
      assertEquals(2, itr.prev);
      assertEquals(1, itr.prev);
      assertFalse(itr.hasPrev);
      assertTrue(itr.hasNext);
   End;

   Macro test_toTarray()

   End;
End;

TestSArray;

/*
var arr = SArray;
for(var i, 0, 1000)
   arr.push(Account("ran" + Random, Random(10000)));
end;

var t0 = time();
/*
for(var ac, arr)
   if (ac.summ > 9900) println(ac); end;
end;
*/

arr = SArray(0, 20, 3, 2, 5);
var a = arr.reduce(null, accums.minind);

println(a);

*/