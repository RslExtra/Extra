/**
   @package Utils

   Утилиты для работы с датой и временем.
*/
import "..\\Mac\\Extra\\Utils\\StringUtils.mac";
import "..\\Mac\\Extra\\Utils\\SArray.mac";
import "..\\Mac\\Extra\\OOP\\Comparators.mac";

/** Singleton объект класса [TimeUtilsClass]. */
const TimeUtils = GenObject("TimeUtilsClass");
/** Singleton объект класса [LocalesClass]. */
const Locales = GenObject("LocalesClass");
//private var currentTimezone = GenGetProp(TimeZoneInfo, "utc");
private const SU = StringUtils;
private const DefaultLocale = GenObject("RuLocale");
private const DefaultTimeZone = 300;
/**
   Класс предопределнных локалей. На данный момент поддерживаются 2: RU и US.
*/
Private Class LocalesClass()
   /** Русская локаль. */
   const RU = GenObject("RuLocale");
   /** Локаль США. */
   const US = GenObject("UsLocale");
End;

private Class LocaleClass()
   var monthesI;
   var monthesR;
   var monthesShortI;
   var monthesShortR;
   var weekDays;
   var weekDaysShort;
   var AD;
   var BC;
   var AM;
   var PM;
   var sampleFirstWeekDay;

   Macro getNumWeekDay(dt)
      if (dt >= sampleFirstWeekDay)
         return mod(dt - sampleFirstWeekDay, 7) + 1;
      else
         return 7 - mod((sampleFirstWeekDay - dt - 1), 7);
      end;
   End;

   Macro getWeekDayFull(dt)
      return weekDays[getNumWeekDay(dt) - 1];
   End;

   Macro getWeekDayShort(dt)
      return weekDaysShort[getNumWeekDay(dt) - 1];
   End;

   Macro getNumWeekInMonth(dt)
      var nwd = getNumWeekDay(TimeUtils.getStartMonth(dt));
      var cwd = getNumWeekDay(dt);
      var wdim = TimeUtils.getWeekDayNumInMonth(dt);
      if (cwd < nwd)
         return wdim + 1;
      end;
      return wdim;
   End;

   Macro getNumWeekInYear(dt)
      var d = (TimeUtils.getDayOfYear(dt)-1)/7 + 1;
      var nwd = getNumWeekDay(TimeUtils.getStartYear(dt));
      var cwd = getNumWeekDay(dt);
      if (cwd < nwd)
         return d + 1;
      end;
      return d;
   End;
End;

private Class (LocaleClass) RuLocale()
   monthesI = SArray("Январь", "Февраль", "Март",
                               "Апрель", "Май", "Июнь",
                               "Июль", "Август", "Сентябрь",
                               "Октябрь", "Ноябрь", "Декабрь");
   monthesR = SArray("января", "февраля", "марта",
                               "апреля", "мая", "июня",
                               "июля", "августа", "сентября",
                               "октября", "ноября", "декабря");
   monthesShortI = SArray("Янв.", "Февр.", "Март", "Апр.", "Май", "Июнь", "Июль", "Авг.", "Сент.", "Окт.", "Нояб.", "Дек.");
   monthesShortR = SArray("янв", "фев", "мар", "апр", "мая", "июн", "июл", "авг", "сен", "окт", "ноя", "дек");
   weekDays = SArray("понедельник", "вторник", "среда", "четверг", "пятница", "суббота", "воскресенье");
   weekDaysShort = SArray("Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс");
   sampleFirstWeekDay = Date(1, 1, 1990);
   AD = "н.э.";
   BC = "до н.э.";
   AM = "AM";
   PM = "PM";
End;

private Class (LocaleClass) UsLocale()
   monthesI = SArray("January", "February", "March",
                               "April", "May", "June",
                               "July", "August", "September",
                               "October", "November", "December");
   monthesR = monthesI;
   monthesShortI = SArray("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");
   monthesShortR = monthesShortI;
   weekDays = SArray("Sunday", "Monday", "Tuesday", "Wednesday", "Friday", "Saturday");
   weekDaysShort = SArray("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat");
   sampleFirstWeekDay = Date(1, 1, 1989);
   AD = "AD";
   BC = "BC";
   AM = "AM";
   PM = "PM";
End;

/**
   Класс утилит, представлен синглтоном [TimeUtil].
*/
Private Class TimeUtilsClass()

   /**
      Возвращает дату, соответствующую первому дню месяца переданной даты 'dt', также можно указать сдвиг месяца, целое число 'monthOff'.
   */
   Macro getStartMonth(dt : Date, monthOff : Integer) : Date
      var calcDt;
      var y,m,d;
      if(ValType(monthOff) != V_INTEGER)
         monthOff = 0;
      end;
      calcDt = DateShift(dt, null, monthOff);
      DateSplit(calcDt, d, m, y);
      return Date(1, m, y);
   End;

   /**
      Возвращает дату, соответствующую последнему дню месяца переданной даты 'dt', также можно указать сдвиг месяца, целое число 'monthOff'.
   */
   Macro getEndMonth(dt : Date, monthOff : Integer) : Date
      var stDT = getStartMonth(dt, monthOff);
      var calcDt = DateShift(stDT, null, 1);
      var resDate = calcDt - 1;
      return resDate;
   End;

   /**
      Возвращает дату, соответствующую первому дню в году переданной даты 'dt', также можно указать сдвиг месяца, целое число 'yearOff'.
   */
   Macro getStartYear(dt : Date, yearOff : Integer) : Date
      var y,m,d;
      var calcDt;
      if(ValType(yearOff) != V_INTEGER)
         yearOff = 0;
      end;
      calcDt = DateShift(dt, null, null, yearOff);
      DateSplit(calcDt, d, m, y);
      return Date(1, 1, y);
   End;

   /**
      Возвращает дату, соответствующую последнему  дню в году переданной даты 'dt', также можно указать сдвиг месяца, целое число 'yearOff'.
   */
   Macro getEndYear(dt : Date, yearOff : Integer) : Date
      var stDT = getStartYear(dt, yearOff);
      var calcDt = DateShift(stDT, null, null, 1);
      return (calcDt - 1);
   End;
   /**
      Возвращает полное название для недели для даты 'dt'.
   */
   Macro getWeekDay(dt: Date, locale)
      if (Valtype(locale) == V_UNDEF)
         locale = DefaultLocale;
      end;
      return locale.getWeekDayFull(dt);
   End;

   /**
      Возвращает сокращенное название для недели для даты 'dt'.
   */
   Macro getShortWeekDay(dt: Date, locale)
      if (Valtype(locale) == V_UNDEF)
         locale = DefaultLocale;
      end;
      return locale.getWeekDayShort(dt);
   End;

   Macro getWeekDayNum(dt : Date, locale)
      if (ValType(locale) == V_UNDEF)
         locale = DefaultLocale;
      end;
      return (locale.getNumWeekDay(dt));
   End;

   Macro getDayOfYear(dt : Date)
      var y,m,d;
      DateSplit(dt, d, m, y);
      return (dt - Date(1,1, y) + 1);
   End;

   Macro getWeekDayNumInMonth(dt : Date)
      var d;
      DateSplit(dt, d, null, null);
      return (Int((d-1)/7) + 1);
   End;

   Macro getNumWeekInMonth(dt : Date, locale)
      if (ValType(locale) == V_UNDEF)
         locale = DefaultLocale;
      end;
      return (locale.getNumWeekInMonth(dt));
   End;

   Macro getNumWeekInYear(dt : Date, locale)
      if (ValType(locale) == V_UNDEF)
         locale = DefaultLocale;
      end;
      return (locale.getNumWeekInYear(dt));
   End;
End;


/**
   Класс обертка для даты/времени. В конструктор передаются аргументы: дата '_dt' и время '_tm' временная зона '_timezone'.
   После инициализации в полях класса становятся доступными числовые временные значения.
*/
Class TU_DateTime(_dt, _tm, _tz)
   /** Год */
   var year    = 0;
   /** Месяц */
   var month   = 0;
   /** День */
   var day     = 0;
   /** Час */
   var hour    = 0;
   /** Минута */
   var minute  = 0;
   /** Секунда */
   var sec     = 0;
   /** Миллисекунда */
   var msec    = 0;
   /** Временная зона */
   var timezone = 0;

   /**
      Возвращает дату.
   */
   Macro getDate() : Date
      return date(day,month, year);
   End;

   /**
      Возвращает время.
   */
   Macro getTime()
      return time(hour, minute, sec, msec/10);
   End;

   /**
      Устанавливате дату 'dt'.
   */
   Macro setDate(dt : Date)
      if (ValType(dt) != V_DATE)
         return Throw(IllegalArgumentException());
      end;
      DateSplit(dt, day, month, year);
   End;

   /**
      Устанавливате время 'tm'.
   */
   Macro setTime(tm : Time)
      if (ValType(tm) != V_DATE)
         return Throw(IllegalArgumentException());
      end;
      TimeSplit(tm, hour, minute, sec, msec);
      msec = msec * 10;
   End;

   /**
      Прибавляет 'y' лет.
   */
   Macro plusYears(y : Integer)
      year = year + 1;
      return this;
   End;

   /**
      Прибавляет 'm' месяцев.
   */
   Macro plusMonthes(m : Integer)
      var newDate = DateShift(Date(day, month, year), null, m);
      setDate(newDate);
      return this;
   End;

   /**
      Прибавляет 'd' дней.
   */
   Macro plusDays(d : Integer)
      setDate(date(day, month, year) + d);
      return this;
   End;

   /**
      Прибавляет 'h' часов.
   */
   Macro plusHours(h : Integer)
      var sumh = hour + h;
      if (sumh >= 0)
         if (sumh < 24)
            hour = sumh;
         else
            var d = sumh/24;
            hour = mod(sumh, 24);
            setDate(date(day, month, year)+d);
         end;
      else
         d = (-sumh)/24 + 1;
         hour = 24 - mod((-sumh), 24);
         setDate(date(day, month, year) - d);
      end;
      return this;
   End;

   /**
      Прибавляет 'm' минут.
   */
   Macro plusMinutes(m : Integer)
      var summ = minute + m;
      if (summ >= 0)
         if (summ < 60)
            minute = summ;
         else
            var h = summ/60;
            minute = mod(summ, 60);
            plusHours(h);
         end;
      else
         h = (-summ)/60 + 1;
         minute = 60 - mod((-summ), 60);
         plusHours(-h);
      end;
      return this;
   End;

   /**
      Прибавляет 's' секунд.
   */
   Macro plusSeconds(s : Integer)
      var sums = sec + s;
      if (sums >= 0)
         if (sums < 60)
            sec = sums;
         else
            var m = sums/60;
            sec = mod(sums, 60);
            plusMinutes(m);
         end;
      else
         m = (-sums)/60 + 1;
         sec = 60 - mod((-sums), 60);
         plusMinutes(-m);
      end;
      return this;
   End;

   /**
      Прибавляет 'ms' миллисекунд.
   */
   Macro plusMilliSeconds(ms : Integer)
      var summs = msec + ms;
      if (summs >= 0)
         if (summs < 1000)
            msec = summs;
         else
            var s = summs/1000;
            msec = mod(summs, 1000);
            plusSeconds(s);
         end;
      else
         s = (-summs)/1000 + 1;
         msec = 1000 - mod((-summs), 1000);
         plusSeconds(-s);
      end;
      return this;
   End;

   /**
      Прибавляет время 'tm'.
   */
   Macro plusTime(tm : Time)
      var h, m, s, ms;
      TimeSplit(tm, h, m, s, ms);
      ms = ms * 10;
      plusHours(h);
      plusMinutes(m);
      plusSeconds(s);
      plusMilliSeconds(ms);
      return this;
   End;

   /**
      Отнимает время 'tm'.
   */
   Macro minusTime(tm : Time)
      var h, m, s, ms;
      TimeSplit(tm, h, m, s, ms);
      ms = ms * 10;
      plusHours(-h);
      plusMinutes(-m);
      plusSeconds(-s);
      plusMilliSeconds(-ms);
      return this;
   End;

   /**
      Возвращает новый экземпляр [TU_DateTime] соответствующий временной зоне 'tz'.
   */
   Macro inTimeZone(tz) : TU_DateTime
      if (ValType(tz) != V_INTEGER)
         tz = DefaultTimeZone;
      end;
      var res = TU_DateTime(date(day,month, year), time(hour, minute, sec, msec/10), tz);
      if (tz == timezone)
         return res;
      end;
      var offs = tz - timezone;
      var h = offs/100;
      var m = mod(offs, 100);
      res.plusHours(h);
      res.plusMinutes(m);
      return res;
   End;

   /**
      Возвращает RSL DtTm.
   */
   Macro getDtTm()
      return DtTm(date(day,month, year), time(hour, minute, sec, msec/10));
   End;

   /**
      Возвращает временную зону в формате RFC 822 ("+0300");
   */
   Macro getRFCTimeZone()
      if (timezone < 0)
         return "-" + SU.padStart(timezone, 4, "0");
      else
         return "+" + SU.padStart(timezone, 4, "0");
      end;
   End;

   /**
      Возвращает временную зону в формате ISO 8601 ("+03:00");
   */
   Macro getISOTimeZone() : String
      if (timezone < 0)
         return "-" + SU.padStart(timezone/100, 2, "0") + ":" + SU.padStart(mod(timezone, 100), 2, "0");
      else
         return "+" + SU.padStart(timezone/100, 2, "0") + ":" + SU.padStart(mod(timezone, 100), 2, "0");
      end;
   End;

   /**
      Возвращает временную зону в GMT ("GMT+03:00");
   */
   Macro getGMTTimeZone() : String
      return "GMT" + getISOTimeZone();
   End;

   /**
      Возвращает `true`, если текущая дата равна 'oth'
   */
   Macro equals(oth) : Bool
      if (IsEqClass("TU_DATETIME", oth) == false)
         return false;
      end;
      for (var i, 0, GenNumProps(this)-1, 1)
         if (this[i] != oth[i])
            return false;
         end;
      end;
      return true;
   End;

   Macro toString() : String
      return String(DtTm(date(day,month, year), time(hour, minute, sec, msec/10)));
   End;

   Private Macro ini(dt, tm, tz)
      if (ValType(dt) == V_DATE)
         DateSplit(dt, day, month, year);
      elif (ValType(dt) == V_DTTM)
         var td, tt;
         DtTmSplit(dt, td, tt);
         DateSplit(td, day, month, year);
         TimeSplit(tt, hour, minute, sec, msec);
         msec = msec * 10;
      end;
      if (ValType(tm) == V_TIME)
         TimeSplit(tm, hour, minute, sec, msec);
         msec = msec * 10;
      end;
      if (ValType(tz) == V_INTEGER)
         timezone = tz;
      else
         timezone = DefaultTimeZone;
      end;
   End;

   ini(_dt, _tm, _tz);
End;

Private Macro TU_StrIsNumber(s)
   for (var i, 1, StrLen(s), 1)
      var c = CodeFor(SubStr(s, i, 1));
      if ((c < 48) or (c > 57))
         return false;
      end;
   end;
   return true;
End;

Private Class Part()
   var sign = "";
   var pattern = "";
   var minVal  = 0;
   var maxVal  = 0;
   var maxSize = 1;
   var applyOrder = 0;
   var parsedValue = null;

   Macro getValidVal(str)
      if (TU_StrIsNumber(str) == false)
         return null;
      end;
      var v = Int(str);
      if ((v >= minVal) and (v <= maxVal))
         return v;
      end;
   End;

   Macro parseFloatVal(outVal, str : String, fromInd : Integer) : Integer
      var pl = StrLen(pattern);
      var p, v;
      if (maxSize > pl)
         for (var i, maxSize, 1, -1)
            p = SubStr(str, fromInd, i);
            v = getValidVal(p);
            if (ValType(v) == V_INTEGER)
               SetParm(1, v);
               return fromInd + i;
            end;
         end;
         return 0;
      else
         p = SubStr(str, fromInd, pl);
         v = Int(p);
         SetParm(1, v);
         return fromInd + pl;
      end;
   End;

   // Читает шаблон
   Macro readFormat(str, fromInd) : Integer
      for (var i, fromInd, StrLen(str), 1)
         var s = SubStr(str, i, 1);
         if (s == sign)
            pattern = pattern + s;
         else
            return i;
         end;
      end;
      return i+1;
   End;

   // Пытается получить значение
   Macro tryParse(dt, str, fromInd, frm)
      return fromInd + StrLen(pattern);
   End;

   // Применяет эффект и возвращает результирующую дату
   Macro apply(dt, frm) : TU_DateTime
      return dt;
   End;

   // Возращает строковый результат
   Macro getString(dt) : String
      return pattern;
   End;

   // Проверяет на валидность шаблон и корректирует его, если возможно.
   Macro isValid() : Bool
      return true;
   End;
End;

Private Class (Part) TextPart()
   pattern = "";

   Macro readFormat(str, fromInd) : Integer
      var i = fromInd;
      while (i <= StrLen(str))
         var s = SubStr(str, i, 1);
         var f = ExecMacro2("getPart", s);
         if (isEqClass("TextPart", f))
            pattern = pattern + s;
         else
            break;
         end;
         i = i + 1;
      end;

      return i;
   End;

   Macro getString(dt)
      return pattern;
   End;
End;

Private Class (Part) CommentPart()
   pattern = "";

   Macro readFormat(str, fromInd) : Integer
      var i = fromInd + 1;
      if (SubStr(str, i, 1) == "'")
         pattern = "'";
         return i + 1;
      end;
      while (i < strLen(str))
         var s = SubStr(str, i, 1);
         if (s == "'")
            if (SubStr(str, i+1, 1) == "'")
               pattern = pattern + s;
               i = i + 1;
            else
               break;
            end;
         else
            pattern = pattern + s;
         end;
         i = i + 1;
      end;
      return i + 1;
   End;

   Macro getString(dt)
      return pattern;
   End;
End;

Private Class (Part) DatePart()

End;

Private Class (DatePart) YearPart()
   sign = "y";
   pattern = "";

   Macro getString(dt)
      if (pattern == "yy")
         var y = String(mod(dt.year, 100));
         return SU.padStart(y, 2, "0");
      else
         return SU.padStart(dt.year, StrLen(pattern), "0");
      end;
   End;

   Macro tryParse(dt, str, fromInd : Integer)
      var res;
      if (pattern == "yy")
         res = SubStr(str, fromInd, 2);
         res = Int(res);
         if (res <= 80)
            res = 2000 + res;
         else
            res = 1900 + res;
         end;
         parsedValue = res;
         return fromInd + 2;
      else
         res = Substr(str, fromInd, StrLen(pattern));
         res = Int(res);
         parsedValue = res;
         return fromInd + StrLen(pattern);
      end;
      return 0;
   End;

   Macro apply(dt, frm)
      dt.year = parsedValue;
      return dt;
   End;

   Macro isValid()
      if ((pattern == "yyy") or (pattern == "y")) pattern = "yyyy"; end;
      return true;
   End;
End;

Private Class (DatePart) MonthPart()
   sign = "M";
   pattern = "";

   Macro getString(dt, frm)
      var m = String(dt.month);
      if (pattern == "M")
         return m;
      elif (pattern == "MM")
         return SU.padStart(m, 2, "0");
      elif (pattern == "MMM")
         return frm.locale.monthesShortR[dt.month-1];
      elif (pattern == "MMMM")
         return frm.locale.monthesR[dt.month-1];
      end;
   End;

   Macro tryParse(dt, str, fromInd : Integer, frm)
      var i, s, p, ind;
      if (pattern == "M")
         var s1 = SubStr(str, fromInd, 1);
         var s2 = SubStr(str, fromInd+1, 1);
         if (TU_StrIsNumber(s2))
            parsedValue = Int(s1+s2);
            return fromInd + 2;
         else
            parsedValue = Int(s1);
            return fromInd + 1;
         end;
      elif (pattern == "MM")
         parsedValue = Int(SubStr(str, fromInd, 2));
         return fromInd + 2;
      elif (pattern == "MMM")
         for (i, fromInd, StrLen(str))
            s = SubStr(str, i, 1);
            p = SubStr(str, fromInd, i-fromInd + 1);
            if ((s == " ") or (s == ".") or (TU_StrIsNumber(s)))
               return i;
            end;
            ind = frm.locale.monthesShortR.indexOf(p, @CF_StrEqualsIgnoreCase);
            if (ind >= 0)
               parsedValue = ind + 1;
               return i+1;
            end;
         end;
      elif (pattern == "MMMM")
         for ( i, fromInd, StrLen(str))
            s = SubStr(str, i, 1);
            p = SubStr(str, fromInd, i-fromInd + 1);
            if ((s == " ") or (s == ".") or (TU_StrIsNumber(s)))
               return i;
            end;
            ind = frm.locale.monthesR.indexOf(p, @CF_StrEqualsIgnoreCase);
            if (ind >= 0)
               parsedValue = ind + 1;
               return i+1;
            end;
         end;
      end;
      return 0;
   End;

   Macro apply(dt, frm)
      dt.month = parsedValue;
      return dt;
   End;

   Macro isValid()
      if (StrLen(pattern) > 4) pattern = "MMMM"; end;
      return true;
   End;
End;

Private Class (DatePart) MonthPartCI()
   sign = "L";
   pattern = "";

   Macro getString(dt, frm)
      var m = String(dt.month);
      if (pattern == "L")
         return m;
      elif (pattern == "LL")
         return SU.padStart(m, 2, "0");
      elif (pattern == "LLL")
         return frm.locale.monthesShortI[dt.month-1];
      elif (pattern == "LLLL")
         return frm.locale.monthesI[dt.month-1];
      end;
   End;

   Macro tryParse(dt, str, fromInd : Integer, frm)
      var res;
      var i, s, p, ind;
      if (pattern == "L")
         var s1 = SubStr(str, fromInd, 1);
         var s2 = SubStr(str, fromInd+1, 1);
         if (TU_StrIsNumber(s2))
            parsedValue = Int(s1+s2);
            return fromInd + 2;
         else
            parsedValue = Int(s1);
            return fromInd + 1;
         end;
      elif (pattern == "LL")
         parsedValue = Int(SubStr(str, fromInd, 2));
         return fromInd + 2;
      elif (pattern == "LLL")
         for (i, fromInd, StrLen(str))
            s = SubStr(str, i, 1);
            p = SubStr(str, fromInd, i-fromInd + 1);
            if ((s == " ") or (s == ".") or (TU_StrIsNumber(s)))
               return i;
            end;
            ind = frm.locale.monthesShortI.indexOf(p, @CF_StrEqualsIgnoreCase);
            if (ind >= 0)
               parsedValue = ind + 1;
               return i+1;
            end;
         end;
      elif (pattern == "LLLL")
         for (i, fromInd, StrLen(str))
            s = SubStr(str, i, 1);
            p = SubStr(str, fromInd, i-fromInd + 1);
            if ((s == " ") or (s == ".") or (TU_StrIsNumber(s)))
               return i;
            end;
            ind = frm.locale.monthesI.indexOf(p, @CF_StrEqualsIgnoreCase);
            if (ind >= 0)
               parsedValue = ind + 1;
               return i+1;
            end;
         end;
      end;
      return 0;
   End;

   Macro apply(dt, frm)
      dt.month = parsedValue;
      return dt;
   End;

   Macro isValid()
      if (StrLen(pattern) > 4) pattern = "LLLL"; end;
      return true;
   End;

End;


Private Class (DatePart) WeekDayPart()
   sign = "E";
   pattern = "";

   Macro getString(dt, frm)
      if (pattern == "E")
         return TimeUtils.getShortWeekDay(dt.getDate, frm.locale);
      elif (pattern == "EEEE")
         return TimeUtils.getWeekDay(dt.getDate, frm.locale);
      end;
   End;

   Macro tryParse(dt, str, fromInd : Integer, frm)
      var res;
      if (pattern == "E")
         for (var i, fromInd, StrLen(str))
            var s = SubStr(str, i, 1);
            var p = SubStr(str, fromInd, i-fromInd + 1);
            if ((s == " ") or (s == ".") or (TU_StrIsNumber(s)))
               return i;
            end;
            if (frm.locale.weekDaysShort.contains(p, @CF_StrEqualsIgnoreCase))
               return i+1;
            end;
         end;
      elif (pattern == "EEEE")
         for (i, fromInd, StrLen(str))
            s = SubStr(str, i, 1);
            p = SubStr(str, fromInd, i-fromInd + 1);
            if ((s == " ") or (s == "."))
               return i;
            end;
            if (frm.locale.weekDays.contains(p, @CF_StrEqualsIgnoreCase))
               return i+1;
            end;
         end;
      end;
      return 0;
   End;

   Macro isValid()
      if (StrLen(pattern) < 4)
         pattern = "E";
      else
         pattern = "EEEE";
      end;
      return true;
   End;
End;

Private Class (DatePart) DayInWeekPart()
   sign       = "u";
   pattern    = "";
   maxSize    = 2;
   minVal     = 1;
   maxVal     = 7;
   applyOrder = 15;

   Macro getString(dt, frm)
      return TimeUtils.getWeekDayNum(dt.getDate, frm.locale);
   End;

   Macro tryParse(dt, str, fromInd : Integer, frm)
      var res;
      return parseFloatVal(parsedValue, str, fromInd);
   End;

   Macro apply(dt, frm)
      for (var p, frm.parts)
         if (IsEqClass("WeekInYearPart", p))
            var w = p.parsedValue;
            var y = dt.year;
            if ((ValType(w) == V_INTEGER))
               var fd = TimeUtils.getStartYear(Date(1,1,y));
               var fdn = TimeUtils.getWeekDayNum(fd, frm.locale);
               var ofs = parsedValue - fdn;
               var ws = fd + (w-1)*7;
               var resD = ws + ofs;
               dt.SetDate(resD);
            end;
         end;
      end;
      return dt;
   End;

   Macro isValid()
      return true;
   End;
End;

Private Class (DatePart) DayPart()
   sign = "d";
   pattern = "";
   minVal = 1;
   maxVal = 31;
   maxSize = 2;

   Macro getString(dt)
      return SU.padStart(dt.day, StrLen(pattern), "0");
   end;

   Macro tryParse(dt, str, fromInd : Integer)
      return parseFloatVal(parsedValue, str, fromInd);
   End;

   Macro apply(dt, frm)
      dt.day = parsedValue;
      return dt;
   End;
End;

Private Class (DatePart) DayInYearPart()
   sign = "D";
   pattern = "";
   minVal = 1;
   maxVal = 366;
   maxSize = 3;
   applyOrder = 13;

   Macro getString(dt)
      return SU.padStart((dt.getDate() - Date(1, 1, dt.year) + 1), StrLen(pattern), "0");
   End;

   Macro tryParse(dt, str, fromInd : Integer)
      return parseFloatVal(parsedValue, str, fromInd);

   End;

   Macro apply(dt, frm)
      if (ValType(parsedValue) != V_UNDEF)
         dt.setDate(Date(1, 1, dt.year) + parsedValue - 1);
      end;
      return dt;
   End;
End;

Private Class (DatePart) EraPart()
   sign = "G";
   pattern = "";
   minVal = 0;
   maxVal = 0;
   maxSize = 2;

   Macro getString(dt, frm)
      if (dt.getDate() < date(0,0,0))
         return frm.locale.BC;
      else
         return frm.locale.AD;
      end;
   end;

   Macro tryParse(dt, str, fromInd : Integer, frm)
      var ad = frm.locale.AD;
      var bc = frm.locale.BC;
      var v1 = SubStr(str, fromInd, StrLen(frm.locale.AD));
      var v2 = SubStr(str, fromInd, StrLen(frm.locale.BC));

      if (StrLwr(v1) == StrLwr(frm.locale.AD))
         return fromInd +  StrLen(frm.locale.AD);
      elif (StrLwr(v2) == StrLwr(frm.locale.BC))
         dt.year = -dt.year;
         return fromInd +  StrLen(frm.locale.BC);
      end;
      return 0;
   End;

   Macro isValid()
      if (StrLen(pattern) > 1) pattern = "G"; end;
      return true;
   End;
End;

Private Class (DatePart) WeekInYearPart()
   sign = "w";
   pattern = "";
   minVal = 1;
   maxVal = 53;
   maxSize = 2;
   applyOrder = 14;

   Macro getString(dt, frm)
      return SU.padStart(TimeUtils.getNumWeekInYear(dt.getDate, frm.locale), StrLen(pattern), "0");
   end;

   Macro tryParse(dt, str, fromInd : Integer)
      return parseFloatVal(parsedValue, str, fromInd);
   End;

   Macro isValid()
      return true;
   End;
End;

Private Class (Part) TimePart()
End;

Private Class (TimePart) HourPart()
   sign = "H";
   pattern = "";
   minVal = 0;
   maxVal = 23;
   maxSize = 2;

   Macro getString(dt, frm)
      return SU.padStart(dt.hour, StrLen(pattern), "0");
   end;

   Macro tryParse(dt, str, fromInd : Integer, frm)
      return parseFloatVal(parsedValue, str, fromInd);
   End;

   Macro apply(dt, frm)
      if (ValType(parsedValue) != V_UNDEF)
         dt.hour = parsedValue;
      end;
      return dt;
   End;
End;

Private Class (TimePart) Hour12Part()
   sign       = "h";
   pattern    = "";
   minVal     = 1;
   maxVal     = 12;
   maxSize    = 2;
   applyOrder = 21;     // after ampm

   Macro getString(dt, frm)
      var h = dt.hour;
      h = mod(h, 12);
      if (h == 0)
         h = 12;
      end;
      return SU.padStart(h, StrLen(pattern), "0");
   end;

   Macro tryParse(dt, str, fromInd : Integer, frm)
      return parseFloatVal(parsedValue, str, fromInd);
   End;

   Macro apply(dt, frm)
      if (ValType(parsedValue) != V_UNDEF)
         var offs = 0;
         var ampm;
         for (var p, frm.parts)
            if (IsEqClass("AMPMPart", p))
               ampm = p.parsedValue;
            end;
         end;
         if (ValType(ampm) == V_UNDEF)
            dt.hour = parsedValue;
         elif (ampm)
            if (parsedValue < 12)
               dt.hour = parsedValue + 12;
            else
               dt.hour = parsedValue;
            end;
         else
            if (parsedValue == 12)
               dt.hour = 0;
            end;
         end;
      end;
      return dt;
   End;
End;

Private Class (TimePart) MinutePart()
   sign = "m";
   pattern = "";
   minVal = 0;
   maxVal = 59;
   maxSize = 2;

   Macro getString(dt)
      return SU.padStart(dt.minute, StrLen(pattern), "0");
   end;

   Macro tryParse(dt, str, fromInd : Integer)
      return parseFloatVal(parsedValue, str, fromInd);
   End;

   Macro apply(dt, frm)
      if (ValType(parsedValue) != V_UNDEF)
         dt.minute = parsedValue;
      end;
      return dt;
   End;

End;

Private Class (TimePart) SecondPart()
   sign = "s";
   pattern = "";
   minVal = 0;
   maxVal = 59;
   maxSize = 2;

   Macro getString(dt)
      return SU.padStart(dt.sec, StrLen(pattern), "0");
   end;

   Macro tryParse(dt, str, fromInd : Integer)
      return parseFloatVal(parsedValue, str, fromInd);
   End;

   Macro apply(dt, frm)
      if (ValType(parsedValue) != V_UNDEF)
         dt.sec = parsedValue;
      end;
      return dt;
   End;
End;

Private Class (TimePart) MilliSecondPart()
   sign = "S";
   pattern = "";
   minVal = 0;
   maxVal = 999;
   maxSize = 3;

   Macro getString(dt)
      return SU.padStart(dt.msec, StrLen(pattern), "0");
   end;

   Macro tryParse(dt, str, fromInd : Integer)
      return parseFloatVal(parsedValue, str, fromInd);
   End;

   Macro apply(dt, frm)
      if (ValType(parsedValue) != V_UNDEF)
         dt.msec = parsedValue;
      end;
      return dt;
   End;
End;

Private Class (DatePart) AMPMPart()
   sign = "a";
   pattern = "";
   minVal = 0;
   maxVal = 0;
   maxSize = 2;
   applyOrder = 20;

   Macro getString(dt, frm)
      if (dt.hour >= 12)
         return frm.locale.PM;
      else
         return frm.locale.AM;
      end;
   end;

   Macro tryParse(dt, str, fromInd : Integer, frm)
      var ad = frm.locale.AM;
      var bc = frm.locale.PM;
      var v1 = SubStr(str, fromInd, StrLen(frm.locale.AM));
      var v2 = SubStr(str, fromInd, StrLen(frm.locale.PM));

      if (StrLwr(v1) == StrLwr(frm.locale.AM))
         parsedValue = false;
         return fromInd +  StrLen(frm.locale.AM);
      elif (StrLwr(v2) == StrLwr(frm.locale.PM))
         parsedValue = true;
         return fromInd +  StrLen(frm.locale.PM);
      end;
      return 0;
   End;

   Macro apply(dt, frm)
      return dt;
   End;

   Macro isValid()
      if (StrLen(pattern) > 1) pattern = "a"; end;
      return true;
   End;
End;


Private Class (TimePart) TimeZoneRFCPart()
   sign = "Z";
   pattern = "";

   Macro getString(dt, frm)
      var TZ = frm.timezone;
      if (ValType(TZ) == V_UNDEF)
         return dt.getRFCTimeZone();
      end;
      var s = "+";
      if (TZ < 0)
         s = "-";
         TZ = -TZ;
      end;
      return s + SU.padStart(TZ, 4, "0");
   end;

   Macro tryParse(dt, str, fromInd : Integer, frm)
      var z = "";
      var s = SubStr(str, fromInd, 1);
      var p;
      if (s == "-")
         p = SubStr(str, fromInd + 1, 4);
      elif (s == "+")
         p = SubStr(str, fromInd + 1, 4);
      else
         p = SubStr(str, fromInd, 4);
      end;
      parsedValue = Int(s + p);
      if (TU_StrIsNumber(s))
         return fromInd + 5;
      else
         return fromInd + 6;
      end;
      OnError
         return 0;
   End;

   Macro apply(dt, frm)
      if (ValType(parsedValue) != V_UNDEF)
         dt.timezone = parsedValue;
      end;
      return dt;
   End;

   Macro isValid()
      pattern = "Z";
      return true;
   End;
End;

Private Class (TimePart) TimeZoneGMTPart()
   sign = "z";
   pattern = "";

   Macro getString(dt, frm)
      return dt.getGMTTimeZone();
   end;

   Macro tryParse(dt, str, fromInd : Integer, frm)
      var z = "";
      var s = SubStr(str, fromInd, 1);
      var p;
      if (s == "-")
         p = SubStr(str, fromInd + 1, 4);
      elif (s == "+")
         p = SubStr(str, fromInd + 1, 4);
      else
         p = SubStr(str, fromInd, 4);
      end;
      parsedValue = Int(s + p);
      if (TU_StrIsNumber(s))
         return fromInd + 5;
      else
         return fromInd + 6;
      end;
      OnError
         return 0;
   End;

   Macro apply(dt, frm)
      if (ValType(parsedValue) != V_UNDEF)
         dt.timezone = parsedValue;
      end;
      return dt;
   End;

   Macro isValid()
      pattern = "z";
      return true;
   End;
End;

Private Class (TimePart) TimeZoneISOPart()
   sign = "X";
   pattern = "";

   Macro getString(dt, frm)
      if (pattern == "X")
         return SubStr(dt.getRFCTimeZone(), 1, 3);
      elif (pattern == "XX")
         return dt.getRFCTimeZone();
      elif (pattern == "XXX")
         return dt.getISOTimeZone();
      end;
      return 0;
   end;

   Macro tryParse(dt, str, fromInd : Integer, frm)
      var z = "";
      var s = SubStr(str, fromInd, 1);
      if ((s != "+") and (s != "-"))
         return 0;
      end;

      var p, c;
      if (pattern == "X")
         p = SubStr(str, fromInd + 1, 2);
         parsedValue = Int(s + SU.padEnd(p, 4, "0"));
         return fromInd + 3;
      elif (pattern == "XX")
         p = SubStr(str, fromInd + 1, 4);
         parsedValue = Int(p);
         return fromInd + 5;
      elif (pattern == "XXX")
         p = SubStr(str, fromInd + 1, 5);
         parsedValue = Int(s + SubStr(p, 1, 2) + SubStr(p, 4, 2));
         return fromInd + 6;
      end;
      OnError
         return 0;
   End;

   Macro apply(dt, frm)
      if (ValType(parsedValue) != V_UNDEF)
         dt.timezone = parsedValue;
      end;
      return dt;
   End;

   Macro isValid()
      if (StrLen(pattern) > 3) pattern = "XXX"; end;
      return true;
   End;
End;


Private Macro getPart(s)
   var prt;
   if (s == "y")
      prt = YearPart();
   elif (s == "M")
      prt = MonthPart();
   elif (s == "L")
      prt = MonthPartCI();
   elif (s == "d")
      prt = DayPart();
   elif (s == "D")
      prt = DayInYearPart();
   elif (s == "H")
      prt = HourPart();
   elif (s == "h")
      prt = Hour12Part();
   elif (s == "a")
      prt = AMPMPart();
   elif (s == "m")
      prt = MinutePart();
   elif (s == "s")
      prt = SecondPart();
   elif (s == "S")
      prt = MilliSecondPart();
   elif (s == "E")
      prt = WeekDayPart();
   elif (s == "u")
      prt = DayInWeekPart();
   elif (s == "w")
      prt = WeekInYearPart();
   elif (s == "G")
      prt = EraPart();
   elif (s == "z")
      prt = TimeZoneGMTPart();
   elif (s == "Z")
      prt = TimeZoneRFCPart();
   elif (s == "X")
      prt = TimeZoneISOPart();
   elif (s == "'")
      prt = CommentPart();
   else
      prt = TextPart();
   end;
   return prt;
End;

Class (Exception) ParseDateException(detailMessage : String)
   initException(detailMessage);
End;

Private Macro PartsCompare(p1, p2)
   var o1 = p1.applyOrder;
   var o2 = p2.applyOrder;
   if (ValType(o1) == V_UNDEF)
      o1 = 0;
   end;
   if (ValType(o2) == V_UNDEF)
      o2 = 0;
   end;
   return CF_ComparePrimitive(o1, o2);
End;

/**
   Класс временного формата. В конструктор предается один параметр: маска формата '_pattern'.
*/
Class TU_DateFormat(_pattern, _locale)
   var pattern          = _pattern;
   var locale           = _locale;
   var timezone         = null;
   var parts            = SArray();
   var applyQueue       = null;
   var passError        = false;
   /**
      Устанавливает временную зону 'tz' (например 1000 для Владивостока).
   */
   Macro setTimeZone(tz : Integer)
      timezone = tz;
      return this;
   End;

   Macro setPassError(pass : Bool)
      passError = pass;
      return this;
   End;

   Private Macro addPart(part)
      if (part.pattern != "")
         parts[parts.size] = part;
      end;
   End;

   /*
      Возвращает строковое представления согласно маске дате/времени типа [TU_DateTime] 'dt'.
   */
   Private Macro dateTimeToString(dt) : String
      var resDt = dt;
      if (ValType(timezone) != V_UNDEF)
         resDt = dt.inTimeZone(timezone);
      end;
      var res = "";
      for(var p, parts)
         res = res + p.getString(dt, this);
      end;
      return res;
   End;

   /*
      Принимает параметр типа [Date] 'dt' и возвращает строковое представление согласно маске.
   */
   Private Macro dateToString(dt : Date) : String
      return dateTimeToString(TU_DateTime(dt));
   End;

   /*
      Принимает параметр типа [Time] 'tm' и возвращает строковое представление согласно маске.
   */
   Private Macro timeToString(tm : Time) : String
      return dateTimeToString(TU_DateTime(null, tm));
   End;

   /*
      Возвращает объект типа [TU_DateTime] преобразованного из строки 'str' согласно маске.
   */
   Private Macro stringToDateTime(str : String)
      var dt = TU_DateTime();
      var i = 1;
      for(var p, parts)
         i = p.tryParse(dt, str, i, this);
         if (i <= 0) // Ошибка
            if (not(passError))
               return Throw(ParseDateException("Не возможно распарсить дату: " + str));
            else
               dt.setDate(Date()).setTime(time());
               return dt;
            end;
         end;
      end;
      for (p, applyQueue)
         dt = p.apply(dt, this);
      end;
      if (ValType(timezone) != V_UNDEF)
         dt = dt.inTimeZone(timezone);
      end;
      return dt;

      OnError
         RunError("Ошибка преобразования строки в дату : " + str + " -> ???");
   End;

   Private Macro stringToDate(str : String)
     return stringToDateTime(str).getDate();
   End;

   Private Macro stringToTime(str : String)
      return stringToDateTime(str).getTime();
   End;

   /**
      Возвращает строковое представления согласно шаблону для 'dt'.

      Входной параметр 'dt' может являться:
         - Датой типа V_DATE
         - Временем типа V_TIME
         - RSL типом V_DTTM
         - Объектом типа [TU_DATETIME]
   */
   Macro format(dt) : String
      if (isEqClass("TU_DATETIME",dt))
         return dateTimeToString(dt);
      elif ((ValType(dt) == V_DTTM) or (ValType(dt) == V_DATE))
         dt = TU_DATETIME(dt, null);
         return dateTimeToString(dt);
      elif (ValType(dt) == V_TIME)
         dt = TU_DATETIME(null, dt);
         return dateTimeToString(dt);
      else
         return Throw(IllegalArgumentException("Не верный тип даты"));
      end;
   End;

   /**
      Парсит строку 'str' и возвращает объект типа [TU_DATETIME]. Получить дату и\или можно методами [TU_DATETIME.getDate], [TU_DATETIME.getTime]
      [TU_DATETIME.getDtTm].
   */
   Macro parse(str : String)
      return stringToDateTime(str);
   End;


   Private Macro ini()
      var i = 1;
      var prt;
      var r;
      while (i <= StrLen(pattern))
         var s = SubStr(pattern, i, 1);
         prt = getPart(s);
         r = prt.readFormat(pattern, i);
         if (r > 0)
            i = r;
            addPart(prt);
         else
            i = i + 1;
         end;
      end;
      if (ValType(locale) == V_UNDEF)
         locale = DefaultLocale;
      end;
      for (prt, parts)
         if (Not(prt.isValid()))
            return Throw(IllegalArgumentException("Не верный паттерн: " + pattern + " на участке " + prt.pattern));
         end;
      end;

      applyQueue = parts.slice().sort(@PartsCompare);
   End;


   ini();
End;
/*
var formatt = TU_DateFormat("yyyy-MM-dd'T'HH:mm:ss.S");
var form2 = TU_DateFormat("yy-M-d H:m:s.S");
var d = formatt.StringToDateTime("2014-12-09T13:50:51.644000Z");

var t = formatt.dateTimeToString(d);

var d2 = form2.StringToDateTime("19-3-31 22:54:2.960");
println(form2.dateTimeToString(TU_DateTime(date, time)));
*/
//println(d.getDateTime);
//println(t);

