import "..\\mac\\extra\\RUnit\\RUnit.Mac";
import "..\\mac\\extra\\Collections\\Collections.Mac";
RUnitTest.SHOW_SUCCEED_FUN = false;

Private Class (Any) Account(_acc : String, _summ : Integer)
   var acc = _acc;
   var summ = _summ;

   Macro compareTo(othAcc : Account)
        if(acc > othAcc.acc)
          return 1;
        elif(acc < othAcc.acc)
          return -1;
        else
          if(summ > othAcc.summ)
            return 1;
          elif (summ > othAcc.summ)
            return -1;
          else
            return 0;
          end;
        end;
      End;
End;

Class (TestCase) TestSet()
   var set;
   var objSet;

  Macro test_add()
      var r;
      r = set.add(1);
      AssertTrue(r);
      AssertEquals(1, set.size);
      AssertTrue(set.contains(1));
      AssertFalse(set.contains("1"));

      r = set.add(1);
      AssertFalse(r);
      AssertEquals(1, set.size);
   End;

   Macro test_contains()
      var r;
      r = set.contains(null);
      AssertFalse(r);
      r = set.contains(1);
      AssertFalse(r);
      set.add(1);
      r = set.contains(1);
      AssertTrue(r);
   End;

   Macro test_addAll()
      var arr = SArray(1, 2, 3, 1, 1, 1, 0);
      var r = set.AddAll(arr);
      AssertTrue(r);
      AssertEquals(4, set.size);
      AssertTrue(set.containsAll(arr_(0, 1, 2, 3)));
   End;

   Macro test_addItems()
      var r = set.addItems(1, 1, 2, 3, 2);
      AssertEquals(r, set);
      AssertEquals(3, set.size);
      AssertTrue(set.containsAll(arr_(1,2,3)))
   End;

   Macro test_remove()
      var r;
      set.addItems(1, 2, 3, 4, 5);
      r = set.remove(2);
      AssertTrue(r);
      AssertFalse(set.contains(2));
      r = set.remove(2);
      AssertFalse(r);
      AssertFalse(set.contains(2));
      AssertEquals(4, set.size);
   End;

   Macro test_removeAll()
      var r;
      set.addItems(1, 2, 3, 4, 5);
      r = set.removeAll(SArray(1, 3, 4, 9));
      AssertTrue(r);
      AssertEquals(2, set.size);
      AssertFalse(set.contains(1));
      AssertTrue(set.containsAll(arr_(2, 5)));
      r = set.removeAll(SArray(1, 3, 4, 9));
      AssertFalse(r);
      AssertEquals(2, set.size);
      set.clear();
      AssertEquals(0, set.size);
      AssertTrue(set.isEmpty);
   End;

   Macro test_copy()
      set.addItems(1, 2, 3, 4, 5, 6);
      var cp = set.copy();
      AssertEquals(6, cp.size);
      AssertTrue(cp.containsAll(set));
      AssertTrue(set.equals(cp));
   End;

   Macro test_toArray()
      set.addItems(1, 2, 3, 2, 1);
      var arr = set.toArray();
      AssertTrue(set.containsAll(arr));
   End;

End;

Class (TestSet) TestHashSet()

   Macro beforeTest()
      set = HashSet();
      objSet = HashSet().setType(V_GENOBJ);
   End;

End;


Class (TestSet) TestLinkedHashSet()

   Macro beforeTest()
      set = LinkedHashSet();
   End;

   Macro test_order()
      set.addItems(1, 2, 0, 1, 0, 3);
      AssertArrays(arr_(1, 2, 0, 3), set.toArray);
   End;

   Macro test_sort()
      set.addItems(1, 2, 0, 1, 0, 3);
      set.sort();
      AssertArrays(arr_(0, 1, 2, 3), set.toArray);
   End;

End;


Class (TestSet) TestTreeSet()

   Macro beforeTest()
      set = TreeSet();
   End;

   Macro test_order()
      set.addItems(3, null, 1, 2, 0, null);
      assertArrays(arr_(null, 0, 1, 2, 3), set.toArray);
   End;

End;

TestHashSet;
TestLinkedHashSet;
TestTreeSet();