import "..\\mac\\extra\\RUnit\\RUnit.Mac";
import "..\\mac\\extra\\Collections\\Collections.Mac";

RUnitTest.SHOW_SUCCEED_FUN = false;
//RUnitTest.SHOW_SUCCEED_ASSERT = true;

Private Class (Any) Account(_acc : String, _summ : Integer)
   var acc = _acc;
   var summ = _summ;

   Macro compareTo(othAcc : Account)
      if(acc > othAcc.acc)
         return 1;
      elif(acc < othAcc.acc)
         return -1;
      else
         if(summ > othAcc.summ)
            return 1;
         elif (summ > othAcc.summ)
            return -1;
         else
            return 0;
         end;
      end;
   End;
End;

Class (TestCase) TestMap()
   var map;
   var objMap;

   Macro beforeTest()

   End;

   Macro afterTest()
      map = null;
      objMap = null
   End;

   Macro test_put_get()
      map.put("key1", 1);
      assertEquals(map.size, 1);
      assertTrue(map.containsValue(1));
      assertEquals(map.get("key1"), 1);
      assertNull(map.get("SomeKey"));

      map.put("key2", 2);
      assertEquals(map.size, 2);

      var r = map.put("key1", 111);
      assertEquals(r , 1);
      assertEquals(map.get("key1"),111);
      assertEquals(map.size, 2);

      map.clear();
      assertEquals(map.size, 0);
      assertTrue(map.isEmpty);

      var i;
      for(i, 1, 1000)
         map.put("key" + i, "val" + i);
      end;

      assertEquals(map.size, 1000);
      var finded = 0;
      var v;
      for(i, 1, 1000)
         v = map.get("key" + i);
         if(ValType(v) != V_UNDEF)
            finded = finded + 1;;
         end;
      end;
      assertEquals(finded, 1000);
   End;

   Macro test_putItems()
      map.clear();
      map.putItems("key1", 1, "key2", 2);
      var r = map.get("key1");
      assertEquals(1, r);
      r = map.get("key2");
      assertEquals(2, r);
      map.putItems("key3");
      assertNull(map.get("key3"));
      assertTrue(map.containsKey("key3"));
   End;

   Macro test_putAll()
      var addedMap = ArrayMap();
      for(var i, 1, 100)
         addedMap.put("kk" + i, "vv" + i);
      end;
      map.putAll(addedMap);
      assertEquals(100, map.size);

      for ( i, 1, 100)
         if (map.containsKey("kk" + i) == false)
            fail("Map doesn't contain key kk" + i);
         end;
      end;
   End;

   Macro test_replace()
      map.put("k1", 1);
      map.put("k2", 2);
      var r = map.replace("k3", 3);
      assertFalse(r);
      assertEquals(2, map.size);
      r = map.replace("k1", 10);
      assertTrue(r);
      assertEquals(10, map.get("k1"));
   End;

   Macro test_toArray()
      var i;
      var arr;
      for(i, 1, 1000)
         map.put("key" + i, "val" + i);
      end;
      arr = map.keys();
      assertEquals(arr.size, 1000);
       for (i, 0, 999)
         if (map.containsKey(arr[i]) == false)
            fail("Keys doesn't contains key " + arr[i]);
         end;
      end;
      arr = map.values();
      assertEquals(arr.size, 1000);
      for (i, 0, 999)
         if (map.containsValue(arr[i]) == false)
            fail("Values doesn't contains value " + arr[i]);
         end;
      end;

      arr = map.toArray();
      assertEquals(arr.size, 1000);
      for (i, 0, 999)
         var v = map.get(arr[i].key);
         if (v != arr[i].value)
            fail("Pairs doesn't contains pair " + arr[i]);
         end;
      end;
   End;

   Macro test_remove()
      for(var i, 1, 1000)
         map.put("key" + i, "val" + i);
      end;

      assertEquals(map.size, 1000);
      var v = map.remove("key566");
      assertEquals(v, "val566");

      assertEquals(map.size, 999);
      assertTrue(map.containsValue("val566") == false);
      v = map.remove("key566");
      assertNull(v);
      v = map.remove("key1");
      assertEquals(v, "val1");
      assertEquals(map.size, 998);
      var removed = 0;

      for(i, 1, 1000)
         v = map.remove("key" + i);
         if(ValType(v) != V_UNDEF)
            removed = removed + 1;
         end;
      end;
      assertEquals(removed, 998);
      assertEquals(map.size, 0);
      assertTrue(map.isEmpty);
   End;

   Macro test_Copy_Equals()
      for(var i, 1, 1000)
         map.put("key" + i, "val" + i);
      end;
      var cp = map.copy();
      for (var el, cp)
         var v = map.get(el.key);
         if ((ValType(v) == V_UNDEF) or (v != el.value))
            fail("On copy map doesn't contains element");
         end;
      end;
      assertTrue(map.equals(cp));
   End;

   Macro test_iterator()
      map.put("v1", 1);
      map.put("v2", 2);
      map.put("v3", 3);
      var itr = map.newIterator();
      AssertTrue(IsEqClass("IteratorInterface", itr));
      AssertTrue(itr.hasnext);
      AssertTrue(map.containsKey(itr.next().key));
      AssertTrue(itr.hasnext);
      AssertTrue(map.containsKey(itr.next().key));
      AssertTrue(itr.hasnext);
      AssertTrue(map.containsKey(itr.next().key));
      AssertFalse(itr.hasNext);
   End;
End;


Class (TestMap) TestHashMap()
   Macro beforeTest()
      map = HashMap();
      objMap = ObjectHashMap();
   End;
End;

Class (TestMap) TestLinkedHashMap()

   Macro beforeTest()
      map = LinkedHashMap();
   End;

   Macro test_order()
      map.put(1, 1);
      map.put(2, 2);
      map.put(3, 3);
      assertArrays(Ar(1, 2, 3), map.keys());
      assertArrays(Ar(1, 2, 3), map.values());
   End;
End;

Class (TestMap) TestTreeMap()
   Macro beforeTest()
      map = TreeMap();
      objmap = TreeMap();
   End;

   Macro test_order()
      map.put(1, 1);
      map.put(2, 2);
      map.put(0, 0);
      map.put(5, 5);
      map.put(3, 3);
      assertArrays(Ar(0, 1, 2, 3, 5), map.keys());
      assertArrays(Ar(0, 1, 2, 3, 5), map.values());
      map.put("str", "s3");
      map.put($100, "money100");
      map.put(null, "undef");
      assertArrays(Ar(null, 0, 1, 2, 3, 5, $100, "str"), map.keys());
      assertArrays(Ar("undef", 0, 1, 2, 3, 5, "money100", "s3"), map.values());
   End;
End;

Class (TestMap) TestArrayMap()
   Macro beforeTest()
      map = ArrayMap();
   End;
End;

TestHashMap;
TestLinkedHashMap;
TestTreeMap;
TestArrayMap;