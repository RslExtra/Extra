import "..\\mac\\extra\\RUnit\\RUnit.Mac";
import "..\\mac\\extra\\Collections\\Collections.Mac";
RUnitTest.SHOW_SUCCEED_FUN = false;
// Тестовый класс для объектных коллекций
Private Class (Any) Account(_acc : String, _summ : Integer)
   var acc = _acc;
   var summ = _summ;

   Macro compareTo(othAcc : Account)
      if(acc > othAcc.acc)
         return 1;
      elif(acc < othAcc.acc)
         return -1;
      else
         if(summ > othAcc.summ)
            return 1;
         elif (summ > othAcc.summ)
            return -1;
         else
            return 0;
         end;
      end;
   End;
End;

Private Macro otherCompFun(a1,a2)
   return CF_ComparePrimitive(a1.acc,a2.acc);
end;

Private Macro otherCompFun2(a1,a2)
   return CF_ComparePrimitive(a1.summ, a2.summ);
end;

Private Macro otherEqualFun(a1,a2)
   return (otherCompFun(a1,a2) == 0);
End;


Class (TestCase) TestList()
   var list;
   var objList;

   Macro fillList()

   End;


   Macro test_add()
      list.clear();
      assertException(IndexOutOfBoundsException, list.add("out", 2));
      list.add(1);
      assertEquals(1, list.size);
      assertTrue(list.contains(1));

      list.add("two");
      assertEquals(2, list.size);
      assertTrue(list.contains("two"));
      assertArrays(Ar(1,"two"), list.toArray());

      list.addFirst(-5);
      assertArrays(Ar(-5, 1, "two"), list.toArray);

      list.addLast(12);
      assertArrays(Ar(-5, 1, "two", 12), list.toArray);

      list.add(null);
      assertArrays(Ar(-5, 1, "two", 12, null), list.toArray);

      objList.clear();
      objList.add(Account("40817810000000000001", 200));
      assertEquals(1, objList.size);
      assertTrue(objList.contains(Account("40817810000000000001", 200)));
      assertFalse(objList.contains(Account("40817810000000000001", 201)));
      objList.add(null);
      assertEquals(2, objList.size);
      var ind = objList.indexOf(null);
      assertEquals(1, ind);
   End;

   Macro test_AddItems()
      list.clear();
      list.addItems(1, 2, 3);
      assertArrays(Ar(1, 2, 3), list.toArray);
      list.addItems(4).addItems(5).addItems();
      assertArrays(Ar(1, 2, 3, 4, 5), list.toArray);
   End;

   Macro test_get()
      var g;
      assertArrays(Ar(0, 1, 2, 3), list.toArray);
      g = list.getFirst();
      assertEquals(0, g);

      g = list.getLast();
      assertEquals(3, g);

      g = list.get(2);
      assertEquals(2, g);
   End;


   Macro test_remove()
      var r;
      assertArrays(Ar(0, 1, 2, 3), list.toArray);

      r = list.removeFirst();
      assertEquals(0, r);
      assertArrays(Ar(1, 2, 3), list.toArray);

      r = list.removeLast();
      assertEquals(3, r);
      assertArrays(Ar(1, 2), list.toArray);

      r = list.remove(1);
      assertEquals(2, r);
      assertArrays(Ar(1), list.toArray);

      r = list.removeAll(Ar(0));
      assertFalse(r);
      assertEquals(1, list.size);
      r = list.removeAll(Ar(2, 1, 0));
      assertTrue(r);
      assertEquals(0, list.size);

   End;

   Macro test_set()
      var r;
      assertArrays(Ar(0, 1, 2, 3), list.toArray);

      r = list.set(0, 11);
      assertEquals(0, r);
      assertArrays(Ar(11, 1, 2, 3), list.toArray);

      r = list.set(-1, 10);
      assertNull(r);
      assertArrays(Ar(11, 1, 2, 3), list.toArray);

      r = list.set(3, 33);
      assertEquals(3, r);
      assertArrays(Ar(11, 1, 2, 33), list.toArray);
   End;

   Macro test_indexOf()
      var i;
      list.add(1);
      assertArrays(Ar(0, 1, 2, 3, 1), list.toArray);

      i = list.indexOf(10);
      assertEquals(-1, i);

      i = list.indexOf(1);
      assertEquals(1, i);

      i = list.indexOf(3);
      assertEquals(3, i);

      i = list.lastIndexOf(1);
      assertEquals(4, i);

      i = objList.indexOf(Account("40817810000000000002", 200));
      assertEquals(1, i);

      i = objList.indexOf(Account("40817810000000000002", 202));
      assertEquals(-1, i);

      // objList.setEqualFunc(@otherEqualFun);
      objList.setEqualsFunc(@otherEqualFun);
      i = objList.indexOf(Account("40817810000000000002", 202));
      assertEquals(1, i);

   End;

   Macro test_Copy()
      assertArrays(Ar(0, 1, 2, 3), list.toArray);
      var copyList = list.copy();
      assertEquals(4, copyList.size);
      assertArrays(Ar(0, 1, 2, 3), copyList.toArray);

      copyList = objList.copy();
      assertTrue(objList.equals(copyList));
   End;

   Macro test_reverse()
      assertArrays(Ar(0, 1, 2, 3), list.toArray);
      list.reverse();
      assertArrays(Ar(3, 2, 1, 0), list.toArray);
      assertEquals(4, list.size);
   End;

   Macro test_addAll()
      var addedList = llistOf(10,20,30,40);
      list.addAll(addedList, 2);
      assertArrays(Ar(0, 1, 10, 20, 30, 40, 2, 3), list.toArray);
      list.addAll(addedList);
      assertArrays(Ar(0, 1, 10, 20, 30, 40, 2, 3, 10, 20, 30, 40), list.toArray);
      list.clear();
      list.addAll(addedList, 0);
      assertArrays(Ar(10,20,30,40), list.toArray);
   End;

   Macro test_Sort()
      list.clear();
      var i;
      for(i, 0, 10000, 1)
         list.add(random());
      end;
      list.sort();
      assertEquals(10001, list.size);
      assertTrue(list.isSorted());
      list.add(null);
      list.sort(@CF_CompareNullable);
      assertEquals(10002, list.size);
      assertTrue(list.isSorted(@CF_CompareNullable));

      objList.clear();
      for(i, 0, 1000, 1)
         objList.add(Account(String(Random) + String(Random), Random));
      end;

      objList.sort();
      assertEquals(1001, objList.size);
      assertTrue(objList.isSorted);
   End;

   Macro test_MultiTypes()
      var lst = ArrayList();
      var res;
      lst.addItems(1, "some", 3, null);
      res = lst.contains(1);
      assertTrue(res);
      res = lst.contains("some");
      assertTrue(res);
      res = lst.contains(2);
      assertFalse(res);
      res = lst.indexOf("some1");
      assertEquals(-1, res);
      res = lst.indexOf(null);
      assertEquals(3, res);
   End;

   Macro test_Sublist()
      list.clear;

      list.addItems(1, 2, 3, 4, 5);
      assertArrays(Ar(2,3,4), list.sublist(1, 4).toArray);
      assertArrays(Ar(1,2,3,4), list.sublist(null, 4).toArray);
      assertArrays(Ar(3,4,5), list.sublist(2).toArray);
   End;

   Macro test_iterator()
      list.clear();
      list.addItems(1, 2, 3);
      var itr = list.newIterator(1);
      var a  = itr.next;
      assertEquals(2, a);

      itr = list.newIterator();
      a = itr.next();
      assertEquals(1, a);
      assertTrue(itr.hasnext);
      a = itr.next();
      assertEquals(2, a);
      assertTrue(itr.hasnext);
      a = itr.next();
      assertEquals(3, a);
      assertFalse(itr.hasnext);
      a = itr.add(4);
      assertFalse(itr.hasnext);
      assertTrue(itr.hasPrev);
      a = itr.prev();
      assertEquals(4, a);
      a = itr.prev();
      assertEquals(3, a);
      a = itr.prev();
      assertEquals(2, a);
      a = itr.prev();
      assertEquals(1, a);
      assertFalse(itr.hasprev);
      itr.set(10);
      a = itr.next();
      assertEquals(10, a);
      a = itr.prev();
      assertEquals(10, a);
      a = itr.remove();
      assertEquals(10, a);
      assertEquals(3, list.size);
   End;

   Macro test_DescIterator()
      list.clear();
      list.addItems(1, 2, 3);
      var itr = list.newDescIterator();
      AssertFalse(itr.hasprev);
      var a = itr.next();
      AssertEquals(3, a);
      a = itr.next();
      AssertEquals(2, a);
      a = itr.next();
      AssertEquals(1, a);
      AssertFalse(itr.hasNext);
   End;
End;

Class (TestList) TestArrayList()
   Macro fillList()
      list.add(0);
      list.add(1);
      list.add(2);
      list.add(3);

      objList.add(Account("40817810000000000001", 100));
      objList.add(Account("40817810000000000002", 200));
      objList.add(Account("42301810000000000001", 300));
      objList.add(Account("42305840000000000001", 300));
   End;

   Macro beforeTest()
      list = ArrayList().setType(V_INTEGER);
      objList = ArrayList();
      fillList();
   End;

   Macro afterTest()
      list = null;
      objList = null;
   End;

   Macro test_binarySearch()
      list.clear();
      list.addItems(1, 2, 3, 4, 7, 10);
      var r;
      r = list.binarySearch(0);
      assertEquals(-1, r);
      r = list.binarySearch(2);
      assertEquals(1, r);
      r = list.binarySearch(5);
      assertEquals(-5, r);
      r = list.binarySearch(8);
      assertEquals(-6, r);
      r = list.binarySearch(9);
      assertEquals(-6, r);
   End;
End;

Class (TestList) TestLinkedList()

   Macro fillList()
      list.add(0);
      list.add(1);
      list.add(2);
      list.add(3);

      objList.add(Account("40817810000000000001", 100));
      objList.add(Account("40817810000000000002", 200));
      objList.add(Account("42301810000000000001", 300));
      objList.add(Account("42305840000000000001", 300));
   End;

   Macro beforeTest()
      list = LinkedList().setType(V_INTEGER);
      objList = LinkedList();
      fillList();
   End;

   Macro afterTest()
      list = null;
      objList = null;
   End;

   Macro test_getE()
      var nd;
      assertArrays(Ar(0, 1, 2, 3), list.toArray);
      nd = list.getE(1);
      assertEquals(1, nd.e);
      assertEquals(0, nd.prv.e);
      assertEquals(2, nd.nxt.e);
      nd.e = 11;
      assertArrays(Ar(0, 11, 2, 3), list.toArray);

      nd = list.getE(10);
      assertNull(nd);
   End;

   Macro test_Stack()
      list.clear();
      assertNull(list.poll);
      list.push(1);
      assertEquals(1, list.getLast);
      var a = list.poll();
      assertEquals(1, a);
      assertEquals(0, list.size);
   End;

   Macro test_toSorted()
      list.clear();
      list.addItems(1, 2, 1, 0, 4);
      var sorted = list.toSortedList();
      assertArrays(Ar(0, 1, 1, 2, 4), sorted.toArray);
      assertTrue(sorted.containsAll(list));
      var ind = sorted.add(-1);
      assertEquals(0, ind);
      assertArrays(Ar(-1, 0, 1, 1, 2, 4), sorted.toArray);
   End;
End;

Class (TestCase) TestSortedLinkedList()
   var list;
   var objList;

   Macro beforeTest()
      list = SortedLinkedlist().setType(V_INTEGER);
      objList = SortedLinkedlist();
   End;

   Macro afterTest()
      list = null;
      objList = null;
   End;

   Macro test_add()
      var ind;
      ind = list.add(3);
      assertEquals(0, ind);

      ind = list.add(1);
      assertEquals(0, ind);

      ind = list.add(2);
      assertEquals(1, ind);
      list.add(4);
      list.add(2);
      assertArrays(Ar(1,2,2,3,4), list.toArray);

      ind = objList.add(Account("40817810000000000002", 100));
      assertEquals(0, ind);

      ind = objList.add(Account("40817810000000000001", 300));
      assertEquals(0, ind);
      ind = objList.add(Account("40817810000000000001", 200));
      assertEquals(1, ind);
      ind = objList.add(Account("42305840000000000001", 300));
      assertEquals(3, ind);

      objList.setComparator(@otherCompFun2); //Пересортируем по сумме
      assertEquals(100, objList.get(0).summ);
      assertEquals(200, objList.get(1).summ);
      assertEquals(300, objList.get(2).summ);
      assertEquals(300, objList.get(3).summ);
   End;

   Macro test_AddItems()
      list.clear();
      list.addItems();
      assertTrue(list.isEmpty);
      list.addItems(3, 2, 1);
      assertArrays(Ar(1, 2, 3), list.toArray);
      list.addItems(2, 1, 3);
      assertArrays(Ar(1, 1, 2, 2, 3, 3), list.toArray);
   End;

   Macro test_iterator()
      list.clear();
      list.addItems(1, 2, 3);
      var itr = list.newIterator(1);
      var a  = itr.next;
      assertEquals(2, a);

      itr = list.newIterator();
      a = itr.next();
      assertEquals(1, a);
      assertTrue(itr.hasnext);
      a = itr.next();
      assertEquals(2, a);
      assertTrue(itr.hasnext);
      a = itr.next();
      assertEquals(3, a);
      assertFalse(itr.hasnext);
      a = itr.add(4);
      assertFalse(itr.hasnext);
      assertTrue(itr.hasPrev);
      a = itr.prev();
      assertEquals(4, a);
      a = itr.prev();
      assertEquals(3, a);
      a = itr.prev();
      assertEquals(2, a);
      a = itr.prev();
      assertEquals(1, a);
      assertFalse(itr.hasprev);
      itr.set(10);
      a = itr.next();
      assertEquals(10, a);
      a = itr.prev();
      assertEquals(10, a);
      a = itr.remove();
      assertEquals(10, a);
      assertEquals(3, list.size);
   End;

   Macro test_DescIterator()
      list.clear();
      list.addItems(1, 2, 3);
      var itr = list.newDescIterator();
      AssertFalse(itr.hasprev);
      var a = itr.next();
      AssertEquals(3, a);
      a = itr.next();
      AssertEquals(2, a);
      a = itr.next();
      AssertEquals(1, a);
      AssertFalse(itr.hasNext);
   End;
End;

SetThrowMode(2);
TestArrayList;
TestLinkedList;
TestSortedLinkedList;
SetThrowMode(0);