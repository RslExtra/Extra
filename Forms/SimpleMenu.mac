/**
   @Package Forms

   Реализация простого и удобного меню.
   @Version 0.2
*/

/**
   Класс, реализация простого скроллинга. Реализован на базе классического RSL меню [menu].

   Преимущества:
   - Оперирует не строками, а пользовательскими объектами.
   - Удобно настраивается для вывода меню с несколькими столбцами (по полям объекта)
   - Может возвращать не только выбранный индекс, но и объект, ему соответствующий.


   Пример использования:
   @sample [samples.forms.SimpleMenu_]
*/
Class SimpleMenu()
   /** Префикс строки меню. По умолчанию = " ".*/
   var prefix   =  " ";
   /** Постфикс строки меню. По умолчанию = " ".*/
   var postfix  =  " ";
   /** Разделитель столбцов меню. По умолчанию = " | ".*/
   var divider  =  " | ";

   private var size  = 0;
   private var title = "Меню";
   private var mess  = "Выберите";
   private var x;
   private var y;
   private var n = 0;
   private var LineArr = TArray();
   private var ObjArr  = TArray();
   private var ColumnProps = TArray();
   private var ColumnSizes = TArray();
   /** Ссылка на объект, который был выбран последним. */
   var choice = null;

   /**
      Устанавливает заголовок меню '_title'. Возращает текущий экземпляр класса.
   */
   Macro setTitle(_title : String)
      title = _title;
      return this;
   End;

   /**
      Устанавливает префикс строки меню. Возращает текущий экземпляр класса.
   */
   Macro setPrefix(_prefix : String)
      prefix = _prefix;
      return this;
   End;

   /**
      Устанавливает постфикс строки меню. Возращает текущий экземпляр класса.
   */
   Macro setPrefix(_postfix : String)
      postfix = _postfix;
      return this;
   End;

   /**
      Устанавливает разделитель столбцов меню. Возращает текущий экземпляр класса.
   */
   Macro setDivider(_divider : String)
      divider = _divider;
      return this;
   End;

   /**
      Устанавливает сообщение внизу экрана  '_Message'.
   */
   Macro setMessage(_Message : String)
      mess = _Message;
      return this;
   End;

   /**
      Устанавливает координаты левого верхнего угла.
   */
   Macro setCoord(_x : Integer, _y : Integer)
      x = _x;
      y = _y;
      return this;
   End;

   /**
      Устанавливает координату x.
   */
   Macro setX(_x : Integer)
      x = _x;
      return this;
   End;

   /**
      Устанавливает координату y.
   */
   Macro setY(_y : Integer)
      y = _y;
      return this;
   End;

   /**
      Возвращает ширину в символах
   */
   Macro getWidth() : Integer
      var res = 2;
      for(var s, ColumnSizes)
         res = res + s + 1;
      end;
      return res;
   End;

   /**
      Устанавливает активную строку.
   */
   Macro setActiveLine(_n)
      n = _n;
      return this;
   End;

   /**
      Устанавливает активной строку с объектом равным 'obj'. Obj должен реализовывать метод `equals(other) : bool`.
   */
   Macro setActiveObject(obj)
      if(ValType(obj) == V_UNDEF)
         return setActiveLine(0);
      end;
      var i = ObjArr.size - 1;
      while ((i > 0) and (obj.equals(ObjArr[i]) == false))
         i = i - 1;
      end;
      return setActiveLine(i);
   End;

   /**
      Устанавливает колонку; 'propName' задает имя поля объекта, откуда будет браться значение, 'ssize' устанавливает размер колонки в символах.
   */
   Macro setCol(propName : String, ssize : Integer)
      ColumnProps[ColumnProps.size] = propName;
      ColumnSizes[ColumnSizes.size] = ssize;
      return this;
   End;

   Private Macro processStr(str : String, ns : Integer) : String
      var res = "";
      var ln = StrLen(str);
      if (ln >= ns)
         res = SubStr(str,1, ns);
      else
         var i = 0;
         res = str;
         while (i < (ns - ln))
            res = res + " ";
            i = i + 1;
         end;
      end;
      return res;
   End;

   private Macro addLine(obj : Variant)
      var i = 0;
      var s = prefix;
      var propVal;
      var sz = 0;
      while (i < ColumnProps.Size)
         propVal = GenGetProp(obj, ColumnProps[i]);
         sz      = ColumnSizes[i];
         s = s + processStr(String(propVal), sz);
         i = i + 1;
         if(i < ColumnProps.size)
            s = s + divider;
         end;
      end;
      s = s + postfix;
      ObjArr[ObjArr.size] = obj;
      LineArr[LineArr.size] = s;
   End;

   /**
      Добавляет объект 'obj' к списку выбора.
   */
   Macro add(obj : Variant)
      addLine(obj);
      return this;
   End;

   /**
      Добавляет массив объектов 'arr' к списку выбора.
   */
   Macro addArray(arr : TArray)
      for (var el, arr)
         add(el);
      end;
      return this;
   End;

   /**
      Вызывает меню, и после выбора пользователя возвращает индекс выбранной строки или `-1`, если выбор не был сделан
   */
   Macro indexOf()
      var mn = Menu(LineArr, mess, title, x, y, n);
      return mn;
   End;

   /**
      Вызывает меню, и после выбора пользователя возвращает объект выбранной строки или `null`, если выбор не был сделан
   */
   Macro valueOf() : Variant
      var ind = indexOf();
      if(ind >= 0)
         return ObjArr[ind];
      end;
   End;
End;
